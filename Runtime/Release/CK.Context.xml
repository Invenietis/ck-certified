<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CK.Context</name>
    </assembly>
    <members>
        <member name="T:CK.Context.Res.R">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CK.Context.Res.R.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CK.Context.Res.R.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CK.Context.Res.R.ConfigSupportTypeFileOnly">
            <summary>
              Looks up a localized string similar to Only File type supported..
            </summary>
        </member>
        <member name="P:CK.Context.Res.R.ContextAddressRequired">
            <summary>
              Looks up a localized string similar to An address for the context is required..
            </summary>
        </member>
        <member name="P:CK.Context.Res.R.HostAlreadyOwnsContext">
            <summary>
              Looks up a localized string similar to CreateContext can be called only once per Host..
            </summary>
        </member>
        <member name="P:CK.Context.Res.R.LoadContextFail">
            <summary>
              Looks up a localized string similar to Unable to load context..
            </summary>
        </member>
        <member name="P:CK.Context.Res.R.NewContextDisplayName">
            <summary>
              Looks up a localized string similar to Created on {0:D}.
            </summary>
        </member>
        <member name="P:CK.Context.Res.R.UnableToFind">
            <summary>
              Looks up a localized string similar to Unable to find &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:CK.Context.Res.R.XmlInvalidFormatVersion">
            <summary>
              Looks up a localized string similar to Xml version must exist and be at least 2.5.1..
            </summary>
        </member>
        <member name="T:CK.Context.IHostInformation">
            <summary>
            Exposes standard host information.
            </summary>
        </member>
        <member name="P:CK.Context.IHostInformation.UserConfig">
            <summary>
            Gets the host configuration associated to the current user.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CK.Context.IHostInformation.SystemConfig" -->
        <member name="P:CK.Context.IHostInformation.AppName">
            <summary>
            Gets the name of the application. Civikey-Standard for instance for the Civikey Standard application. 
            It is an identifier (no /, \ or other special characters in it: see <see cref="M:System.IO.Path.GetInvalidPathChars"/>).
            </summary>
        </member>
        <member name="P:CK.Context.IHostInformation.SubAppName">
            <summary>
            Gets an optional second name (can be null).
            When not null, it is an identifier just like <see cref="P:CK.Context.IHostInformation.AppName"/>.
            </summary>
        </member>
        <member name="P:CK.Context.IHostInformation.AppVersion">
            <summary>
            Gets the current application version.
            </summary>
        </member>
        <member name="P:CK.Context.IHostInformation.ApplicationDataPath">
            <summary>
            Gets the full path of application-specific data repository for the current user if 
            the host handles it. Null otherwise.
            When not null, it ends with <see cref="F:System.IO.Path.DirectorySeparatorChar"/> and the directory exists.
            </summary>
        </member>
        <member name="P:CK.Context.IHostInformation.CommonApplicationDataPath">
            <summary>
            Gets the full path of application-specific data repository for all users if 
            the host handles it. Null otherwise.
            When not null, it ends with <see cref="F:System.IO.Path.DirectorySeparatorChar"/> and the directory exists.
            </summary>
        </member>
        <member name="T:CK.Context.ContextProfileRequiredEventArgs">
            <summary>
            </summary>
        </member>
        <member name="T:CK.Context.ContextEventArgs">
            <summary>
            Defines a context event: it simply offers an access to the context.
            </summary>
        </member>
        <member name="M:CK.Context.ContextEventArgs.#ctor(CK.Context.IContext)">
            <summary>
            Initializes a new <see cref="T:CK.Context.ContextEventArgs"/> boud to a <see cref="P:CK.Context.ContextEventArgs.Context"/>.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="P:CK.Context.ContextEventArgs.Context">
            <summary>
            Gets the <see cref="T:CK.Context.IContext"/> to which this event is related.
            </summary>
        </member>
        <member name="P:CK.Context.ContextProfileRequiredEventArgs.DisplayName">
            <summary>
            Gets or sets the display name for the default context.
            </summary>
        </member>
        <member name="P:CK.Context.ContextProfileRequiredEventArgs.Address">
            <summary>
            Gets or sets the <see cref="T:System.Uri"/> of the default context to use.
            </summary>
        </member>
        <member name="T:CK.Context.AbstractContextHost">
            <summary>
            Base class for all hosts. It is a thin wrapper around one (and only one) <see cref="T:CK.Context.IContext"/>.
            The <see cref="T:CK.Context.AbstractContextHost"/> is in charge of providing User/System configuration to the context
            through <see cref="M:CK.Context.AbstractContextHost.GetSystemConfigAddress"/>, <see cref="M:CK.Context.AbstractContextHost.GetDefaultUserConfigAddress(System.Boolean)"/> and <see cref="M:CK.Context.AbstractContextHost.GetDefaultContextProfile(System.Boolean)"/>
            abstract methods.
            </summary>
        </member>
        <member name="M:CK.Context.AbstractContextHost.#ctor">
            <summary>
            Initializes a new ContextHost instance. 
            Absolutely nothing is done by this constructor: <see cref="M:CK.Context.AbstractContextHost.CreateContext"/> must be called
            in order to obtain a new <see cref="T:CK.Context.IContext"/>.
            </summary>
        </member>
        <member name="M:CK.Context.AbstractContextHost.CreateContext">
            <summary>
            Initializes a new <see cref="T:CK.Context.IContext"/>: one and only one context can be created by a host.
            Context events are associated to the abstract methods <see cref="M:CK.Context.AbstractContextHost.LoadSystemConfig"/>/<see cref="M:CK.Context.AbstractContextHost.SaveSystemConfig"/>, 
            <see cref="M:CK.Context.AbstractContextHost.LoadUserConfig"/>/<see cref="M:CK.Context.AbstractContextHost.SaveUserConfig"/> and <see cref="M:CK.Context.AbstractContextHost.SaveContext"/>: it is up to this host to provide
            actual System and User configuration.
            </summary>
            <returns>A new context.</returns>
        </member>
        <member name="M:CK.Context.AbstractContextHost.GetDefaultUserConfigAddress(System.Boolean)">
            <summary>
            This method is called by <see cref="M:CK.Context.AbstractContextHost.EnsureCurrentUserProfile(System.Boolean)"/> whenever the host needs an address to store the user configuration
            and there is no already registered user profile in the system configuration.
            </summary>
            <param name="saving">True if we are saving the configuration. False if we are loading it.</param>
            <returns>The address for the user configuration.</returns>
        </member>
        <member name="M:CK.Context.AbstractContextHost.GetDefaultContextProfile(System.Boolean)">
            <summary>
            This method is called by <see cref="M:CK.Context.AbstractContextHost.EnsureCurrentContextProfile(System.Boolean)"/> whenever the host needs an address to store the current context
            and there is no already registered context in the user profile.
            </summary>
            <param name="saving">True if we are saving the current context. False if we are loading it.</param>
            <returns>The display name and address for the context.</returns>
        </member>
        <member name="M:CK.Context.AbstractContextHost.EnsureCurrentUserProfile(System.Boolean)">
            <summary>
            Finds or creates a <see cref="T:CK.Plugin.Config.IUriHistory"/> for the current user profile.
            It is first the <see cref="P:CK.Plugin.Config.ISystemConfiguration.CurrentUserProfile"/>, if it is null we take the first profile 
            among <see cref="P:CK.Plugin.Config.ISystemConfiguration.UserProfiles"/> that is a file (disk-based), if there is no such registered profile,
            we take the first one (whathever kind of uri it is). Finally, if there is no profile at all, we create a new one
            with the user name and the return of the virtual <see cref="M:CK.Context.AbstractContextHost.GetDefaultUserConfigAddress(System.Boolean)"/> method.
            </summary>
            <param name="saving">True if we are saving the configuration. False if we are loading it.</param>
            <returns>A <see cref="T:CK.Plugin.Config.IUriHistory"/> that is the current user profile.</returns>
        </member>
        <member name="P:CK.Context.AbstractContextHost.Context">
            <summary>
            Gets the <see cref="T:CK.Context.IContext"/> wrapped by the host.
            Null if <see cref="M:CK.Context.AbstractContextHost.CreateContext"/> has not been called yet.
            </summary>
        </member>
        <member name="P:CK.Context.AbstractContextHost.UserConfig">
            <summary>
            Gets the user configuration.
            </summary>
            <remarks>
            This is a shortcut to the current <see cref="P:CK.Plugin.Config.IUserConfiguration.HostConfig"/>.
            </remarks>
        </member>
        <member name="P:CK.Context.AbstractContextHost.SystemConfig">
            <summary>
            Gets the system configuration.
            </summary>
            <remarks>
            This is a shortcut to the <see cref="P:CK.Plugin.Config.ISystemConfiguration.HostConfig"/>.
            </remarks>
        </member>
        <member name="T:CK.Context.ApplicationExitingEventArgs">
            <summary>
            The argument of <see cref="E:CK.Context.IContext.ApplicationExiting"/> event.
            </summary>
        </member>
        <member name="T:CK.Context.ApplicationExitedEventArgs">
            <summary>
            The argument of <see cref="E:CK.Context.IContext.ApplicationExited"/> event.
            Whatever the <see cref="P:CK.Context.ApplicationExitedEventArgs.HostShouldExit"/> value is, this event indicates the death of the <see cref="T:CK.Context.IContext"/> that emits it:
            any reference to the context should be released.
            </summary>
        </member>
        <member name="M:CK.Context.ApplicationExitedEventArgs.#ctor(CK.Context.IContext,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:CK.Context.ApplicationExitedEventArgs"/>.
            </summary>
            <param name="ctx">The source context.</param>
            <param name="hostShouldExit">See <see cref="P:CK.Context.ApplicationExitedEventArgs.HostShouldExit"/>.</param>
        </member>
        <member name="P:CK.Context.ApplicationExitedEventArgs.HostShouldExit">
            <summary>
            This parameter actually concerns the application host: plugins have no real reasons to take it into account.
            When true, the host should leave: this is typically triggered by an "Exit" button in a plugin.
            </summary>
        </member>
        <member name="M:CK.Context.ApplicationExitingEventArgs.#ctor(CK.Context.IContext,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:CK.Context.ApplicationExitedEventArgs"/>.
            </summary>
            <param name="ctx">The source context.</param>
            <param name="hostShouldExit">See <see cref="!:HostShouldExit"/>.</param>
        </member>
        <member name="P:CK.Context.ApplicationExitingEventArgs.Cancel">
            <summary>
            Gets or sets whether this closing request should be canceled or not.
            </summary>
        </member>
        <member name="M:CK.Context.IContext.SaveContext(CK.Storage.IStructuredWriter)">
            <summary>
            Writes this <see cref="T:CK.Context.IContext">context</see> as in a stream.
            </summary>
            <param name="stream">Stream to the saved document.</param>
        </member>
        <member name="M:CK.Context.IContext.LoadContext(CK.Storage.IStructuredReader)">
            <summary>
            Loads this <see cref="T:CK.Context.IContext">context</see> from a file.
            </summary>
            <param name="filePath">Path to the file.</param>
            <returns>A list (possibly empty) of <see cref="T:CK.Core.ISimpleErrorMessage"/> describing read errors.</returns>
        </member>
        <member name="M:CK.Context.IContext.RaiseExitApplication(System.Boolean)">
            <summary>
            Raises the <see cref="E:CK.Context.IContext.ApplicationExiting"/> (any persistence of information/configuration should be done during this phasis), 
            and <see cref="E:CK.Context.IContext.ApplicationExited"/> event.
            </summary>
            <param name="hostShouldExit">When true, the application host should exit: this is typically used by a plugin to
            trigger the end of the current application (ie. the "Exit" button). 
            A host would better use false to warn any services and plugins to do what they have to do before leaving and manage to exit the way it wants.</param>
        </member>
        <member name="P:CK.Context.IContext.ConfigManager">
            <summary>
            Gets the <see cref="T:CK.Plugin.Config.IConfigManager"/> that can be used to read and save the configuration.
            </summary>
        </member>
        <member name="P:CK.Context.IContext.BaseServiceProvider">
            <summary>
            Gets or sets a fallback <see cref="T:System.IServiceProvider"/> that will be queried for a service
            if it is not found at this level.
            </summary>
        </member>
        <member name="P:CK.Context.IContext.ServiceContainer">
            <summary>
            Gets the service container for this context.
            </summary>
        </member>
        <member name="P:CK.Context.IContext.RequirementLayer">
            <summary>
            Gets the <see cref="P:CK.Context.IContext.RequirementLayer"/> of this context.
            </summary>
        </member>
        <member name="P:CK.Context.IContext.PluginRunner">
            <summary>
            Gets the <see cref="T:CK.Plugin.ISimplePluginRunner"/>
            </summary>
        </member>
        <member name="P:CK.Context.IContext.LogCenter">
            <summary>
            Gets the <see cref="T:CK.Plugin.ILogCenter"/>
            </summary>
        </member>
        <member name="E:CK.Context.IContext.ApplicationExiting">
            <summary>
            Fired by <see cref="M:CK.Context.IContext.RaiseExitApplication(System.Boolean)"/> to signal the end of the application (this is a cancelable event). 
            If it is not cancelled, runner is disabled and then <see cref="E:CK.Context.IContext.ApplicationExited"/> event is fired.
            </summary>
        </member>
        <member name="E:CK.Context.IContext.ApplicationExited">
            <summary>
            Fired by <see cref="M:CK.Context.IContext.RaiseExitApplication(System.Boolean)"/> to signal the very end of the application. 
            Once this event has fired, this <see cref="T:CK.Context.IContext"/> is no more functionnal.
            </summary>
        </member>
        <member name="M:CK.Context.Context.CreateInstance">
            <summary>
            Initializes a new context that is proxified by default.
            </summary>
        </member>
        <member name="M:CK.Context.Context.CreateInstance(System.Boolean)">
            <summary>
            Initializes a new context.
            </summary>
        </member>
    </members>
</doc>
