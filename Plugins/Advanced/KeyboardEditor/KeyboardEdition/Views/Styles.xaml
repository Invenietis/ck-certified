<ResourceDictionary x:Class="KeyboardEditor.s.Styles"
                    xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:cmd="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Extras.WPF4"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    xmlns:view="clr-namespace:CK.WPF.StandardViews;assembly=CK.WPF.StandardViews"
                    xmlns:cce="clr-namespace:Microsoft.Windows.Controls;assembly=CK.WPF.Controls"
                    xmlns:ckcontrols="clr-namespace:CK.WPF.Controls;assembly=CK.WPF.Controls"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:ctrls="clr-namespace:CK.WPF.Controls;assembly=CK.WPF.Controls"
                    xmlns:ckwincore="clr-namespace:CK.Windows;assembly=CK.Windows.Core"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:KeyboardEditor.ViewModels"
                    xmlns:local="clr-namespace:KeyboardEditor.s"
                    mc:Ignorable="d">

    <ckwincore:BooleanToVisibilityConverter x:Key="booltovisibilityconverter" />
    <vm:DeletableComponentConverter x:Key="deletablecomponentconverter"/>
    <ctrls:StringIsNullOrWhiteSpaceToBoolean x:Key="stringnulltobool" />
    <vm:ImageConverter x:Key="imageconverter" />
    <ctrls:NotConverter x:Key="notconverter" />
    <ctrls:NotNullConverter x:Key="notnull" />
    <vm:TypeConverter x:Key="typeconverter"/>

    <PathGeometry x:Key="TreeArrow"
                  Figures="M0,0 L0,6 L6,0 z" />
    <SolidColorBrush x:Key="EditorLightColor" Color="#FF4D87B0" />
    <SolidColorBrush x:Key="EditorMainColor" Color="#4481ba" />

    <InputBindingCollection x:Shared="False"
                            x:Key="InputBindings">
        <KeyBinding Gesture="Up"
                    Modifiers="Shift"
                    Command="{Binding UpCommand}">
        </KeyBinding>
        <KeyBinding Gesture="Down"
                    Modifiers="Shift"
                    Command="{Binding DownCommand}">
        </KeyBinding>
        <KeyBinding Gesture="Left"
                    Modifiers="Shift"
                    Command="{Binding LeftCommand}">
        </KeyBinding>
        <KeyBinding Gesture="Right"
                    Modifiers="Shift"
                    Command="{Binding RightCommand}">
        </KeyBinding>
        <KeyBinding Gesture="Up"
                    Modifiers="Control+Shift"
                    Command="{Binding UpCommand}"
                    CommandParameter="fast">
        </KeyBinding>
        <KeyBinding Gesture="Down"
                    Modifiers="Control+Shift"
                    Command="{Binding DownCommand}"
                    CommandParameter="fast">
        </KeyBinding>
        <KeyBinding Gesture="Left"
                    Modifiers="Control+Shift"
                    Command="{Binding LeftCommand}"
                    CommandParameter="fast">
        </KeyBinding>
        <KeyBinding Gesture="Right"
                    Modifiers="Control+Shift"
                    Command="{Binding RightCommand}"
                    CommandParameter="fast">
        </KeyBinding>
        <KeyBinding Gesture="Delete"
                    Command="{Binding SupprCommand}">
        </KeyBinding>
        <KeyBinding Gesture="Return"
                    Command="{Binding ReturnCommand}">
        </KeyBinding>
        <KeyBinding Gesture="Escape"
                    Command="{Binding EscapeCommand}">
        </KeyBinding>

    </InputBindingCollection>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily"
                Value="Calibri"></Setter>
    </Style>

    <Style x:Key="SectionSeperatorStyle"
           TargetType="{x:Type Separator}">
        <Setter Property="Background"
                Value="{StaticResource EditorMainColor}"></Setter>
    </Style>

    <Style TargetType="{x:Type Button}"
           x:Key="ModernUIButtonStyle">
        <Setter Property="Foreground"
                Value="{StaticResource EditorMainColor}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource EditorMainColor}" />
        <Setter Property="Background"
                Value="White" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Padding"
                Value="2" />
        <Setter Property="FontWeight"
                Value="Bold" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background"
                        Value="{StaticResource EditorLightColor}"></Setter>
                <Setter Property="Foreground"
                        Value="White"></Setter>
            </Trigger>
            <Trigger Property="IsPressed"
                     Value="True">
                <Setter Property="Background"
                        Value="{StaticResource EditorMainColor}"></Setter>
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="BorderBrush"
                        Value="Gray"></Setter>
                <Setter Property="Foreground"
                        Value="Gray"></Setter>
                <Setter Property="Background"
                        Value="White"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBlock}"
           x:Key="SectionHeaderStyle">
        <Setter Property="Margin"
                Value="5 5 5 2"></Setter>
        <Setter Property="FontSize"
                Value="10"></Setter>
        <Setter Property="FontFamily"
                Value="Malgun Gothic"></Setter>
        <Setter Property="Foreground"
                Value="#FF065AA0"></Setter>
        <Setter Property="FontWeight"
                Value="Bold"></Setter>
    </Style>

    <Style TargetType="Border"
           x:Key="Rounded">
        <Setter Property="Background"
                Value="White"></Setter>
        <Setter Property="BorderBrush"
                Value="Gray"></Setter>
        <Setter Property="BorderThickness"
                Value="0.5"></Setter>
        <Setter Property="CornerRadius"
                Value="5"></Setter>
        <Setter Property="Padding"
                Value="5"></Setter>
    </Style>

    <Style TargetType="Border"
           x:Key="GrayRounded"
           BasedOn="{StaticResource Rounded}">
        <Setter Property="Background"
                Value="#FFF9F9F9"></Setter>
    </Style>

    <Style TargetType="Border"
           x:Key="Splitter">
        <Setter Property="BorderThickness"
                Value="0 0 0 0.5" />
        <Setter Property="BorderBrush"
                Value="LightGray" />
        <Setter Property="Padding"
                Value="5" />
        <Setter Property="MinHeight"
                Value="40" />
    </Style>

    <Style TargetType="{x:Type Button}"
           x:Key="StandardButtonStyle">
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="OverridesDefaultStyle"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border"
                            Style="{StaticResource Rounded}">
                        <ContentPresenter Margin="2"
                                          VerticalAlignment="Center"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="#202020" />
                        </Trigger>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="#202020" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="#FFEFEFEF" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="#E0E0E0" />
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="#606060" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="#EEEEEE" />
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="#AAAAAA" />
                            <Setter Property="Foreground"
                                    Value="#888888" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type cce:ColorPicker}">
        <Setter Property="Width"
                Value="41" />
        <Setter Property="Height"
                Value="30" />
        <Setter Property="Margin"
                Value="0 0 10 0" />
    </Style>
    <Style TargetType="ctrls:ImageButton">
        <Setter Property="Source"
                Value="/KeyboardEditor;component/Resources/Images/delete.png" />
        <Setter Property="HorizontalAlignment"
                Value="Right" />
        <Setter Property="Width"
                Value="12" />
        <Setter Property="Margin"
                Value="5 0 10 0" />
        <Setter Property="Command"
                Value="{Binding ClearPropertyCmd}" />
    </Style>

    <Style TargetType="{x:Type StackPanel}"
           x:Key="KeyModeDisplayStyle">
        <Setter Property="Control.Margin"
                Value="5"></Setter>
        <Setter Property="Orientation"
                Value="Horizontal"></Setter>
        <Setter Property="DockPanel.Dock"
                Value="Left"></Setter>
        <Setter Property="VerticalAlignment"
                Value="Center"></Setter>
    </Style>

    <Style TargetType="{x:Type view:StdKeyboardView}">
        <Setter Property="Width"
                Value="{Binding W}" />
        <Setter Property="Height"
                Value="{Binding H}" />
        <Setter Property="Keys"
                Value="{Binding Keys}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=BackgroundImagePath, Converter={StaticResource notnull}}"
                         Value="true">
                <Setter Property="BackgroundImagePath"
                        Value="{Binding BackgroundImagePath}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type view:StdKeyView}">
        <Setter Property="KeyPressedCommand"
                Value="{Binding KeyPressedCommand}" />
        <Setter Property="TextDecorations"
                Value="{Binding Path=LayoutKeyModeVM.TextDecorations}" />
        <Setter Property="KeyDownCommand"
                Value="{Binding KeyDownCommand}" />
        <Setter Property="KeyUpCommand"
                Value="{Binding KeyUpCommand}" />
        <Setter Property="FontWeight"
                Value="{Binding Path=LayoutKeyModeVM.FontWeight}" />
        <Setter Property="FontFamily"
                Value="{Binding Path=KeyModeVM.FontFamily}" />
        <Setter Property="DownLabel"
                Value="{Binding Mode=TwoWay, Path=KeyModeVM.DownLabel}" />
        <Setter Property="Description"
                Value="{Binding KeyModeVM.Description}" />
        <Setter Property="FontStyle"
                Value="{Binding LayoutKeyModeVM.FontStyle}" />
        <Setter Property="ShowLabel"
                Value="{Binding Mode=TwoWay, Path=ShowLabel}" />
        <Setter Property="ShowImage"
                Value="{Binding Mode=TwoWay, Path=ShowImage}" />
        <Setter Property="ShowIcon"
                Value="{Binding Mode=TwoWay, Path=ShowIcon}" />
        <Setter Property="Visibility"
                Value="{Binding Mode=TwoWay, Path=LayoutKeyModeVM.Visible}" />
        <Setter Property="FontSize"
                Value="{Binding Path=LayoutKeyModeVM.FontSize}" />
        <Setter Property="UpLabel"
                Value="{Binding Mode=TwoWay, Path=KeyModeVM.UpLabel}" />
        <Setter Property="Opacity"
                Value="{Binding Path=Opacity}" />
        <Setter Property="ZIndex"
                Value="{Binding ZIndex}" />
        <Setter Property="Height"
                Value="{Binding LayoutKeyModeVM.Height, Mode=TwoWay}" />
        <Setter Property="Width"
                Value="{Binding LayoutKeyModeVM.Width, Mode=TwoWay}" />
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Header="Delete" Command="{Binding SupprCommand}"></MenuItem>
                    <MenuItem Header="Rename" Command="{Binding RenameCommand}"></MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Thumb}">
        <Setter Property="Background"
                Value="Black"></Setter>
        <Setter Property="Opacity"
                Value="0.4"></Setter>
        <Setter Property="Width"
                Value="10"></Setter>
        <Setter Property="Height"
                Value="10"></Setter>
    </Style>

    <DataTemplate DataType="{x:Type vm:VMKeyEditable}">
        <Grid>
            <!-- The key -->
            <view:StdKeyView x:Name="key"
                             Margin="5">
                <view:StdKeyView.Background>
                    <SolidColorBrush Color="{Binding Background}" />
                </view:StdKeyView.Background>
                <view:StdKeyView.HoverBackground>
                    <SolidColorBrush Color="{Binding HoverBackground}" />
                </view:StdKeyView.HoverBackground>
                <view:StdKeyView.PressedBackground>
                    <SolidColorBrush Color="{Binding PressedBackground}" />
                </view:StdKeyView.PressedBackground>
                <view:StdKeyView.Foreground>
                    <SolidColorBrush Color="{Binding LetterColor}" />
                </view:StdKeyView.Foreground>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                        <cmd:EventToCommand Command="{Binding MouseLeftButtonDownCommand, Mode=OneWay}"
                                            PassEventArgsToCommand="True" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </view:StdKeyView>
            <!-- Resizing thumbs -->
            <DockPanel LastChildFill="False">
                <Grid DockPanel.Dock="Top">
                    <Thumb Cursor="SizeNWSE"
                           HorizontalAlignment="Left">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="DragDelta">
                                <cmd:EventToCommand Command="{Binding HandleTopLeftCommand, Mode=OneWay}"
                                                    PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Thumb>
                    <Thumb Cursor="SizeNESW"
                           HorizontalAlignment="Right">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="DragDelta">
                                <cmd:EventToCommand Command="{Binding HandleTopRightCommand, Mode=OneWay}"
                                                    PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Thumb>
                </Grid>
                <Grid DockPanel.Dock="Bottom">
                    <Thumb Cursor="SizeNESW"
                           HorizontalAlignment="Left">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="DragDelta">
                                <cmd:EventToCommand Command="{Binding HandleBottomLeftCommand, Mode=OneWay}"
                                                    PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Thumb>
                    <Thumb Cursor="SizeNWSE"
                           HorizontalAlignment="Right">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="DragDelta">
                                <cmd:EventToCommand Command="{Binding HandleBottomRightCommand, Mode=OneWay}"
                                                    PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Thumb>
                </Grid>
                <DockPanel.Style>
                    <Style TargetType="DockPanel">
                        <Setter Property="Visibility"
                                Value="Hidden" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsSelected}"
                                         Value="True">
                                <Setter Property="Visibility"
                                        Value="Visible" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsVisible}"
                                         Value="False">
                                <Setter Property="Visibility"
                                        Value="Hidden" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DockPanel.Style>
            </DockPanel>
        </Grid>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Image, Converter={StaticResource notnull}}"
                               Value="true"></Condition>
                    <Condition Binding="{Binding Path=ShowImage}"
                               Value="true"></Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="key"
                        Property="CustomContent"
                        Value="{Binding Image}" />
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- ExpandCollapseToggleStyle -->
    <Style x:Key="ExpandCollapseToggleStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Width"
                Value="16" />
        <Setter Property="Height"
                Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="16"
                            Height="16"
                            Background="Transparent"
                            Padding="5,5,5,5">
                        <Path x:Name="ExpandPath"
                              Fill="Transparent"
                              Stroke="#FF989898"
                              Data="{StaticResource TreeArrow}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135"
                                                 CenterX="3"
                                                 CenterY="3" />
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Stroke"
                                    TargetName="ExpandPath"
                                    Value="#FF1BBBFA" />
                            <Setter Property="Fill"
                                    TargetName="ExpandPath"
                                    Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                                 Value="True">
                            <Setter Property="RenderTransform"
                                    TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180"
                                                     CenterX="3"
                                                     CenterY="3" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill"
                                    TargetName="ExpandPath"
                                    Value="#FF595959" />
                            <Setter Property="Stroke"
                                    TargetName="ExpandPath"
                                    Value="#FF262626" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Index changing arrows style -->
    <Style x:Key="IndexArrowStyle"
           TargetType="Button"
           BasedOn="{StaticResource ModernUIButtonStyle}">
        <Setter Property="Margin"
                Value="0" />
        <Setter Property="Height"
                Value="18" />
        <Setter Property="Width"
                Value="18" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Background"
                Value="Transparent" />
    </Style>

    <DataTemplate x:Key="treeviewcontentnormaltemplate">
        <TextBlock Text="{Binding Name}" />
    </DataTemplate>
    <DataTemplate x:Key="treeviewcontenteditabletemplate">
        <TextBox Text="{Binding Name}" />
    </DataTemplate>

    

    <ControlTemplate TargetType="{x:Type vm:ActionControl}"
                     x:Key="SimpleActionControlTemplate">
        <DockPanel LastChildFill="True"
                   Margin="2">
            <Button x:Name="button"
                    ToolTip="{TemplateBinding Text}"
                    Height="24"
                    Width="24"
                    DockPanel.Dock="Right"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    Command="{TemplateBinding Action}">
                <Image Source="{TemplateBinding ImageSource, Converter={StaticResource imageconverter}}"
                       Stretch="Fill" />
            </Button>
            <TextBlock DockPanel.Dock="Left"
                       HorizontalAlignment="Left"
                       VerticalAlignment="Center"
                       Text="{TemplateBinding Text}"
                       TextWrapping="Wrap" />
        </DockPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActionParameter, Converter={StaticResource stringnulltobool}}"
                         Value="True">
                <Setter TargetName="button"
                        Property="CommandParameter"
                        Value="{x:Null}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>
