<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CK.Plugin.Model</name>
    </assembly>
    <members>
        <member name="T:CK.Plugin.ServiceStatusChangedEventArgs">
            <summary>
            Event argument when a service <see cref="T:CK.Plugin.RunningStatus">status</see> changed.
            This event is available on the generic <see cref="T:CK.Plugin.IService`1"/>.<see cref="E:CK.Plugin.IService`1.ServiceStatusChanged">ServiceStatusChanged</see>.
            </summary>
        </member>
        <member name="M:CK.Plugin.ServiceStatusChangedEventArgs.#ctor(CK.Plugin.RunningStatus,CK.Plugin.RunningStatus,System.Boolean)">
            <summary>
            Initializes a new instance of a <see cref="T:CK.Plugin.ServiceStatusChangedEventArgs"/>.
            </summary>
            <param name="previous">The previous running status.</param>
            <param name="current">The current running Status</param>
            <param name="allowErrorTransition">True if the next status is a valid next one (like <see cref="F:CK.Plugin.RunningStatus.Starting"/> to <see cref="F:CK.Plugin.RunningStatus.Started"/>). False otherwise.</param>
        </member>
        <member name="P:CK.Plugin.ServiceStatusChangedEventArgs.Previous">
            <summary>
            Gets the previous status.
            </summary>
        </member>
        <member name="P:CK.Plugin.ServiceStatusChangedEventArgs.Current">
            <summary>
            Gets the current status of the service.
            </summary>
        </member>
        <member name="T:CK.Plugin.ILogExternalEntry">
            <summary>
            Log event externally generated (through <see cref="M:CK.Plugin.ILogCenter.ExternalLog(System.String,System.Object)"/>).
            </summary>
        </member>
        <member name="T:CK.Plugin.ILogEntry">
            <summary>
            Common interface for log entries.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogEntry.EntryType">
            <summary>
            Gets the actual type of this entry.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogEntry.CreationTimeUtc">
            <summary>
            Gets the creation time.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogEntry.LSN">
            <summary>
            Log Serial Number.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogEntry.Depth">
            <summary>
            Depth on the call stack.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogExternalEntry.Message">
            <summary>
            Gets the message associated to the event.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogExternalEntry.ExtraData">
            <summary>
            Gets an optional extra data associated to the event.
            </summary>
        </member>
        <member name="T:CK.Plugin.ILogCenter">
            <summary>
            Centralized management of log events.
            Even if these events are designed for <see cref="T:CK.Plugin.IServiceHost"/> behavior, 
            the <see cref="M:CK.Plugin.ILogCenter.ExternalLog(System.String,System.Object)"/> and <see cref="M:CK.Plugin.ILogCenter.ExternalLogError(System.Exception,System.Reflection.MemberInfo,System.String,System.Object)"/> methods 
            enable injection of external events into the pipe. 
            </summary>
        </member>
        <member name="M:CK.Plugin.ILogCenter.ExternalLog(System.String,System.Object)">
            <summary>
            Generates a <see cref="T:CK.Plugin.ILogExternalEntry"/> event log.
            </summary>
            <param name="message">Event message. Should be localized if possible.</param>
            <param name="extraData">Optional extra data associated to the event.</param>
        </member>
        <member name="M:CK.Plugin.ILogCenter.ExternalLogError(System.Exception,System.Reflection.MemberInfo,System.String,System.Object)">
            <summary>
            Generates a <see cref="T:CK.Plugin.ILogExternalErrorEntry"/> event log.
            </summary>
            <param name="e">The <see cref="T:System.Exception"/>. When null, a warning is added to the message.</param>
            <param name="optionalExplicitCulprit">
            Optional <see cref="T:System.Reflection.MemberInfo"/> that designates a culprit. 
            Nullable: when not specified, the <see cref="P:System.Exception.TargetSite"/> is used.
            </param>
            <param name="message">Optional event message (localized if possible). Nullable.</param>
            <param name="extraData">Optional extra data associated to the event. Nullable.</param>
        </member>
        <member name="E:CK.Plugin.ILogCenter.EventCreating">
            <summary>
            Fires when a <see cref="T:CK.Plugin.LogHostEventArgs"/> is beeing created.
            This event is "opened": it will be closed when the <see cref="E:CK.Plugin.ILogCenter.EventCreated"/> fires.
            </summary>
        </member>
        <member name="E:CK.Plugin.ILogCenter.EventCreated">
            <summary>
            Fires for each <see cref="T:CK.Plugin.LogHostEventArgs"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogCenter.UntrackedErrors">
            <summary>
            Gets the list of errors that occured while there was no launched plugins to process them.
            </summary>
        </member>
        <member name="T:CK.Plugin.ISimplePropertyInfo">
            <summary>
             Basic Info describing a property
            </summary>
        </member>
        <member name="T:CK.Plugin.PluginRequirementCollectionChangedEventArgs">
            <summary>
            Describes a change that occured in a <see cref="T:CK.Plugin.IPluginRequirementCollection"/>.
            </summary>
        </member>
        <member name="M:CK.Plugin.PluginRequirementCollectionChangedEventArgs.#ctor(CK.Plugin.IPluginRequirementCollection,CK.Core.ChangeStatus,System.Guid,CK.Plugin.RunningRequirement)">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.PluginRequirementCollectionChangedEventArgs"/>.
            </summary>
            <param name="c">The collection that is changing.</param>
            <param name="action">The <see cref="T:CK.Core.ChangeStatus"/>.</param>
            <param name="pluginId">The plugin identifier concerned.</param>
            <param name="requirement">The <see cref="T:CK.Plugin.RunningRequirement"/> of the changing <paramref name="pluginId"/>.</param>
        </member>
        <member name="P:CK.Plugin.PluginRequirementCollectionChangedEventArgs.Action">
            <summary>
            The <see cref="T:CK.Core.ChangeStatus"/> that synthetizes the change.
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginRequirementCollectionChangedEventArgs.Collection">
            <summary>
            The source <see cref="T:CK.Plugin.IPluginRequirementCollection"/> that changed.
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginRequirementCollectionChangedEventArgs.PluginId">
            <summary>
            The plugin identifier for which a change occured. 
            It is <see cref="F:System.Guid.Empty"/> if the change is a global change (<see cref="M:CK.Plugin.IPluginRequirementCollection.Clear"/> has been called for instance).
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginRequirementCollectionChangedEventArgs.Requirement">
            <summary>
            The <see cref="T:CK.Plugin.RunningRequirement"/> that changed.
            It is <see cref="F:CK.Plugin.RunningRequirement.Optional"/> if the change is a global change (<see cref="M:CK.Plugin.IPluginRequirementCollection.Clear"/> has been called for instance).
            </summary>
        </member>
        <member name="T:CK.Plugin.ILogMethodEntry">
            <summary>
            Log event related to a method call.
            </summary>
        </member>
        <member name="T:CK.Plugin.ILogInterceptionEntry">
            <summary>
            Common interface for log entries that corresponds to an interception: events are bound to a <see cref="P:CK.Plugin.ILogInterceptionEntry.Member"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogInterceptionEntry.Member">
            <summary>
            Member concerned by the log.
            </summary>
        </member>
        <member name="T:CK.Plugin.ILogWithParametersEntry">
            <summary>
            Common interface for log events that carries <see cref="P:CK.Plugin.ILogWithParametersEntry.Parameters"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogWithParametersEntry.Parameters">
            <summary>
            Actual parameter values of the event. 
            Can be null if log configuration did not require parameters to be logged.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogMethodEntry.Method">
            <summary>
            Gets the service logged method.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogMethodEntry.Caller">
            <summary>
            Gets the caller of the method if it has been captured.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogMethodEntry.ReturnValue">
            <summary>
            Gets the returned value if it has been captured.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogMethodEntry.Error">
            <summary>
            Gets the error entry if an error occured.
            </summary>
        </member>
        <member name="M:CK.Plugin.DiscovererExtension.GetSimpleSignature(CK.Plugin.ISimpleMethodInfo)">
            <summary>
            Gets the method's signature.
            </summary>
            <param name="m">This <see cref="T:CK.Plugin.ISimpleMethodInfo"/>.</param>
            <returns>The signature (return type, name and parameter types, types are ).</returns>
        </member>
        <member name="M:CK.Plugin.DiscovererExtension.AppendSimpleSignature(CK.Plugin.ISimpleMethodInfo,System.Text.StringBuilder)">
            <summary>
            Writes the method's signature into a <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="m">This <see cref="T:CK.Plugin.ISimpleMethodInfo"/>.</param>
            <returns>The string builder (to allow fluent syntax).</returns>
        </member>
        <member name="P:CK.Plugin.IDiscoveredInfo.HasError">
            <summary>
            Return if an error occured during the discover.
            </summary>
        </member>
        <member name="P:CK.Plugin.IDiscoveredInfo.ErrorMessage">
            <summary>
            Gets the message of an error that happened during the discover.
            </summary>
        </member>
        <member name="P:CK.Plugin.IAssemblyInfo.AssemblyFileName">
            <summary>
            Gets the file name of the assembly.
            </summary>
        </member>
        <member name="P:CK.Plugin.IAssemblyInfo.AssemblyFileSize">
            <summary>
            Gets the size of the assembly file.
            </summary>
        </member>
        <member name="P:CK.Plugin.IAssemblyInfo.AssemblyName">
            <summary>
            Gets the <see cref="P:CK.Plugin.IAssemblyInfo.AssemblyName"/> of the assembly.
            </summary>
        </member>
        <member name="P:CK.Plugin.IAssemblyInfo.HasPluginsOrServices">
            <summary>
            Gets that the assembly contains plugins or services.
            </summary>
        </member>
        <member name="P:CK.Plugin.IAssemblyInfo.Plugins">
            <summary>
            Gets the collections of plugins contained into the assembly.
            </summary>
        </member>
        <member name="P:CK.Plugin.IAssemblyInfo.Services">
            <summary>
            Gets the collections of services contained into the assembly.
            </summary>
        </member>
        <member name="T:CK.Plugin.IServiceRequirementCollection">
            <summary>
            Service requirements associates services identifier (the assemnly qualified name 
            of the <see cref="T:CK.Plugin.IDynamicService"/> type) to <see cref="T:CK.Plugin.RunningRequirement"/>.
            </summary>
        </member>
        <member name="M:CK.Plugin.IServiceRequirementCollection.AddOrSet(System.String,CK.Plugin.RunningRequirement)">
            <summary>
            Add or set the given requirement to the given service (by its fullname).
            </summary>
            <param name="serviceAssemblyQualifiedName">AssemblyQualifiedName of the service to add or update.</param>
            <param name="requirement">Requirement to add or set.</param>
            <returns>New or updated requirement. May be unchanged if <see cref="E:CK.Plugin.IServiceRequirementCollection.Changing"/> canceled the action.</returns>
        </member>
        <member name="M:CK.Plugin.IServiceRequirementCollection.Find(System.String)">
            <summary>
            Gets the <see cref="T:CK.Plugin.ServiceRequirement"/> for the given service (by its fullname).
            </summary>
            <param name="serviceAssemblyQualifiedName">AssemblyQualifiedName of the service to find.</param>
            <returns>Found requirement (if any, null otherwise).</returns>
        </member>
        <member name="M:CK.Plugin.IServiceRequirementCollection.Remove(System.String)">
            <summary>
            Removes the given service requirement.
            When no explicit requirement exists, <see cref="F:CK.Plugin.RunningRequirement.Optional"/> is the default.
            </summary>
            <param name="serviceAssemblyQualifiedName">AssemblyQualifiedName of the service requirement to remove.</param>
            <returns>True if the element does not exist or has been successfully removed. False if <see cref="E:CK.Plugin.IServiceRequirementCollection.Changing"/> canceled the action.</returns>
        </member>
        <member name="M:CK.Plugin.IServiceRequirementCollection.Clear">
            <summary>
            Clears all requirements.
            </summary>
        </member>
        <member name="E:CK.Plugin.IServiceRequirementCollection.Changing">
            <summary>
            Fires before a change occurs.
            </summary>
        </member>
        <member name="E:CK.Plugin.IServiceRequirementCollection.Changed">
            <summary>
            Fires when a requirement is updated.
            </summary>
        </member>
        <member name="T:CK.Plugin.ServiceNotAvailableException">
            <summary>
            Exception raised whenever an event is raised by or a method is called on a non running service. 
            </summary>
        </member>
        <member name="M:CK.Plugin.ServiceNotAvailableException.#ctor(System.Type)">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.ServiceNotAvailableException"/>.
            </summary>
            <param name="serviceType">Type of the concerned service.</param>
        </member>
        <member name="M:CK.Plugin.ServiceNotAvailableException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.ServiceNotAvailableException"/>.
            </summary>
            <param name="serviceType">Type of the concerned service.</param>
            <param name="message">Detailed message.</param>
        </member>
        <member name="M:CK.Plugin.ServiceNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.ServiceNotAvailableException"/> (serialization).
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="P:CK.Plugin.ServiceNotAvailableException.ServiceTypeName">
            <summary>
            Gets the service type name.
            </summary>
        </member>
        <member name="T:CK.Plugin.ServiceRequirement">
            <summary>
            Represents the state that a <see cref="T:CK.Plugin.RequirementLayer"/> (Context, Keboard, Layout) requires for a specific service.
            </summary>
        </member>
        <member name="P:CK.Plugin.ServiceRequirement.AssemblyQualifiedName">
            <summary>
            Full name of the required service.
            </summary>
        </member>
        <member name="P:CK.Plugin.ServiceRequirement.Requirement">
            <summary>
            Gets the <see cref="T:CK.Plugin.RunningRequirement"/> corresponding to this ServiceRequirement instance.
            </summary>
        </member>
        <member name="T:CK.Plugin.RequirementLayer">
            <summary>
            Combines a <see cref="P:CK.Plugin.RequirementLayer.PluginRequirements"/> and a <see cref="P:CK.Plugin.RequirementLayer.ServiceRequirements"/>.
            </summary>
        </member>
        <member name="M:CK.Plugin.RequirementLayer.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.RequirementLayer"/>.
            </summary>
            <param name="layerName">Optional name for the requirements.</param>
        </member>
        <member name="M:CK.Plugin.RequirementLayer.ReadInlineFromXml(System.Xml.XmlReader,CK.Plugin.RequirementLayer@)">
            <summary>
            Reads back an existing <see cref="T:CK.Plugin.RequirementLayer"/> or creates a new one 
            from xml data previously written by <see cref="M:CK.Plugin.RequirementLayer.WriteInlineToXml(System.Xml.XmlWriter,CK.Plugin.RequirementLayer)"/> method.
            </summary>
            <param name="r">The xml stream to read: the reader must be on an opened element.</param>
            <param name="reqLayer">An existing layer or null to create a new one.</param>
        </member>
        <member name="M:CK.Plugin.RequirementLayer.WriteInlineToXml(System.Xml.XmlWriter,CK.Plugin.RequirementLayer)">
            <summary>
            Writes a <see cref="T:CK.Plugin.RequirementLayer"/> as xml.
            </summary>
            <param name="w">The xml stream to write to: an element must be opened.</param>
            <param name="o">The object to write. Can not be null.</param>
        </member>
        <member name="P:CK.Plugin.RequirementLayer.LayerName">
            <summary>
            Name of these requirements. This is an optional name that identifies this layer.
            It is not intended to be used as a unique key.
            </summary>
        </member>
        <member name="P:CK.Plugin.RequirementLayer.PluginRequirements">
            <summary>
            Gets a <see cref="T:CK.Plugin.PluginRequirementCollection"/> that describes plugins requirements.
            </summary>
        </member>
        <member name="P:CK.Plugin.RequirementLayer.ServiceRequirements">
            <summary>
            Gets a <see cref="T:CK.Plugin.ServiceRequirementCollection"/> that decribes service requirements.
            </summary>
        </member>
        <member name="T:CK.Plugin.ServiceRequirementCollectionChangingEventArgs">
            <summary>
            Describes a change that is about to occur in a <see cref="T:CK.Plugin.IServiceRequirementCollection"/> and can be <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>ed.
            </summary>
        </member>
        <member name="M:CK.Plugin.ServiceRequirementCollectionChangingEventArgs.#ctor(CK.Plugin.IServiceRequirementCollection,CK.Core.ChangeStatus,System.String,CK.Plugin.RunningRequirement)">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.ServiceRequirementCollectionChangingEventArgs"/>.
            </summary>
            <param name="c">The collection that is changing.</param>
            <param name="action">The <see cref="T:CK.Core.ChangeStatus"/>.</param>
            <param name="assemblyQualifiedName">The service identifier concerned.</param>
            <param name="requirement">The <see cref="T:CK.Plugin.RunningRequirement"/> of the changing service.</param>
        </member>
        <member name="P:CK.Plugin.ServiceRequirementCollectionChangingEventArgs.Action">
            <summary>
            The <see cref="T:CK.Core.ChangeStatus"/> that synthetizes the change.
            </summary>
        </member>
        <member name="P:CK.Plugin.ServiceRequirementCollectionChangingEventArgs.Collection">
            <summary>
            The source <see cref="T:CK.Plugin.IServiceRequirementCollection"/> that is changing.
            </summary>
        </member>
        <member name="P:CK.Plugin.ServiceRequirementCollectionChangingEventArgs.AssemblyQualifiedName">
            <summary>
            The service identifier for which a change is occurring. 
            It is null if the change is a global change (<see cref="M:CK.Plugin.IServiceRequirementCollection.Clear"/> is beeing called for instance).
            </summary>
        </member>
        <member name="P:CK.Plugin.ServiceRequirementCollectionChangingEventArgs.Requirement">
            <summary>
            The <see cref="T:CK.Plugin.RunningRequirement"/> that is changing.
            It is <see cref="F:CK.Plugin.RunningRequirement.Optional"/> if the change is a global change (<see cref="M:CK.Plugin.IPluginRequirementCollection.Clear"/> is beeing called for instance).
            </summary>
        </member>
        <member name="T:CK.Plugin.LogEntryType">
            <summary>
            Qualifies the actual type of <see cref="T:CK.Plugin.ILogInterceptionEntry"/>.
            </summary>
        </member>
        <member name="F:CK.Plugin.LogEntryType.Event">
            <summary>
            The log entry is a <see cref="T:CK.Plugin.ILogEventEntry"/>.
            </summary>
        </member>
        <member name="F:CK.Plugin.LogEntryType.EventError">
            <summary>
            The log entry is a <see cref="T:CK.Plugin.ILogEventError"/>.
            </summary>
        </member>
        <member name="F:CK.Plugin.LogEntryType.EventNotRunningError">
            <summary>
            The log entry is a <see cref="T:CK.Plugin.ILogEventNotRunningError"/>.
            </summary>
        </member>
        <member name="F:CK.Plugin.LogEntryType.Method">
            <summary>
            The log entry is a <see cref="T:CK.Plugin.ILogMethodEntry"/>.
            </summary>
        </member>
        <member name="F:CK.Plugin.LogEntryType.MethodError">
            <summary>
            The log entry is a <see cref="T:CK.Plugin.ILogMethodError"/>.
            </summary>
        </member>
        <member name="F:CK.Plugin.LogEntryType.External">
            <summary>
            The log entry is a <see cref="!:ILogExternal"/>.
            </summary>
        </member>
        <member name="F:CK.Plugin.LogEntryType.ExternalError">
            <summary>
            The log entry is a <see cref="!:ILogExternalError"/>.
            </summary>
        </member>
        <member name="T:CK.Plugin.SolvedConfigStatus">
            <summary>
            Represents a final configuration status that applies to a plugin or a service.
            Adds the Disabled notion to the <see cref="!:RunningRequirements"/> enumeration.
            </summary>
        </member>
        <member name="F:CK.Plugin.SolvedConfigStatus.Optional">
            <summary>
            Plugin is optional.
            </summary>
        </member>
        <member name="F:CK.Plugin.SolvedConfigStatus.OptionalTryStart">
            <summary>
            Plugin is optional, but if it exists it should be started.
            </summary>
        </member>
        <member name="F:CK.Plugin.SolvedConfigStatus.MustExist">
            <summary>
            Plugin must exist.
            </summary>
        </member>
        <member name="F:CK.Plugin.SolvedConfigStatus.MustExistTryStart">
            <summary>
            Plugin must exist and we should try to start it.
            </summary>
        </member>
        <member name="F:CK.Plugin.SolvedConfigStatus.MustExistAndRun">
            <summary>
            Plugin must exist and must be started.
            </summary>
        </member>
        <member name="F:CK.Plugin.SolvedConfigStatus.Disabled">
            <summary>
            Plugin is disabled.
            </summary>
        </member>
        <member name="T:CK.Plugin.IPluginRequirementCollection">
            <summary>
            Plugin requirements associates plugin <see cref="T:System.Guid"/> to <see cref="T:CK.Plugin.RunningRequirement"/>.
            </summary>
        </member>
        <member name="M:CK.Plugin.IPluginRequirementCollection.AddOrSet(System.Guid,CK.Plugin.RunningRequirement)">
            <summary>
            Add or set the given requirement to the given plugin (by its UniqueID).
            </summary>
            <param name="pluginId">Identifier of the plugin to configure.</param>
            <param name="requirement">Requirement to add or set.</param>
            <returns>New or updated requirement. May be unchanged if <see cref="E:CK.Plugin.IPluginRequirementCollection.Changing"/> canceled the action.</returns>
        </member>
        <member name="M:CK.Plugin.IPluginRequirementCollection.Find(System.Guid)">
            <summary>
            Gets the <see cref="T:CK.Plugin.PluginRequirement"/> for the given plugin (by its unique identifier).
            </summary>
            <param name="pluginId">Unique identifier of the plugin to find.</param>
            <returns>Found requirement (if any, null otherwise).</returns>
        </member>
        <member name="M:CK.Plugin.IPluginRequirementCollection.Remove(System.Guid)">
            <summary>
            Removes the given requirement.
            When no explicit requirement exists, <see cref="F:CK.Plugin.RunningRequirement.Optional"/> is the default.
            </summary>
            <param name="pluginId">Unique identifier of the plugin to remove.</param>
            <returns>True if the element does not exist or has been successfully removed. False if <see cref="E:CK.Plugin.IPluginRequirementCollection.Changing"/> canceled the action.</returns>
        </member>
        <member name="M:CK.Plugin.IPluginRequirementCollection.Clear">
            <summary>
            Clears all requirements.
            </summary>
        </member>
        <member name="E:CK.Plugin.IPluginRequirementCollection.Changing">
            <summary>
            Fires before a change occurs.
            </summary>
        </member>
        <member name="E:CK.Plugin.IPluginRequirementCollection.Changed">
            <summary>
            Fires when a change occured.
            </summary>
        </member>
        <member name="T:CK.Plugin.PluginRequirement">
            <summary>
            Represents the state that a <see cref="T:CK.Plugin.RequirementLayer"/> (Context, Keboard, Layout) requires for a specific plugin 
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginRequirement.PluginId">
            <summary>
            Unique identifier of the plugin.
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginRequirement.Requirement">
            <summary>
            Gets the <see cref="T:CK.Plugin.RunningRequirement"/> corresponding to this PluginRequirement instance.
            </summary>
        </member>
        <member name="T:CK.Plugin.IPluginHost">
            <summary>
            Host for <see cref="T:CK.Plugin.IPlugin"/> management.
            </summary>
        </member>
        <member name="M:CK.Plugin.IPluginHost.IsPluginRunning(CK.Plugin.IPluginInfo)">
            <summary>
            Checks whether a plugin is running or not.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CK.Plugin.IPluginHost.FindLoadedPlugin(System.Guid,System.Boolean)">
            <summary>
            Gets the <see cref="T:CK.Plugin.IPluginProxy"/> for the plugin identifier. 
            It may find plugins that are currently disabled but have been loaded at least once.
            </summary>
            <param name="pluginId">Plugin identifier.</param>
            <param name="checkCurrentlyLoading">True to take into account plugins beeing loaded during an <see cref="!:Execute"/> phasis.</param>
            <returns>Null if not found.</returns>
        </member>
        <member name="P:CK.Plugin.IPluginHost.LoadedPlugins">
            <summary>
            Gets the loaded plugins. This contains also the plugins that are currently disabled but have been loaded at least once.
            </summary>
        </member>
        <member name="E:CK.Plugin.IPluginHost.StatusChanged">
            <summary>
            Fires whenever a plugin status changed.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginInfo.PluginId">
            <summary>
            Gets the unique identifier of the plugin. This is an alias to <see cref="P:CK.Core.IUniqueId.UniqueId"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginInfo.Description">
            <summary>
            Gets the public description of the plugin.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginInfo.IsOldVersion">
            <summary>
            Gets if a better version of this plugin exists in the system.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginInfo.RefUrl">
            <summary>
            Gets an optional url that describes the plugin.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginInfo.Categories">
            <summary>
            Gets an optional list of categories used to sort plugins by theme. 
            Never null.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginInfo.IconUri">
            <summary>
            Gets an optional icon bounds to this plugin.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginInfo.PluginFullName">
            <summary>
            Gets the full name of the plugin (namespace and class name).
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginInfo.EditorsInfo">
            <summary>
            Gets a <see cref="!:IReadOnlyList"/> of <see cref="!:IPluginEditorInfo"/> that the plugin owns.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginInfo.EditableBy">
            <summary>
            Gets <see cref="!:IPluginEditorInfo">editors</see> that can
            edit the configuration of this plugin.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginInfo.AssemblyInfo">
            <summary>
            Gets the assembly info that contains this plugin.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginInfo.ServiceReferences">
            <summary>
            Gets the services that this plugin references.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginInfo.Service">
            <summary>
            Gets the service that this plugin implements. Null if the plugin does not implement any service.
            </summary>
        </member>
        <member name="T:CK.Plugin.IgnoreExceptionAttribute">
            <summary>
            Removes the catching of exceptions from methods (or events).
            This should not be used in production code: overhead of catching errors is very low and should be kept.
            </summary>
        </member>
        <member name="M:CK.Plugin.IgnoreExceptionAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.IgnoreExceptionAttribute"/>.
            </summary>
        </member>
        <member name="T:CK.Plugin.IDynamicService">
            <summary>
            This is a marker interface that plugin interfaces must extend to offer dynamic services and be accessible to other
            plugins.
            </summary>
        </member>
        <member name="T:CK.Plugin.ISimpleMethodInfo">
            <summary>
             Basic Info describing a method
            </summary>
        </member>
        <member name="T:CK.Plugin.IServiceReferenceInfo">
            <summary>
            Defines the relation that a plugin declares regarding services.
            </summary>
        </member>
        <member name="P:CK.Plugin.IServiceReferenceInfo.Owner">
            <summary>
            Gets the <see cref="T:CK.Plugin.IPluginInfo"/> that defines this reference.
            </summary>
        </member>
        <member name="P:CK.Plugin.IServiceReferenceInfo.PropertyName">
            <summary>
            Gets the name of the property that references the service.
            </summary>
        </member>
        <member name="P:CK.Plugin.IServiceReferenceInfo.Reference">
            <summary>
            Gets a reference to the actual service.
            </summary>
        </member>
        <member name="P:CK.Plugin.IServiceReferenceInfo.Requirements">
            <summary>
            Gets the requirements for the referenced service.
            </summary>
        </member>
        <member name="T:CK.Plugin.PluginAttribute">
            <summary>
            Tags class that must implement <see cref="T:CK.Plugin.IPlugin"/> and may implement one <see cref="T:CK.Plugin.IDynamicService"/>.
            The only required property is the <see cref="P:CK.Plugin.PluginAttribute.Id"/>.
            </summary>
        </member>
        <member name="M:CK.Plugin.PluginAttribute.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.PluginAttribute"/> with its <see cref="P:CK.Plugin.PluginAttribute.Id"/>.
            </summary>
            <param name="pluginIdentifier">Identifier of the plugin.</param>
        </member>
        <member name="P:CK.Plugin.PluginAttribute.Id">
            <summary>
            Gets the unique identifier of the plugin.
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginAttribute.PublicName">
            <summary>
            Gets or sets the public name of the plugin. Can be any string in any culture.
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginAttribute.Description">
            <summary>
            Gets or sets the description of the plugin.
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginAttribute.Version">
            <summary>
            Gets or sets the <see cref="T:System.Version"/> of the plugin. It is a string
            with at least the first two of the "Major.Minor.Build.Revision" standard version.
            Defaults to <see cref="F:CK.Core.Util.EmptyVersion"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginAttribute.RefUrl">
            <summary>
            Gets or sets an optional url that describes the plugin. Can be null.
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginAttribute.IconUri">
            <summary>
            Gets or sets an optional url where we can find an Icon attached to the plugin. Can be null.
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginAttribute.Categories">
            <summary>
            Gets or sets an optional list of categories, used to sort the plugin list by theme.
            Can also be used to define if this plugin must appear in the "Public" or "Advanced" configuration panel.
            Will never be null (an empty array will be returned instead of null).
            </summary>
        </member>
        <member name="T:CK.Plugin.RunningStatus">
            <summary>
            Defines a runtime status for a plugin (or a service). To ease programmation, this object 
            fully encapsulates the 5 different possible status available in the static
            fields <see cref="F:CK.Plugin.RunningStatus.Disabled"/>, <see cref="F:CK.Plugin.RunningStatus.Stopped"/>, <see cref="F:CK.Plugin.RunningStatus.Stopping"/>, <see cref="F:CK.Plugin.RunningStatus.Starting"/>, <see cref="F:CK.Plugin.RunningStatus.Started"/>.
            </summary>
        </member>
        <member name="F:CK.Plugin.RunningStatus.Disabled">
            <summary>
            Service or plugin is disabled. For service, it may be disabled, or there is no
            available plugin that offers this service.
            </summary>
        </member>
        <member name="F:CK.Plugin.RunningStatus.Stopped">
            <summary>
            Service or plugin is stopped.
            </summary>
        </member>
        <member name="F:CK.Plugin.RunningStatus.Stopping">
            <summary>
            Service or plugin is is currently stopping.
            </summary>
        </member>
        <member name="F:CK.Plugin.RunningStatus.Starting">
            <summary>
            Service or plugin is currently starting.
            </summary>
        </member>
        <member name="F:CK.Plugin.RunningStatus.Started">
            <summary>
            Service or plugin is running.
            </summary>
        </member>
        <member name="M:CK.Plugin.RunningStatus.IsValidTransition(CK.Plugin.RunningStatus,System.Boolean)">
            <summary>
            True if the next status represents a valid transition from this status.
            </summary>
            <param name="next">Possible next status.</param>
            <param name="allowErrorTransition">True to authorize transitions due to error.</param>
            <returns>True if the next status is a valid next one (like <see cref="F:CK.Plugin.RunningStatus.Starting"/> to <see cref="F:CK.Plugin.RunningStatus.Started"/>). False otherwise.</returns>
        </member>
        <member name="M:CK.Plugin.RunningStatus.op_LessThan(CK.Plugin.RunningStatus,CK.Plugin.RunningStatus)">
            <summary>
            Compares the two <see cref="T:CK.Plugin.RunningStatus"/>.
            The order is defined as: <see cref="F:CK.Plugin.RunningStatus.Disabled"/> -&gt; <see cref="F:CK.Plugin.RunningStatus.Stopped"/> -&gt; <see cref="P:CK.Plugin.RunningStatus.IsStartingOrStopping"/> -&gt; <see cref="F:CK.Plugin.RunningStatus.Started"/>.
            The <see cref="F:CK.Plugin.RunningStatus.Starting"/> and <see cref="F:CK.Plugin.RunningStatus.Stopping"/> status are not ordered (they are different but not lesser nor greater than the other one):
            this comparison operator will always return false when comparing these two transition status.
            </summary>
            <param name="x">The first status to compare.</param>
            <param name="y">The second status to compare.</param>
            <returns>True if x is lesser than y (in the sense described in summary).</returns>
        </member>
        <member name="M:CK.Plugin.RunningStatus.op_GreaterThan(CK.Plugin.RunningStatus,CK.Plugin.RunningStatus)">
            <summary>
            See <see cref="M:CK.Plugin.RunningStatus.op_LessThan(CK.Plugin.RunningStatus,CK.Plugin.RunningStatus)"/> for description of the ordering.
            </summary>
            <param name="x">The first status to compare.</param>
            <param name="y">The second status to compare.</param>
            <returns>True if x is greater than y.</returns>
        </member>
        <member name="M:CK.Plugin.RunningStatus.op_GreaterThanOrEqual(CK.Plugin.RunningStatus,CK.Plugin.RunningStatus)">
            <summary>
            See <see cref="M:CK.Plugin.RunningStatus.op_LessThan(CK.Plugin.RunningStatus,CK.Plugin.RunningStatus)"/> for description of the ordering.
            </summary>
            <param name="x">The first status to compare.</param>
            <param name="y">The second status to compare.</param>
            <returns>True if x is greater or equal to y.</returns>
        </member>
        <member name="M:CK.Plugin.RunningStatus.op_LessThanOrEqual(CK.Plugin.RunningStatus,CK.Plugin.RunningStatus)">
            <summary>
            See <see cref="M:CK.Plugin.RunningStatus.op_LessThan(CK.Plugin.RunningStatus,CK.Plugin.RunningStatus)"/> for description of the ordering.
            </summary>
            <param name="x">The first status to compare.</param>
            <param name="y">The second status to compare.</param>
            <returns>True if x is lesser or equal to y.</returns>
        </member>
        <member name="M:CK.Plugin.RunningStatus.ToString">
            <summary>
            Overriden to return the status name.
            </summary>
            <returns>Name of the status ("Disabled", "Stopped", "Stopping", etc.).</returns>
        </member>
        <member name="P:CK.Plugin.RunningStatus.IsRunnable">
            <summary>
            True if the service or plugin is runnable: a runnable plugin is NOT disabled.
            </summary>
        </member>
        <member name="P:CK.Plugin.RunningStatus.IsStoppedOrDisabled">
            <summary>
            True if the service or plugin is stopped or disabled.
            </summary>
        </member>
        <member name="P:CK.Plugin.RunningStatus.IsStoppingOrStopped">
            <summary>
            True if the service or plugin is stopped or stopping.
            </summary>
        </member>
        <member name="P:CK.Plugin.RunningStatus.IsStartingOrStarted">
            <summary>
            True if the service or plugin is started or starting.
            </summary>
        </member>
        <member name="P:CK.Plugin.RunningStatus.IsStartingOrStopping">
            <summary>
            True if the service or plugin is starting or stopping.
            </summary>
        </member>
        <member name="T:CK.Plugin.IgnoreServiceStoppedAttribute">
            <summary>
            Enables methods (or events) to be called (and fire) even when the service is stopped.
            This is a dangerous attribute that must be reserved for special uses.
            </summary>
        </member>
        <member name="M:CK.Plugin.IgnoreServiceStoppedAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.IgnoreServiceStoppedAttribute"/>.
            </summary>
        </member>
        <member name="T:CK.Plugin.ServiceLogMethodOptions">
            <summary>
            Bit flags that describes the way a method is intercepted.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogMethodOptions.None">
            <summary>
            "Naked mode". Nothing is logged (even exceptions). 
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogMethodOptions.LogError">
            <summary>
            Log the exception that the method may throw.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogMethodOptions.Enter">
            <summary>
            Log the beginning of the call to the method.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogMethodOptions.LogParameters">
            <summary>
            Log the parameters of the call.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogMethodOptions.LogCaller">
            <summary>
            Log the caller method.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogMethodOptions.Leave">
            <summary>
            Log the end of the call to the method.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogMethodOptions.LogReturnValue">
            <summary>
            Log the return value of the method.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogMethodOptions.CreateEntryMask">
            <summary>
            Log when the method is called. (Info type)
            </summary>
        </member>
        <member name="T:CK.Plugin.IServiceHost">
            <summary>
            Defines the host for services.
            </summary>
        </member>
        <member name="M:CK.Plugin.IServiceHost.Add(CK.Plugin.IServiceHostConfiguration)">
            <summary>
            Adds a configuration layer.
            The <see cref="M:CK.Plugin.IServiceHost.ApplyConfiguration"/> must be called to actually update the 
            internal configuration.
            </summary>
        </member>
        <member name="M:CK.Plugin.IServiceHost.Remove(CK.Plugin.IServiceHostConfiguration)">
            <summary>
            Removes a configuration layer.
            The <see cref="M:CK.Plugin.IServiceHost.ApplyConfiguration"/> must be called to actually update the 
            internal configuration.
            </summary>
        </member>
        <member name="M:CK.Plugin.IServiceHost.ApplyConfiguration">
            <summary>
            Applies the configuration: the <see cref="T:CK.Plugin.IServiceHostConfiguration"/> that have been <see cref="M:CK.Plugin.IServiceHost.Add(CK.Plugin.IServiceHostConfiguration)"/>ed are challenged
            for each intercepted method or event.
            </summary>
        </member>
        <member name="M:CK.Plugin.IServiceHost.GetProxy(System.Type)">
            <summary>
            Gets the service implementation if it is available (it can be stopped).
            If <paramref name="interfaceType"/> is a wrapped <see cref="T:CK.Plugin.IService`1"/> and the service is disabled, it is returned,
            but if <paramref name="interfaceType"/> is a mere interface and the service is disabled, null is returned.
            </summary>
            <param name="interfaceType">Type of the service (it can be a wrapped <see cref="T:CK.Plugin.IService`1"/>).</param>
            <returns>The implementation or null if it is not available (disabled) and <paramref name="interfaceType"/> is a mere interface.</returns>
        </member>
        <member name="M:CK.Plugin.IServiceHost.GetRunningProxy(System.Type)">
            <summary>
            Gets the service implementation if it is available and starting, stopping or running (null will be returned
            if it is stopped or disabled).
            </summary>
            <param name="interfaceType">Type of the service.</param>
            <returns>The implementation or null if it is not available (disabled or stopped).</returns>
        </member>
        <member name="M:CK.Plugin.IServiceHost.InjectExternalService(System.Type,System.Object)">
            <summary>
            Ensures that a proxy exists for the given interface and associates it to an implementation.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="currentImplementation">Implementation to use.</param>
            <returns>The proxy object.</returns>
        </member>
        <member name="P:CK.Plugin.IServiceHost.DefaultConfiguration">
            <summary>
            Gets a <see cref="T:CK.Plugin.ISimpleServiceHostConfiguration"/> that is always taken into account (one can not <see cref="M:CK.Plugin.IServiceHost.Remove(CK.Plugin.IServiceHostConfiguration)"/> it).
            Any change to it must be followed by a call to <see cref="M:CK.Plugin.IServiceHost.ApplyConfiguration"/>.
            </summary>
        </member>
        <member name="T:CK.Plugin.ExecutionPlanResultStatus">
            <summary>
            Qualifies the type of error during plugin management.
            </summary>
        </member>
        <member name="F:CK.Plugin.ExecutionPlanResultStatus.Success">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:CK.Plugin.ExecutionPlanResultStatus.LoadError">
            <summary>
            An error occured while loading (activating) the plugin.
            </summary>
        </member>
        <member name="F:CK.Plugin.ExecutionPlanResultStatus.SetupError">
            <summary>
            An error occured during the call to <see cref="M:CK.Plugin.IPlugin.Setup(CK.Plugin.IPluginSetupInfo)"/>.
            </summary>
        </member>
        <member name="F:CK.Plugin.ExecutionPlanResultStatus.StartError">
            <summary>
            An error occured during the call to <see cref="M:CK.Plugin.IPlugin.Start"/>.
            </summary>
        </member>
        <member name="T:CK.Plugin.IExecutionPlanResult">
            <summary>
            Defines the return of the <see cref="!:IPluginHost.Execute"/> method.
            </summary>
        </member>
        <member name="P:CK.Plugin.IExecutionPlanResult.Status">
            <summary>
            Kind of error.
            </summary>
        </member>
        <member name="P:CK.Plugin.IExecutionPlanResult.Culprit">
            <summary>
            The plugin that raised the error.
            </summary>
        </member>
        <member name="P:CK.Plugin.IExecutionPlanResult.SetupInfo">
            <summary>
            Detailed error information specific to the <see cref="M:CK.Plugin.IPlugin.Setup(CK.Plugin.IPluginSetupInfo)"/> phasis.
            </summary>
        </member>
        <member name="P:CK.Plugin.IExecutionPlanResult.Error">
            <summary>
            Gets the exception if it exists (note that a <see cref="M:CK.Plugin.IPlugin.Setup(CK.Plugin.IPluginSetupInfo)"/> may not throw exception but simply 
            returns false).
            </summary>
        </member>
        <member name="T:CK.Plugin.IService`1">
            <summary>
            This generic interface is automatically implemented for each <see cref="T:CK.Plugin.IDynamicService"/> and
            enables a plugin to manage service status.
            </summary>
            <typeparam name="T">The dynamic service interface.</typeparam>
        </member>
        <member name="P:CK.Plugin.IService`1.Service">
            <summary>
            Gets the service itself. It is actually this object itself: <c>this</c> can be directly casted into 
            the interface.
            </summary>
        </member>
        <member name="P:CK.Plugin.IService`1.Status">
            <summary>
            Gets the current <see cref="T:CK.Plugin.RunningStatus"/> of the service.
            </summary>
        </member>
        <member name="E:CK.Plugin.IService`1.ServiceStatusChanged">
            <summary>
            Fires whenever the <see cref="P:CK.Plugin.IService`1.Status"/> changed.
            </summary>
        </member>
        <member name="T:CK.Plugin.ServiceLogEventOptions">
            <summary>
            Bit flags that describes the way an event is intercepted.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogEventOptions.None">
            <summary>
            "Naked mode". Nothing is logged (even exceptions). 
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogEventOptions.LogErrors">
            <summary>
            Errors (exceptions occuring during event raising) are logged.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogEventOptions.StartRaise">
            <summary>
            Logs the beginning of the event raising.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogEventOptions.LogParameters">
            <summary>
            Logs the parameters of the event.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogEventOptions.EndRaise">
            <summary>
            Logs the end of the event raising.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogEventOptions.CreateEntryMask">
            <summary>
            Covers event configuration flags (excludes <see cref="F:CK.Plugin.ServiceLogEventOptions.LogErrors"/>, <see cref="F:CK.Plugin.ServiceLogEventOptions.SilentEventRunningStatusError"/> and <see cref="F:CK.Plugin.ServiceLogEventOptions.SilentEventError"/>)
            that triggers the creation of an entry.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogEventOptions.SilentEventRunningStatusError">
            <summary>
            Ignores any error when a service raises an event while not running.
            Since we intercept the raising of the event, this corrects the bad behavior.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogEventOptions.LogSilentEventRunningStatusError">
            <summary>
            When <see cref="F:CK.Plugin.ServiceLogEventOptions.SilentEventRunningStatusError"/> is set, this triggers the log of an error.
            </summary>
        </member>
        <member name="F:CK.Plugin.ServiceLogEventOptions.SilentEventError">
            <summary>
            Exceptions raised while receivers handle the event will be ignored.
            Remaining subscribers of the event will receive the event.
            (This flag is independant of <see cref="F:CK.Plugin.ServiceLogEventOptions.LogErrors"/>.)
            </summary>
        </member>
        <member name="T:CK.Plugin.IPluginProxy">
            <summary>
            Plugin proxy.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginProxy.PluginKey">
            <summary>
            Gets a key object that uniquely identifies a plugin.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginProxy.RealPluginObject">
            <summary>
            Gets the real instance of the underlying plugin.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginProxy.LoadError">
            <summary>
            Exception raised when the plugin was last activated. Null if no error occured.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginProxy.IsLoaded">
            <summary>
            True if the concrete plugin has been activated without error.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginProxy.Status">
            <summary>
            Current running status of the plugin.
            </summary>
        </member>
        <member name="T:CK.Plugin.ISimpleParameterInfo">
            <summary>
            Basic Info describing a parameter
            </summary>
        </member>
        <member name="T:CK.Plugin.IServiceInfo">
            <summary>
            Describes a service interface.
            </summary>
        </member>
        <member name="P:CK.Plugin.IServiceInfo.AssemblyQualifiedName">
            <summary>
            Gets the full name of the service.
            </summary>
        </member>
        <member name="P:CK.Plugin.IServiceInfo.ServiceFullName">
            <summary>
            Gets the full name of the service (namespace and interface name).
            </summary>
        </member>
        <member name="P:CK.Plugin.IServiceInfo.IsDynamicService">
            <summary>
            Gets whether the service is a <see cref="T:CK.Plugin.IDynamicService"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.IServiceInfo.AssemblyInfo">
            <summary>
            Gets the assembly info that contains (defines) this interface.
            If the service interface itself has not been found, this is null.
            </summary>
        </member>
        <member name="P:CK.Plugin.IServiceInfo.Implementations">
            <summary>
            Gets the different <see cref="T:CK.Plugin.IPluginInfo"/> that implement this service.
            </summary>
        </member>
        <member name="P:CK.Plugin.IServiceInfo.MethodsInfoCollection">
            <summary>
            Gets the collection of <see cref="T:CK.Plugin.ISimpleMethodInfo"/> that this service exposes.
            </summary>
        </member>
        <member name="P:CK.Plugin.IServiceInfo.EventsInfoCollection">
            <summary>
            Gets the collection of <see cref="T:CK.Plugin.ISimpleEventInfo"/> that this service exposes.
            </summary>
        </member>
        <member name="P:CK.Plugin.IServiceInfo.PropertiesInfoCollection">
            <summary>
            Gets the collection of <see cref="T:CK.Plugin.ISimplePropertyInfo"/> that this service exposes.
            </summary>
        </member>
        <member name="T:CK.Plugin.ISimplePluginRunner">
            <summary>
            Simple interface to the actual plugin host.
            Concrete implementations may offer a much more complex api.
            (This is a typical facade design pattern.)
            </summary>
        </member>
        <member name="M:CK.Plugin.ISimplePluginRunner.Add(CK.Plugin.RequirementLayer,System.Boolean)">
            <summary>
            Adds a <see cref="T:CK.Plugin.RequirementLayer"/> with possible duplicate check.
            </summary>
            <param name="r">The requirements layer to add.</param>
            <param name="allowDuplicate">True to add the requirement even if it already exists.</param>
            <returns>Always true if <paramref name="allowDuplicate"/> is true. False if <see paramref="allowDuplicate"/> is false and the layer already exists.</returns>
        </member>
        <member name="M:CK.Plugin.ISimplePluginRunner.Remove(CK.Plugin.RequirementLayer,System.Boolean)">
            <summary>
            Removes <see cref="T:CK.Plugin.RequirementLayer"/> (only one or all of them). 
            </summary>
            <param name="r">The requirements layer to remove.</param>
            <param name="removeAll">True to force every occurence of the layer to be removed.</param>
            <returns>True if the layer has been found, false otherwise.</returns>
        </member>
        <member name="M:CK.Plugin.ISimplePluginRunner.Apply">
            <summary>
            Attempts to start/stop plugins and services according to the current configuration.
            Does nothing (and returns true) if <see cref="P:CK.Plugin.ISimplePluginRunner.IsDirty"/> is false.        
            </summary>
            <returns>True on success, false if an error occured.</returns>
        </member>
        <member name="M:CK.Plugin.ISimplePluginRunner.Apply(System.Boolean)">
            <summary>
            Attempts to start/stop plugins and services according to the current configuration.
            Does nothing (and returns true) if <see cref="P:CK.Plugin.ISimplePluginRunner.IsDirty"/> is false. 
            </summary>
            <param name="stopLaunchedOptionals">is false by default. If set to true, already running plugins that are optional are stopped (used to switch users for example)</param>
            <returns>True on success, false if an error occured.</returns>
        </member>
        <member name="P:CK.Plugin.ISimplePluginRunner.Disabled">
            <summary>
            Gets or sets whether all plugins should be disabled or not. Defaults to false. 
            Changing this property changes <see cref="P:CK.Plugin.ISimplePluginRunner.IsDirty"/> (<see cref="M:CK.Plugin.ISimplePluginRunner.Apply"/> must be called).
            </summary>
        </member>
        <member name="E:CK.Plugin.ISimplePluginRunner.IsDirtyChanged">
            <summary>
            Fires when the <see cref="P:CK.Plugin.ISimplePluginRunner.IsDirty"/> changed.
            </summary>
        </member>
        <member name="P:CK.Plugin.ISimplePluginRunner.IsDirty">
            <summary>
            Gets whether <see cref="M:CK.Plugin.ISimplePluginRunner.Apply"/> should be called because something has changed
            in the configuration.
            </summary>
        </member>
        <member name="E:CK.Plugin.ISimplePluginRunner.ApplyDone">
            <summary>
            Fires at the end of an <see cref="M:CK.Plugin.ISimplePluginRunner.Apply"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.ISimplePluginRunner.Discoverer">
            <summary>
            Gives access to the <see cref="T:CK.Plugin.IPluginDiscoverer"/> object.
            </summary>
        </member>
        <member name="P:CK.Plugin.ISimplePluginRunner.PluginHost">
            <summary>
            Gives access to the <see cref="T:CK.Plugin.IPluginHost"/> object.
            </summary>
        </member>
        <member name="P:CK.Plugin.ISimplePluginRunner.ServiceHost">
            <summary>
            Gives access to the <see cref="T:CK.Plugin.IServiceHost"/> object.
            </summary>
        </member>
        <member name="P:CK.Plugin.ISimplePluginRunner.LogCenter">
            <summary>
            Gives access to the <see cref="T:CK.Plugin.ILogCenter"/> object.
            </summary>
        </member>
        <member name="T:CK.Plugin.LogHostEventArgs">
            <summary>
            Base class for log entries emitted by the <see cref="T:CK.Plugin.IPluginHost"/>.
            </summary>
        </member>
        <member name="T:CK.Plugin.LogEventArgs">
            <summary>
            Base class for event logs.
            </summary>
        </member>
        <member name="M:CK.Plugin.LogEventArgs.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CK.Plugin.LogEventArgs"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.LogEventArgs.EntryType">
            <summary>
            Describes the type of this entry.
            </summary>
        </member>
        <member name="P:CK.Plugin.LogEventArgs.LSN">
            <summary>
            Log Serial Number: incremental number that enables the ordering of the events. 
            When negative, this event is under creation (<see cref="P:CK.Plugin.LogEventArgs.IsCreating"/> is true).
            </summary>
        </member>
        <member name="P:CK.Plugin.LogEventArgs.CreationTimeUtc">
            <summary>
            Gets the creation time.
            </summary>
        </member>
        <member name="P:CK.Plugin.LogEventArgs.IsCreating">
            <summary>
            True if this event is beeing created (its <see cref="P:CK.Plugin.LogEventArgs.LSN"/> is negative).
            </summary>
        </member>
        <member name="P:CK.Plugin.LogEventArgs.Depth">
            <summary>
            Depth in the call stack (at the proxy level).
            </summary>
        </member>
        <member name="P:CK.Plugin.LogHostEventArgs.Member">
            <summary>
            Member concerned by this event.
            </summary>
        </member>
        <member name="T:CK.Plugin.ILogErrorCulprit">
            <summary>
            Base interface that defines a log event that holds an <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogErrorCulprit.Culprit">
            <summary>
            The culprit is actually required to define an error. 
            The specialized <see cref="T:CK.Plugin.ILogErrorCaught"/> holds an exception but there exist errors 
            that do not have any associated exception to expose.
            This is the case of <see cref="T:CK.Plugin.ILogEventNotRunningError"/>: when a plugin raises an event 
            while beeing stopped, it is an error (silently ignored by the kernel), but there is
            no exception to associate with.
            </summary>
        </member>
        <member name="T:CK.Plugin.PluginRequirementCollectionChangingEventArgs">
            <summary>
            Describes a change that is about to occur in a <see cref="T:CK.Plugin.IPluginRequirementCollection"/> and can be <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>ed.
            </summary>
        </member>
        <member name="M:CK.Plugin.PluginRequirementCollectionChangingEventArgs.#ctor(CK.Plugin.IPluginRequirementCollection,CK.Core.ChangeStatus,System.Guid,CK.Plugin.RunningRequirement)">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.PluginRequirementCollectionChangingEventArgs"/>.
            </summary>
            <param name="c">The collection that is changing.</param>
            <param name="action">The <see cref="T:CK.Core.ChangeStatus"/>.</param>
            <param name="pluginId">The plugin identifier concerned.</param>
            <param name="requirement">The <see cref="T:CK.Plugin.RunningRequirement"/> of the changed <paramref name="pluginId"/>.</param>
        </member>
        <member name="P:CK.Plugin.PluginRequirementCollectionChangingEventArgs.Action">
            <summary>
            The <see cref="T:CK.Core.ChangeStatus"/> that synthetizes the change.
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginRequirementCollectionChangingEventArgs.Collection">
            <summary>
            The source <see cref="T:CK.Plugin.IPluginRequirementCollection"/> that is changing.
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginRequirementCollectionChangingEventArgs.PluginId">
            <summary>
            The plugin identifier for which a change is occurring. 
            It is <see cref="F:System.Guid.Empty"/> if the change is a global change (<see cref="M:CK.Plugin.IPluginRequirementCollection.Clear"/> is beeing called for instance).
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginRequirementCollectionChangingEventArgs.Requirement">
            <summary>
            The <see cref="T:CK.Plugin.RunningRequirement"/> that is changing.
            It is <see cref="F:CK.Plugin.RunningRequirement.Optional"/> if the change is a global change (<see cref="M:CK.Plugin.IPluginRequirementCollection.Clear"/> is beeing called for instance).
            </summary>
        </member>
        <member name="T:CK.Plugin.ILogEventNotRunningError">
            <summary>
            Log event emitted when service that is not running raised an event.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogEventNotRunningError.Event">
            <summary>
            The event raised when the service not in a running state: it is the <see cref="P:CK.Plugin.ILogErrorCulprit.Culprit"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogEventNotRunningError.ServiceIsDisabled">
            <summary>
            True if the service is actually disabled, false if it is not running.
            </summary>
        </member>
        <member name="T:CK.Plugin.ILogEventError">
            <summary>
            Log event related to an error during event raising.
            </summary>
        </member>
        <member name="T:CK.Plugin.ILogErrorCaught">
            <summary>
            Base interface that defines an error associated to an existing <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogErrorCaught.Error">
            <summary>
            The error itself. Can not be null.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogEventError.Event">
            <summary>
            The event that raised the error.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogEventError.EventEntry">
            <summary>
            Corresponding log entry if it exists (null otherwise).
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogEventError.OtherErrors">
            <summary>
            Other errors related to the same event.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogEventError.Target">
            <summary>
            The subscriber method that thrown the error: it is the <see cref="P:CK.Plugin.ILogErrorCulprit.Culprit"/>.
            </summary>
        </member>
        <member name="T:CK.Plugin.IPluginSetupInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:CK.Plugin.IPluginSetupInfo.Clear">
            <summary>
            Clears <see cref="P:CK.Plugin.IPluginSetupInfo.FailedUserMessage"/>, <see cref="P:CK.Plugin.IPluginSetupInfo.FailedDetailedMessage"/> and <see cref="P:CK.Plugin.IPluginSetupInfo.Error"/>: they are all set to null.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginSetupInfo.FailedUserMessage">
            <summary>
            Gets or sets an explicit message for the user when <see cref="M:CK.Plugin.IPlugin.Setup(CK.Plugin.IPluginSetupInfo)"/> fails.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginSetupInfo.FailedDetailedMessage">
            <summary>
            Gets or sets a message for the user when <see cref="M:CK.Plugin.IPlugin.Setup(CK.Plugin.IPluginSetupInfo)"/> fails.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginSetupInfo.Error">
            <summary>
            Gets or sets an optional exception.
            </summary>
        </member>
        <member name="T:CK.Plugin.ILogMethodError">
            <summary>
            Log event emitted whenever an error occured during a method call.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogMethodError.Method">
            <summary>
            The method that raised the error (it is also the <see cref="P:CK.Plugin.ILogErrorCulprit.Culprit"/>).
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogMethodError.MethodEntry">
            <summary>
            Logged method entry if it exists (null otherwise).
            </summary>
        </member>
        <member name="T:CK.Plugin.IPluginConfigAccessorInfo">
            <summary>
            An editor plugin can edit data (configuration properties) of another plugin.
            This interface defines the association between the <see cref="P:CK.Plugin.IPluginConfigAccessorInfo.Plugin"/> and the <see cref="P:CK.Plugin.IPluginConfigAccessorInfo.Source"/> plugins.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginConfigAccessorInfo.Plugin">
            <summary>
            Gets the <see cref="T:CK.Plugin.IPlugin"/> that edits the <see cref="P:CK.Plugin.IPluginConfigAccessorInfo.Source"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginConfigAccessorInfo.Source">
            <summary>
            Gets the unique identifier of the plugin that <see cref="P:CK.Plugin.IPluginConfigAccessorInfo.Plugin"/> claims to edit.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginConfigAccessorInfo.EditedSource">
            <summary>
            Gets the <see cref="T:CK.Plugin.IPluginInfo"/> that the <see cref="P:CK.Plugin.IPluginConfigAccessorInfo.Plugin"/> claims to edit if it exists (null
            if the plugin has not been discovered).
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginConfigAccessorInfo.ConfigurationPropertyName">
            <summary>
            Gets the property name of the <see cref="P:CK.Plugin.IPluginConfigAccessorInfo.Plugin"/> plugin that access the <see cref="P:CK.Plugin.IPluginConfigAccessorInfo.Source"/> configuration.
            Null if no property exists.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginConfigAccessorInfo.IsConfigurationPropertyValid">
            <summary>
            Gets if the <see cref="P:CK.Plugin.IPluginConfigAccessorInfo.ConfigurationPropertyName"/> is not null (a property actually exists 
            on the plugin for the <see cref="P:CK.Plugin.IPluginConfigAccessorInfo.Source"/> plugin), no error is associated to this object, 
            and <see cref="P:CK.Plugin.IPluginConfigAccessorInfo.EditedSource"/> is not null.
            </summary>
        </member>
        <member name="T:CK.Plugin.RequiredServiceAttribute">
            <summary>
            This attribute declares the requirement for any service that a plugin references: this does not require
            the property type to be a <see cref="T:CK.Plugin.IDynamicService"/> interface.
            </summary>
        </member>
        <member name="M:CK.Plugin.RequiredServiceAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.RequiredServiceAttribute"/> with <see cref="P:CK.Plugin.RequiredServiceAttribute.Required"/> set to true.
            </summary>
        </member>
        <member name="P:CK.Plugin.RequiredServiceAttribute.Required">
            <summary>
            Gets or sets whether the service must be available for the plugin to run.
            Defaults to true.
            </summary>
        </member>
        <member name="T:CK.Plugin.PluginModelExtension">
            <summary>
            Carries extension methods for <see cref="N:CK.Plugin"/> interfaces and classes.
            </summary>
        </member>
        <member name="M:CK.Plugin.PluginModelExtension.Add(CK.Plugin.ISimplePluginRunner,CK.Plugin.RequirementLayer)">
            <summary>
            Adds a <see cref="T:CK.Plugin.RequirementLayer"/>. 
            The same requirements layer can be added multiple times. 
            Only the last (balanced) call to <see cref="M:CK.Plugin.PluginModelExtension.Remove(CK.Plugin.ISimplePluginRunner,CK.Plugin.RequirementLayer)">Remove</see> will actually remove the layer.
            </summary>
            <param name="runner">This <see cref="T:CK.Plugin.ISimplePluginRunner"/>.</param>
            <param name="r">The requirements layer to add.</param>
        </member>
        <member name="M:CK.Plugin.PluginModelExtension.Remove(CK.Plugin.ISimplePluginRunner,CK.Plugin.RequirementLayer)">
            <summary>
            Removes one <see cref="T:CK.Plugin.RequirementLayer"/>. 
            Use <see cref="M:CK.Plugin.ISimplePluginRunner.Remove(CK.Plugin.RequirementLayer,System.Boolean)"/> to force the remove regardless of the number of times it has been <see cref="M:CK.Plugin.ISimplePluginRunner.Add(CK.Plugin.RequirementLayer,System.Boolean)">added</see>.
            </summary>
            <param name="runner">This <see cref="T:CK.Plugin.ISimplePluginRunner"/>.</param>
            <param name="r">The requirements layer to remove.</param>
            <returns>True if the layer has been found, false otherwise.</returns>
        </member>
        <member name="T:CK.Plugin.ILogExternalErrorEntry">
            <summary>
            Log event externally generated (through <see cref="M:CK.Plugin.ILogCenter.ExternalLogError(System.Exception,System.Reflection.MemberInfo,System.String,System.Object)"/>).
            Combines <see cref="T:CK.Plugin.ILogExternalEntry"/> and <see cref="T:CK.Plugin.ILogErrorCaught"/>.
            </summary>
        </member>
        <member name="T:CK.Plugin.ISimpleEventInfo">
            <summary>
            Basic Info describing an event.
            </summary>
        </member>
        <member name="T:CK.Plugin.DynamicServiceAttribute">
            <summary>
            This attribute declares a service requirement for a plugin.
            The property type must be a <see cref="T:CK.Plugin.IDynamicService"/> interface.
            </summary>
        </member>
        <member name="P:CK.Plugin.DynamicServiceAttribute.Requires">
            <summary>
            Gets or sets a <see cref="T:CK.Plugin.RunningRequirement"/> for the <see cref="T:CK.Plugin.IDynamicService"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.DiscoverDoneEventArgs.NewPlugins">
            <summary>
            Gets the list of new discovered plugins (contains also plugins on error).
            </summary>
        </member>
        <member name="P:CK.Plugin.DiscoverDoneEventArgs.NewServices">
            <summary>
            Gets the list of new discovered services (contains also services on error).
            </summary>
        </member>
        <member name="P:CK.Plugin.DiscoverDoneEventArgs.NewOldPlugins">
            <summary>
            Gets the list of appearing old plugins. They may be previously active plugins replaced by a newer version
            or a "new" old plugin (when both plugins plugin versions are discovered at once).
            </summary>
        </member>
        <member name="P:CK.Plugin.DiscoverDoneEventArgs.NewDisappearedAssemblies">
            <summary>
            Gets the list of missing assemblies.
            </summary>
        </member>
        <member name="T:CK.Plugin.IPlugin">
            <summary>
            This interface defines the minimal properties and behavior of a plugin.
            </summary>
        </member>
        <member name="M:CK.Plugin.IPlugin.Setup(CK.Plugin.IPluginSetupInfo)">
            <summary>
            This method initializes the plugin: own resources must be acquired and running conditions should be tested.
            No interaction with other plugins must occur (interactions must be in <see cref="M:CK.Plugin.IPlugin.Start"/>).
            </summary>
            <param name="info">Enables the implementation to give detailed information in case of error.</param>
            <returns>True on success. When returning false, <see cref="T:CK.Plugin.IPluginSetupInfo"/> should be used to return detailed explanations.</returns>
        </member>
        <member name="M:CK.Plugin.IPlugin.Start">
            <summary>
            This method must start the plugin: it is called only if <see cref="M:CK.Plugin.IPlugin.Setup(CK.Plugin.IPluginSetupInfo)"/> returned true.
            Implementations can interact with other components (such as subscribing to their events).
            </summary>
        </member>
        <member name="M:CK.Plugin.IPlugin.Teardown">
            <summary>
            This method uninitializes the plugin (it is called after <see cref="M:CK.Plugin.IPlugin.Stop"/>).
            Implementations MUST NOT interact with any other external components: only internal resources should be freed.
            </summary>
        </member>
        <member name="M:CK.Plugin.IPlugin.Stop">
            <summary>
            This method is called by the host when the plugin must not be running anymore.
            Implementations can interact with other components (such as unsubscribing to their events). 
            <see cref="M:CK.Plugin.IPlugin.Teardown"/> will be called to finalize the stop.
            </summary>
        </member>
        <member name="T:CK.Plugin.ServiceRequirementCollectionChangedEventArgs">
            <summary>
            Describes a change that occured in a <see cref="T:CK.Plugin.IServiceRequirementCollection"/>.
            </summary>
        </member>
        <member name="M:CK.Plugin.ServiceRequirementCollectionChangedEventArgs.#ctor(CK.Plugin.IServiceRequirementCollection,CK.Core.ChangeStatus,System.String,CK.Plugin.RunningRequirement)">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.ServiceRequirementCollectionChangedEventArgs"/>.
            </summary>
            <param name="c">The collection that changed.</param>
            <param name="action">The <see cref="T:CK.Core.ChangeStatus"/>.</param>
            <param name="assemblyQualifiedName">The service identifier concerned.</param>
            <param name="requirement">The <see cref="T:CK.Plugin.RunningRequirement"/> of the changed service.</param>
        </member>
        <member name="P:CK.Plugin.ServiceRequirementCollectionChangedEventArgs.Action">
            <summary>
            The <see cref="T:CK.Core.ChangeStatus"/> that synthetizes the change.
            </summary>
        </member>
        <member name="P:CK.Plugin.ServiceRequirementCollectionChangedEventArgs.Collection">
            <summary>
            The source <see cref="T:CK.Plugin.IServiceRequirementCollection"/> that changed.
            </summary>
        </member>
        <member name="P:CK.Plugin.ServiceRequirementCollectionChangedEventArgs.AssemblyQualifiedName">
            <summary>
            The service identifier for which a change occured. 
            It is null if the change is a global change (<see cref="M:CK.Plugin.IServiceRequirementCollection.Clear"/> has been called for instance).
            </summary>
        </member>
        <member name="P:CK.Plugin.ServiceRequirementCollectionChangedEventArgs.Requirement">
            <summary>
            The <see cref="T:CK.Plugin.RunningRequirement"/> that changed.
            It is <see cref="F:CK.Plugin.RunningRequirement.Optional"/> if the change is a global change (<see cref="M:CK.Plugin.IPluginRequirementCollection.Clear"/> has been called for instance).
            </summary>
        </member>
        <member name="T:CK.Plugin.IServiceHostConfiguration">
            <summary>
            Configures the <see cref="T:CK.Plugin.IServiceHost"/>.
            </summary>
        </member>
        <member name="M:CK.Plugin.IServiceHostConfiguration.GetOptions(System.Reflection.MethodInfo)">
            <summary>
            Returns the <see cref="T:CK.Plugin.ServiceLogMethodOptions"/> for the given method.
            </summary>
            <param name="m">Method for which options should be obtained.</param>
            <returns>Configuration for the method.</returns>
        </member>
        <member name="M:CK.Plugin.IServiceHostConfiguration.GetOptions(System.Reflection.EventInfo)">
            <summary>
            Returns the <see cref="T:CK.Plugin.ServiceLogEventOptions"/> for the given event.
            </summary>
            <param name="e">Event for which options should be obtained.</param>
            <returns>Configuration for the event.</returns>
        </member>
        <member name="T:CK.Plugin.PluginStatusChangedEventArgs">
            <summary>
            Event argument when a plugin <see cref="T:CK.Plugin.RunningStatus">status</see> changed.
            </summary>
        </member>
        <member name="M:CK.Plugin.PluginStatusChangedEventArgs.#ctor(CK.Plugin.RunningStatus,CK.Plugin.IPluginProxy)">
            <summary>
            Initializes a new instance of a <see cref="T:CK.Plugin.PluginStatusChangedEventArgs"/>.
            </summary>
            <param name="previous">The previous running status.</param>
            <param name="current">The plugin proxy.</param>
        </member>
        <member name="P:CK.Plugin.PluginStatusChangedEventArgs.PluginProxy">
            <summary>
            Gets the plugin proxy.
            </summary>
        </member>
        <member name="P:CK.Plugin.PluginStatusChangedEventArgs.Previous">
            <summary>
            Gets the previous status.
            </summary>
        </member>
        <member name="T:CK.Plugin.ServiceStoppedException">
            <summary>
            Exception raised whenever an event is raised by or a method is called on a stopped service. 
            </summary>
        </member>
        <member name="M:CK.Plugin.ServiceStoppedException.#ctor(System.Type)">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.ServiceStoppedException"/>.
            </summary>
            <param name="serviceType">Type of the concerned service.</param>
        </member>
        <member name="M:CK.Plugin.ServiceStoppedException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.ServiceStoppedException"/>.
            </summary>
            <param name="serviceType">Type of the concerned service.</param>
            <param name="message">Detailed message.</param>
        </member>
        <member name="M:CK.Plugin.ServiceStoppedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.ServiceStoppedException"/> (serialization).
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="P:CK.Plugin.ServiceStoppedException.ServiceTypeName">
            <summary>
            Gets the service type name.
            </summary>
        </member>
        <member name="T:CK.Plugin.ISimpleServiceHostConfiguration">
            <summary>
            Extension of the basic <see cref="T:CK.Plugin.IServiceHostConfiguration"/> that 
            memorizes its configuration and provides helpers to set multiple configurations at once.
            </summary>
        </member>
        <member name="M:CK.Plugin.IPluginDiscoverer.FindPlugin(System.Guid)">
            <summary>
            Gets <see cref="T:CK.Plugin.IPluginInfo"/> best version with the given plugin identifier.
            </summary>
            <param name="pluginId"></param>
            <returns></returns>
        </member>
        <member name="M:CK.Plugin.IPluginDiscoverer.FindService(System.String)">
            <summary>
            Gets the <see cref="T:CK.Plugin.IServiceInfo"/> associated to the given assembly qualified name.
            </summary>
            <param name="assemblyQualifiedName"></param>
            <returns></returns>
        </member>
        <member name="M:CK.Plugin.IPluginDiscoverer.Discover(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Start the discover in a given <see cref="T:System.IO.DirectoryInfo"/>.
            </summary>
            <param name="dir">Directory that we have to look into.</param>
            <param name="recurse">Sets if the discover is recursive of not.</param>
        </member>
        <member name="M:CK.Plugin.IPluginDiscoverer.Discover(System.IO.FileInfo)">
            <summary>
            Discover only one file.
            </summary>
            <param name="file">An exisiting file (a dll).</param>
        </member>
        <member name="E:CK.Plugin.IPluginDiscoverer.DiscoverBegin">
            <summary>
            Fires at the beginning of a discovery process.
            </summary>
        </member>
        <member name="E:CK.Plugin.IPluginDiscoverer.DiscoverDone">
            <summary>
            Fires at the end of the discovery process: all plugins information is available
            and up to date.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginDiscoverer.AllAssemblies">
            <summary>
            Contains all the <see cref="T:CK.Plugin.IAssemblyInfo"/> that have been processed.
            They may contain an error or no plugins at all.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginDiscoverer.PluginOrServiceAssemblies">
            <summary>
            Contains all the <see cref="T:CK.Plugin.IAssemblyInfo"/> that have been succesfully discovered 
            and have at least one plugin or one service defined in it.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginDiscoverer.Plugins">
            <summary>
            Contains all the <see cref="T:CK.Plugin.IPluginInfo"/> that have been succesfully discovered with the best
            available version.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginDiscoverer.AllPlugins">
            <summary>
            Contains all the <see cref="T:CK.Plugin.IPluginInfo"/>. This groups <see cref="P:CK.Plugin.IPluginDiscoverer.Plugins"/> and <see cref="P:CK.Plugin.IPluginDiscoverer.OldVersionnedPlugins"/>
            and plugins that are on error.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginDiscoverer.OldVersionnedPlugins">
            <summary>
            Contains all the <see cref="T:CK.Plugin.IPluginInfo"/> that have been succesfully discovered.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginDiscoverer.Services">
            <summary>
            Contains all the <see cref="T:CK.Plugin.IServiceInfo"/> that have been succesfully discovered
            with their implementations.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginDiscoverer.AllServices">
            <summary>
            Contains all the <see cref="T:CK.Plugin.IServiceInfo"/> that have been succesfully discovered.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginDiscoverer.NotFoundServices">
            <summary>
            Contains all the <see cref="T:CK.Plugin.IServiceInfo"/> implemented or referenced by plugins and not
            founded into assemblies.
            </summary>
        </member>
        <member name="P:CK.Plugin.IPluginDiscoverer.CurrentVersion">
            <summary>
            Gets the number of discover previously done.
            </summary>
        </member>
        <member name="T:CK.Plugin.RunningRequirement">
            <summary>
            Describes how a service or a plugin is required. 
            A requirement is a gradation between <see cref="F:CK.Plugin.RunningRequirement.Optional"/> and <see cref="F:CK.Plugin.RunningRequirement.MustExistAndRun"/>.
            </summary>
        </member>
        <member name="F:CK.Plugin.RunningRequirement.Optional">
            <summary>
            The service or plugin is optional: it can be unavailable.
            </summary>
        </member>
        <member name="F:CK.Plugin.RunningRequirement.OptionalTryStart">
            <summary>
            If it is available the service or plugin should be started.
            </summary>
        </member>
        <member name="F:CK.Plugin.RunningRequirement.MustExist">
            <summary>
            The service or plugin must be available (but it can be stopped).
            </summary>
        </member>
        <member name="F:CK.Plugin.RunningRequirement.MustExistTryStart">
            <summary>
            The service or plugin must be available and, if possible, should be started.
            </summary>
        </member>
        <member name="F:CK.Plugin.RunningRequirement.MustExistAndRun">
            <summary>
            The service or plugin must be available and must run.
            </summary>
        </member>
        <member name="T:CK.Plugin.ILogEventEntry">
            <summary>
            Log event related to event raising.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogEventEntry.Event">
            <summary>
            Gets the event associated to this entry.
            </summary>
        </member>
        <member name="P:CK.Plugin.ILogEventEntry.Errors">
            <summary>
            Gets the list of errors thrown by event receivers.
            </summary>
        </member>
        <member name="T:CK.Plugin.HostExtension">
            <summary>
            Defines the host extension methods.
            </summary>
        </member>
        <member name="M:CK.Plugin.HostExtension.GetProxy``1(CK.Plugin.IServiceHost)">
            <summary>
            Gets the <see cref="T:CK.Plugin.IService`1"/> service proxy if it is available (it may be stopped but null will be returned
            if it is disabled).
            </summary>
            <typeparam name="T">Type of the service (interface marked with <see cref="T:CK.Plugin.IDynamicService"/>)</typeparam>
            <returns>The service or null if not available (disabled).</returns>
        </member>
        <member name="M:CK.Plugin.HostExtension.GetRunningProxy``1(CK.Plugin.IServiceHost)">
            <summary>
            Gets the <see cref="T:CK.Plugin.IService`1"/> service proxy if it is available and starting, stopping or running (null will be returned
            if it is stopped or disabled).
            </summary>
            <typeparam name="T">Type of the service (interface marked with <see cref="T:CK.Plugin.IDynamicService"/>)</typeparam>
            <returns>The service or null if not available (disabled or stopped).</returns>
        </member>
        <member name="M:CK.Plugin.HostExtension.IsPluginRunning(CK.Plugin.IPluginHost,System.Guid)">
            <summary>
            Checks whether a plugin is running or not.
            </summary>
            <param name="key">Plugin identifier.</param>
            <returns>True if the plugin is loaded and is currently running.</returns>
        </member>
        <member name="T:CK.Plugin.ApplyDoneEventArgs">
            <summary>
            Event argument used by the <see cref="E:CK.Plugin.ISimplePluginRunner.ApplyDone"/> event.
            </summary>
        </member>
        <member name="P:CK.Plugin.ApplyDoneEventArgs.Success">
            <summary>
            Gets if the <see cref="M:CK.Plugin.ISimplePluginRunner.Apply"/> succeed.
            </summary>
        </member>
    </members>
</doc>
