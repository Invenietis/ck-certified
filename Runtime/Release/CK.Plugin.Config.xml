<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CK.Plugin.Config</name>
    </assembly>
    <members>
        <member name="T:CK.Plugin.Config.UserConfiguration">
            <summary>
            Holds a <see cref="T:CK.Plugin.Config.PluginStatusCollection"/>, as well as a <see cref="P:CK.Plugin.Config.UserConfiguration.LiveUserConfiguration"/>. 
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.ConfigurationBase">
            <summary>
            Base class for <see cref="T:CK.Plugin.Config.UserConfiguration"/> and <see cref="T:CK.Plugin.Config.SystemConfiguration"/>. 
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.IUserConfiguration">
            <summary>
            User related configuration. 
            This is the second level of configuration that comes above <see cref="T:CK.Plugin.Config.ISystemConfiguration"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IUserConfiguration.PluginsStatus">
            <summary>
            Gets <see cref="T:CK.Plugin.Config.IPluginStatus">plugins status</see> configured at the user level.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IUserConfiguration.LiveUserConfiguration">
            <summary>
            Gets the "live" configuration level. 
            Live configuration can override <see cref="P:CK.Plugin.Config.IUserConfiguration.PluginsStatus"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IUserConfiguration.HostConfig">
            <summary>
            Gets the host dictionary for user configuration.
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.ISystemConfiguration">
            <summary>
            System related configuration. 
            This is the first level of configuration that applies to all users.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.ISystemConfiguration.UserProfiles">
            <summary>
            Gets all the <see cref="T:CK.Plugin.Config.IUserProfile">user profiles</see> previously used by the system.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.ISystemConfiguration.PluginsStatus">
            <summary>
            Gets <see cref="T:CK.Plugin.Config.IPluginStatus">plugins status</see> configured at the system level.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.ISystemConfiguration.HostConfig">
            <summary>
            Gets the host dictionary for System wide configuration.
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.IConfigManager">
            <summary>
            Defines simple functionalities related to configuration. 
            The <see cref="P:CK.Plugin.Config.IConfigManager.Extended"/> property offers more complete configuration management.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigManager.Extended">
            <summary>
            Gets an extended interface that offers methods to manage configuration.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigManager.SystemConfiguration">
            <summary>
            Gets the system configuration object.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigManager.UserConfiguration">
            <summary>
            Gets the current user configuration object.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigManager.SolvedPluginConfiguration">
            <summary>
            Synchronized view of the <see cref="P:CK.Plugin.Config.IConfigManager.SystemConfiguration"/> and <see cref="P:CK.Plugin.Config.IConfigManager.UserConfiguration"/>
            regarding plugin configuration.
            </summary>
        </member>
        <member name="E:CK.Plugin.Config.IConfigManager.UserChanged">
            <summary>
            Fired when a new user configuration is loaded.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IConfigManagerExtended.LoadSystemConfig(CK.Storage.IStructuredReader)">
            <summary>
            Loads the system configuration from a stream. Current settings are cleared and if the stream is null or empty,
            the configuration remains empty and null is returned.
            </summary>
            <returns>A list (possibly empty) of <see cref="!:XmlReadElementObjectInfo"/> describing read errors.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IConfigManagerExtended.LoadUserConfig(CK.Storage.IStructuredReader,CK.Plugin.Config.IUserProfile)">
            <summary>
            Loads the user configuration from a stream. Current settings are cleared and if the stream is null or empty,
            the configuration remains empty and null is returned.
            Only &lt;User&gt; element is read.
            </summary>
            <returns>A list (possibly empty) of <see cref="!:XmlReadElementObjectInfo"/> describing read errors.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IConfigManagerExtended.SaveUserConfig(CK.Storage.IStructuredWriter)">
            <summary>
            Writes the user config to the given stream.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IConfigManagerExtended.SaveSystemConfig(CK.Storage.IStructuredWriter)">
            <summary>
            Writes the system config to the given stream.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IConfigManagerExtended.FireSaveUserConfigRequired">
            <summary>
            Triggers the <see cref="E:CK.Plugin.Config.IConfigManagerExtended.SaveUserConfigRequired"/> event.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IConfigManagerExtended.FireSaveSystemConfigRequired">
            <summary>
            Triggers the <see cref="E:CK.Plugin.Config.IConfigManagerExtended.SaveSystemConfigRequired"/> event.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigManagerExtended.ConfigManager">
            <summary>
            Gets the simple configuration object.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigManagerExtended.Container">
            <summary>
            Gets the <see cref="T:CK.Plugin.Config.IConfigContainer"/> that gives access to the global
            configuration (for any object and any plugin).
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigManagerExtended.HostSystemConfig">
            <summary>
            Gets the host dictionary for System wide configuration.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigManagerExtended.HostUserConfig">
            <summary>
            Gets the host dictionary for current user configuration.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigManagerExtended.ConfigPluginId">
            <summary>
            Gets the <see cref="T:CK.Core.INamedVersionedUniqueId"/> that represents the configuration itself.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigManagerExtended.IsUserConfigDirty">
            <summary>
            Gets whether the user configuration file should be saved (if it has changed from the last call to <see cref="M:CK.Plugin.Config.IConfigManagerExtended.LoadUserConfig(CK.Storage.IStructuredReader,CK.Plugin.Config.IUserProfile)"/>).
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigManagerExtended.IsSystemConfigDirty">
            <summary>
            Gets whether the system configuration file should be saved.
            </summary>
        </member>
        <member name="E:CK.Plugin.Config.IConfigManagerExtended.SaveUserConfigRequired">
            <summary>
            Fires whenever the system needs to write User configuration.
            </summary>
        </member>
        <member name="E:CK.Plugin.Config.IConfigManagerExtended.SaveSystemConfigRequired">
            <summary>
            Fires whenever the system needs to write System configuration.
            </summary>
        </member>
        <member name="E:CK.Plugin.Config.IConfigManagerExtended.LoadUserConfigRequired">
            <summary>
            Fires whenever the system needs to load User configuration.
            </summary>
        </member>
        <member name="E:CK.Plugin.Config.IConfigManagerExtended.LoadSystemConfigRequired">
            <summary>
            Fires whenever the system needs to load System configuration.
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.LiveUserConfiguration">
            <summary>
            Holds the <see cref="T:CK.Plugin.Config.ConfigUserAction"/> for each plugin
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.ILiveUserConfiguration">
            <summary>
            Holds the UserActions for each plugin
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.ILiveUserConfiguration.SetAction(System.Guid,CK.Plugin.Config.ConfigUserAction)">
            <summary>
            Sets a <see cref="T:CK.Plugin.Config.ConfigUserAction"/> to a given plugin.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.ILiveUserConfiguration.GetAction(System.Guid)">
            <summary>
            Gets the <see cref="T:CK.Plugin.Config.ConfigUserAction"/> related to the given plugin.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.ILiveUserConfiguration.ResetAction(System.Guid)">
            <summary>
            Remove the <see cref="T:CK.Plugin.Config.ConfigUserAction"/> for the given plugin.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.LiveUserConfiguration.SetAction(System.Guid,CK.Plugin.Config.ConfigUserAction)">
            <summary>
            Sets the <see cref="T:CK.Plugin.Config.ConfigUserAction"/> for the specified <see cref="!:IPluginLoaderInfo"/>
            </summary>
            <param name="pluginId">PluginId of the plugin</param>
            <param name="actionType">Action of the Use</param>
            <returns>The setted LiveUserAction of the plugin set as parameter</returns>
        </member>
        <member name="M:CK.Plugin.Config.LiveUserConfiguration.GetAction(System.Guid)">
            <summary>
            Gets the <see cref="T:CK.Plugin.Config.ConfigUserAction"/> for the specified PluginId
            </summary>
            <param name="pluginId">ID of the plugin</param>
            <returns>The UserAction for the specified PluginId</returns>
        </member>
        <member name="M:CK.Plugin.Config.LiveUserConfiguration.ResetAction(System.Guid)">
            <summary>
            Removes the <see cref="T:CK.Plugin.Config.ConfigUserAction"/> attached to the specified plugin
            </summary>
            <param name="pluginId">ID of the plugin</param>
        </member>
        <member name="T:CK.Plugin.Config.ConfigSupportType">
            <summary>
            Gets the different types of configuration support.
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.IUserProfile">
            <summary>
            Describes what's a user profile
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IUserProfile.Rename(System.String)">
            <summary>
            Sets a new name for the profile.
            </summary>
            <param name="newName">New name of the profile</param>
        </member>
        <member name="M:CK.Plugin.Config.IUserProfile.Destroy">
            <summary>
            Destroys the profile, and remove it from its parent collection.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IUserProfile.Name">
            <summary>
            Friendly name of the profile.
            Defaults to "config-GUID".
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IUserProfile.Type">
            <summary>
            Support type of the profile (File, ...)
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IUserProfile.Address">
            <summary>
            Gets the physical address, if it's a File it can be "C:/CiviKey/Contexts/AzertyLike.xml".
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IUserProfile.IsLastProfile">
            <summary>
            Gets whether this profile is the last used profile (and the current).
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.R">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.R.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.R.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.R.InvalidMergeOperation">
            <summary>
              Looks up a localized string similar to Merge operation failed. Only same types can be merged..
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.R.InvalidObjectsInSystemConfig">
            <summary>
              Looks up a localized string similar to System configuration must not contain external/unknown objects..
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.IPluginStatus">
            <summary>
            Describes what's a <see cref="T:CK.Plugin.Config.IPluginStatus"/>.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IPluginStatus.Destroy">
            <summary>
            It will destroy the plugin status, and remove it from its parent collection.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IPluginStatus.PluginId">
            <summary>
            Gets the unique ID of the plugin
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IPluginStatus.Status">
            <summary>
            Gets ConfigPluginStatus.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.ISolvedPluginConfiguration.GetStatus(System.Guid)">
            <summary>
            Gets the plugin status of the given plugin (by its identifier). 
            If no plugin status had been set for the plugin, returns <see cref="F:CK.Plugin.Config.SolvedConfigStatus.Optional"/>.
            </summary>
            <param name="pluginID">Plugin identifier.</param>
            <returns>The configuration status, <see cref="F:CK.Plugin.Config.SolvedConfigStatus.Optional"/> if no configuration exists for the plugin.</returns>
        </member>
        <member name="M:CK.Plugin.Config.ISolvedPluginConfiguration.Find(System.Guid)">
            <summary>
            Gets the <see cref="T:CK.Plugin.Config.SolvedPluginConfigElement"/> of the given plugin (by its identifier). 
            </summary>
            <param name="pluginID">Plugin identifier.</param>
            <returns>Null if no configuration exists.</returns>
        </member>
        <member name="E:CK.Plugin.Config.ISolvedPluginConfiguration.Changed">
            <summary>
            Fires whenever a configuration changed.
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.IPluginStatusCollection">
            <summary>
            Can be used by all objects that whants to keep a collection of <see cref="T:CK.Plugin.Config.IPluginStatus"/>.
            Typically system or user configuration.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IPluginStatusCollection.SetStatus(System.Guid,CK.Plugin.Config.ConfigPluginStatus)">
            <summary>
            Sets the given <see cref="!:ConfiguPluginStatus"/> on the given plugin (by its ID).
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IPluginStatusCollection.GetStatus(System.Guid,CK.Plugin.Config.ConfigPluginStatus)">
            <summary>
            Gets the plugin status of the given plugin (by its ID). 
            If no plugin status had been set for the given plugin, returns the given default status.
            </summary>
            <param name="pluginID">Plugin identifier.</param>
            <param name="defaultStatus">Default status if the plugin is not configured.</param>
            <returns>The status of the plugin.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IPluginStatusCollection.GetPluginStatus(System.Guid)">
            <summary>
            Gets the <see cref="T:CK.Plugin.Config.IPluginStatus"/> related for the given id. Can be null.
            </summary>
            <param name="pluginID"></param>
            <returns></returns>
        </member>
        <member name="M:CK.Plugin.Config.IPluginStatusCollection.Clear(System.Guid)">
            <summary>
            Removes the status from the configuration.
            </summary>
            <param name="pluginID">Plugin identifier.</param>
        </member>
        <member name="M:CK.Plugin.Config.IPluginStatusCollection.Clear">
            <summary>
            Removes all the status from the configuration.
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.SolvedPluginConfigurationChangedEventArs">
            <summary>
            Event argument for <see cref="E:CK.Plugin.Config.ISolvedPluginConfiguration.Changed"/>.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.SolvedPluginConfigurationChangedEventArs.#ctor(CK.Plugin.Config.SolvedPluginConfigElement)">
            <summary>
            Initializes a new <see cref="T:CK.Plugin.Config.SolvedPluginConfigurationChangedEventArs"/>.
            </summary>
            <param name="e">The element that changed (null for a global change).</param>
        </member>
        <member name="P:CK.Plugin.Config.SolvedPluginConfigurationChangedEventArs.SolvedPluginConfigElement">
            <summary>
            Gets the only element that changed. Null if a <see cref="P:CK.Plugin.Config.SolvedPluginConfigurationChangedEventArs.GlobalChange"/> occured.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.SolvedPluginConfigurationChangedEventArs.GlobalChange">
            <summary>
            Gets whether the change concerns more than one plugin.
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.IUserProfileCollection">
            <summary>
            Used by the <see cref="T:CK.Plugin.Config.ISystemConfiguration"/> to keep an history of all user profiles used.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IUserProfileCollection.Find(System.String)">
            <summary>
            Gets a <see cref="T:CK.Plugin.Config.IUserProfile"/> by its address.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IUserProfileCollection.AddOrSet(System.String,System.String,CK.Plugin.Config.ConfigSupportType,System.Boolean)">
            <summary>
            Add or set a new <see cref="T:CK.Plugin.Config.IUserProfile"/> in the collection. If the profile already exists, it will be updated with the given data.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IUserProfileCollection.LastProfile">
            <summary>
            Gets the last <see cref="T:CK.Plugin.Config.IUserProfile"/> used.
            At runtime this profile is the current profile.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.PluginStatusCollection.Clear">
            <summary>
            Clears all plugin status configuration
            Sends Changing and Changed
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CK.Plugin.Config.PluginStatusCollection.OnDestroy(CK.Plugin.Config.PluginStatus)" -->
        <member name="P:CK.Plugin.Config.CollectionElementChangedEventArgs`1.Element">
            <summary>
            Gets wich element is concerned by the event.
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.ConfigUserAction">
            <summary>
            Defines the configuration made by the user for a plugin (or a service).
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.ConfigUserAction.None">
            <summary>
            User has not explictely started nor stopped the plugin.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.ConfigUserAction.Started">
            <summary>
            User explicitely started the plugin.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.ConfigUserAction.Stopped">
            <summary>
            User explicitely stopped the plugin.
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.SolvedConfigStatus">
            <summary>
            Represents a final configuration status that applies to a plugin or a service.
            Adds the Disabled notion to the <see cref="!:RunningRequirements"/> enumeration.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.SolvedConfigStatus.Optional">
            <summary>
            Plugin is optional.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.SolvedConfigStatus.OptionalTryStart">
            <summary>
            Plugin is optional, but if it exists it should be started.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.SolvedConfigStatus.MustExist">
            <summary>
            Plugin must exist.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.SolvedConfigStatus.MustExistTryStart">
            <summary>
            Plugin must exist and we should try to start it.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.SolvedConfigStatus.MustExistAndRun">
            <summary>
            Plugin must exist and must be started.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.SolvedConfigStatus.Disabled">
            <summary>
            Plugin is disabled.
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.RequirementLayerSerializer">
            <summary>
            Implements a <see cref="T:CK.Storage.IStructuredSerializer`1"/> for <see cref="T:CK.Plugin.RequirementLayer"/>.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.RequirementLayerSerializer.Instance">
            <summary>
            Gets the singleton instance for this <see cref="T:CK.Plugin.Config.RequirementLayerSerializer"/>.
            </summary>
        </member>
    </members>
</doc>
