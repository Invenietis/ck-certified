<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CK.Keyboard.Model</name>
    </assembly>
    <members>
        <member name="T:CK.Keyboard.Model.IZoneElement">
            <summary>
            Every objects living within a <see cref="T:CK.Keyboard.Model.IZone"/> support this interface.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.IKeyboardElement">
            <summary>
            Every objects living within a <see cref="T:CK.Keyboard.Model.IKeyboard"/> support this interface.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboardElement.Context">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKeyboardContext"/>. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboardElement.Keyboard">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKeyboard"/>. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IZoneElement.Zone">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IZone"/>. 
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.LayoutKeyPropertyChangedEventArgs">
            <summary>
            Defines a key property changed event argument when the <see cref="P:CK.Keyboard.Model.LayoutKeyPropertyChangedEventArgs.PropertyHolder"/>
            is one of the <see cref="T:CK.Keyboard.Model.ILayoutKey"/> of the <see cref="P:CK.Keyboard.Model.KeyEventArgs.Key"/>.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyPropertyChangedEventArgs">
            <summary>
            Defines a key property changed event argument: <see cref="P:CK.Keyboard.Model.KeyPropertyChangedEventArgs.PropertyName"/> holds the name of the 
            property that changed.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyEventArgs">
            <summary>
            Defines a key event argument: gives access to the key that is the 
            subject of the event.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyboardEventArgs">
            <summary>
            Defines a keyboard event argument: gives access to the keyboard that is the 
            subject of the event.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyboardContextEventArgs">
            <summary>
            Defines a context event: it simply offers an access to the context.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyEventArgs.Key">
            <summary>
            Gets the key concerned by the event.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.KeyPropertyChangedEventArgs.#ctor(CK.Keyboard.Model.IKeyPropertyHolder,System.String)">
            <summary>
            Initializes a new <see cref="T:CK.Keyboard.Model.KeyPropertyChangedEventArgs"/>. For specialized events, the <see cref="P:CK.Keyboard.Model.KeyPropertyChangedEventArgs.PropertyHolder"/> is typically 
            masked by a more precise signature.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyPropertyChangedEventArgs.PropertyHolder">
            <summary>
            Gets the object that holds the property.
            It can be this <see cref="P:CK.Keyboard.Model.KeyEventArgs.Key">key</see>, its <see cref="T:CK.Keyboard.Model.ILayoutKey"/> or one 
            of its <see cref="T:CK.Keyboard.Model.IKeyMode"/> or <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyPropertyChangedEventArgs.PropertyName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.LayoutKeyPropertyChangedEventArgs.PropertyHolder">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.ILayoutKey"/> that holds the property.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKeyCollection.LayoutZone">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.ILayoutZone"/> to which this collection belongs.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.IKeyProgram">
            <summary>
            Defines a "program", that is a simple list of commands expressed as strings.
            This notion of program is very simple but also very extensible. 
            </summary>
            <remarks>
            Since any "program" has to be expressed as texts (at least for serialization purposes), this
            design heaviliy relies on thie "script approach": any language, script, commands can be defined at 
            this level withou any constraint.</remarks>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyProgram.Context">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKeyboardContext"/>. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyProgram.Commands">
            <summary>
            Gets the list of the commands.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyProgram.CommandInserted">
            <summary>
            Fires when a new command is added.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyProgram.CommandUpdated">
            <summary>
            Fires when a command is replaced by an other.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyProgram.CommandDeleted">
            <summary>
            Fires when a command is deleted.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyProgram.CommandsCleared">
            <summary>
            Fires when all commands of a KeyProgram are deleted.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.IKeyModeCurrent">
            <summary>
            The current actual key is obtained by <see cref="P:CK.Keyboard.Model.IKey.Current"/>. It is one of the actual key 
            associated to the key and its <see cref="P:CK.Keyboard.Model.IKeyMode.Mode"/> may not be the same as
            the <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentMode"/>: in such case, <see cref="P:CK.Keyboard.Model.IKeyModeCurrent.IsFallBack"/> is true.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.IKeyMode">
            <summary>
            An actual key is the real <see cref="T:CK.Keyboard.Model.IKey"/> that is active depending on the <see cref="!:IKeyboard.Mode"/>. 
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.IKeyPropertyHolder">
            <summary>
            This abstraction is common to all objects attached to a key that can hold properties.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyPropertyHolder.Key">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKey"/> associated to this object.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyPropertyHolder.IsCurrent">
            <summary>
            Gets whether this object belongs to the "Current" scope: <see cref="T:CK.Keyboard.Model.IKey"/> and <see cref="T:CK.Keyboard.Model.ILayoutKey"/>
            objects are always current whereas for <see cref="T:CK.Keyboard.Model.IKeyMode"/>, it depends on current keyboard mode
            and for <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/>, it depends on both current keyboard mode and current keyboard layout.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyMode.ChangeMode(CK.Keyboard.Model.IKeyboardMode)">
            <summary>
            Attempts to change the <see cref="P:CK.Keyboard.Model.IKeyMode.Mode"/> associated to this actual key (the mode must not be 
            associated to another actual key).
            Raises the <see cref="E:CK.Keyboard.Model.IKey.KeyModeModeChanged"/> and <see cref="E:CK.Keyboard.Model.IKeyboard.KeyModeModeChanged"/> events on success.
            </summary>
            <param name="mode">New mode for this actual key. 
            It must be a <see cref="T:CK.Keyboard.Model.IKeyboardMode"/> from our <see cref="!:Context"/> otherwise an exception is thrown.</param>
            <returns>True if the mode has been successfully set. If the proposed mode is already associated to another
            actual key of this key, nothing is done and false is returned.</returns>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyMode.SwapModes(CK.Keyboard.Model.IKeyMode)">
            <summary>
            Swaps this <see cref="P:CK.Keyboard.Model.IKeyMode.Mode"/> with the one of <paramref name="other"/>.
            Raises the <see cref="E:CK.Keyboard.Model.IKey.KeyModeModeChanged"/> and <see cref="E:CK.Keyboard.Model.IKeyboard.KeyModeModeChanged"/> events first on 
            the other one and then for this actual key, both with an <see cref="T:CK.Keyboard.Model.KeyModeModeSwappedEventArgs"/> argument.
            </summary>
            <param name="other">The actual key which mode will be exchanged with this actual key.
            It must be one of the <see cref="T:CK.Keyboard.Model.IKeyMode"/> of this key otherwise an exception is thrown.
            </param>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyMode.Destroy">
            <summary>
            Destroys this <see cref="T:CK.Keyboard.Model.IKeyMode"/>.
            If <see cref="P:CK.Keyboard.Model.IKeyMode.Mode"/> is <see cref="!:IContext.EmptyMode"/>, an exception is thrown.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyMode.Mode">
            <summary>
            Gets the mode that defines this actual key for the key.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyMode.Enabled">
            <summary>
            Gets or sets a value indicating whether this actual key is enabled or not.
            The fact that the key is visible or not is driven by <see cref="P:CK.Keyboard.Model.ILayoutKeyMode.Visible"/>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyMode.Description">
            <summary>
            Gets or sets an optional description for this key. Can never be null.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyMode.UpLabel">
            <summary>
            Gets or sets the label that must be used when the key is up. 
            If set to null or empty, it will automatically default to <see cref="P:CK.Keyboard.Model.IKeyMode.DownLabel"/>.
            Can never be null.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyMode.DownLabel">
            <summary>
            Gets or sets the label that must be used when the key is down. 
            If set to null or empty, it will automatically default to <see cref="P:CK.Keyboard.Model.IKeyMode.UpLabel"/>.
            Can never be null.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyMode.OnKeyDownCommands">
            <summary>
            Gets the program that this key must raise when the key is <see cref="M:CK.Keyboard.Model.IKey.Push">pushed</see> down.
            May be empty but will never be null.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyMode.OnKeyUpCommands">
            <summary>
            Gets the program that this key must raise when the key is <see cref="M:IKey.Release">released</see>.
            May be empty but will never be null.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyMode.OnKeyPressedCommands">
            <summary>
            Gets the program that this key must raise when the key is pressed.
            A key is pressed when it is <see cref="M:CK.Keyboard.Model.IKey.Push">pushed</see> down and <see cref="M:CK.Keyboard.Model.IKey.Release">released</see>.
            May be empty but will never be null.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyModeCurrent.IsFallBack">
            <summary>
            Gets a boolean that states whether this actual key is not the exact one defined 
            for the <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentMode">current keyboard mode</see>.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyboardRenamedEventArgs">
            <summary>
            Event argument when a keyboard is renamed. Gives access to the keyboard and the previous name.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyboardContextErrorEventArgs">
            <summary>
            Defines the error event. This may wrap an exception or simply defines an error message.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyboardContextErrorEventArgs.Message">
            <summary>
            Gets the error message. It must be localized (if possible). When not specified 
            during construction, it is the <see cref="!:Exception.Message">message</see> of the <see cref="P:CK.Keyboard.Model.KeyboardContextErrorEventArgs.Exception"/>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyboardContextErrorEventArgs.Exception">
            <summary>
            Gets the exception. Can be null if only a <see cref="P:CK.Keyboard.Model.KeyboardContextErrorEventArgs.Message"/> is specified.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyModeCollection.FindBest(CK.Keyboard.Model.IKeyboardMode)">
            <summary>
            Finds the best <see cref="T:CK.Keyboard.Model.IKeyMode"/> given the specified mode.
            </summary>
            <param name="mode"><see cref="T:CK.Keyboard.Model.IKeyboardMode">Mode</see> for which an actual key must be found.</param>
            <returns>Never null since in the worst case the default actual key (the one with the <see cref="!:IContext.EmptyMode"/>) will be returned.</returns>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyModeCollection.Create(CK.Keyboard.Model.IKeyboardMode)">
            <summary>
            Finds or creates a <see cref="T:CK.Keyboard.Model.IKeyMode"/> into this collection.
            </summary>
            <param name="mode">The mode for which an <see cref="T:CK.Keyboard.Model.IKeyMode"/> must exist.</param>
            <returns>The <see cref="T:CK.Keyboard.Model.IKeyMode"/> either created or found.</returns>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyModeCollection.Key">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKey"/> that holds this collection.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyModeCollection.Item(CK.Keyboard.Model.IKeyboardMode)">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKeyMode"/> for the exact specified mode.
            </summary>
            <param name="mode"><see cref="T:CK.Keyboard.Model.IKeyboardMode">Mode</see> to find.</param>
            <returns>Null if no actual key exists for this exact mode.</returns>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyModeCollection.KeyModeCreated">
            <summary>
            Fires whenever a <see cref="T:CK.Keyboard.Model.IKeyMode"/> has been created.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyModeCollection.KeyModeDestroyed">
            <summary>
            Fires whenever a <see cref="T:CK.Keyboard.Model.IKeyMode"/> has been destroyed.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyModePropertyChangedEventArgs">
            <summary>
            Defines a key property changed event argument when the <see cref="P:CK.Keyboard.Model.KeyModePropertyChangedEventArgs.PropertyHolder"/>
            is one of the <see cref="T:CK.Keyboard.Model.IKeyMode"/> of the <see cref="P:CK.Keyboard.Model.KeyEventArgs.Key"/>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyModePropertyChangedEventArgs.PropertyHolder">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKeyMode"/> that holds the property.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.ILayoutCollection">
            <summary>
            Collection containing all the layouts corresponding to a keyboard.
            These layouts are automatically synchronized with the keyboard itself.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.ILayoutCollection.Create(System.String)">
            <summary>
            This method creates and adds a <see cref="T:CK.Keyboard.Model.ILayout"/> in this collection.
            The <see cref="E:CK.Keyboard.Model.ILayoutCollection.LayoutCreated"/> event is raised.
            </summary>
            <param name="name">The proposed layout name.</param>
            <returns>The new layout.</returns>
            <remarks>
            Note that its <see cref="P:CK.Keyboard.Model.ILayout.Name"/> may be different than <paramref name="name"/> if a layout already exists
            with the proposed name.
            </remarks>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutCollection.Context">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKeyboardContext"/> that hold this <see cref="T:CK.Keyboard.Model.ILayoutCollection"/>. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutCollection.Keyboard">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKeyboard"/> that hold this <see cref="T:CK.Keyboard.Model.ILayoutCollection"/>. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutCollection.Item(System.String)">
            <summary>
            Gets one of the <see cref="T:CK.Keyboard.Model.ILayout"/> by its name.
            </summary>
            <param name="name">Name of the layout to find.</param>
            <returns>The <see cref="T:CK.Keyboard.Model.ILayout"/> object or null if not found.</returns>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutCollection.Current">
            <summary>
            Gets or sets the current layout. When setting if the value is null it throws an ArgumentNullException.
            It also throws ApplicationException if the proposed layout does not belong to this collection.
            When the current layout changed, the <see cref="E:CK.Keyboard.Model.ILayoutCollection.CurrentChanged"/> event fires.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutCollection.Default">
            <summary>
            Gets the default layout: its <see cref="P:CK.Keyboard.Model.ILayout.Name"/> is an empty string and it 
            can not be <see cref="M:CK.Keyboard.Model.ILayout.Destroy">destroyed</see> nor <see cref="M:CK.Keyboard.Model.ILayout.Rename(System.String)">renamed</see>.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.ILayoutCollection.CurrentChanged">
            <summary>
            Fires whenever the <see cref="P:CK.Keyboard.Model.ILayoutCollection.Current"/> changed.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.ILayoutCollection.LayoutCreated">
            <summary>
            Fires whenever a <see cref="T:CK.Keyboard.Model.ILayout"/> has been created.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.ILayoutCollection.LayoutDestroyed">
            <summary>
            Fires whenever a <see cref="T:CK.Keyboard.Model.ILayout"/> has been destroyed.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.ILayoutCollection.LayoutRenamed">
            <summary>
            Fires whenever one of the layout contained in this collection has been renamed.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.ILayoutCollection.LayoutSizeChanged">
            <summary>
            Fires whenever <see cref="!:ILayout.Width"/> or <see cref="!:ILayout.Height"/> of one of 
            the layout contained in this collection changed.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.IZone">
            <summary>
            A zone has a unique <see cref="P:CK.Keyboard.Model.IZone.Name"/> inside a <see cref="T:CK.Keyboard.Model.IKeyboard"/> and holds a list of <see cref="P:CK.Keyboard.Model.IZone.Keys"/>.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IZone.Destroy">
            <summary>
            Destroys this zone. The default zone can not be destroyed.
            On success, the <see cref="!:IKeyboard.ZoneDestroyed"/> event is fired.
            </summary>
            <remarks>
            Once destroyed, a zone is no more functionnal and no method nor properties should be called.
            </remarks>
        </member>
        <member name="M:CK.Keyboard.Model.IZone.Rename(System.String)">
            <summary>
            Renames the keyboard zone. The <see cref="P:CK.Keyboard.Model.IZone.Name"/> is automatically numbered to avoid name clashes.
            It also throws an <see cref="T:System.ApplicationException"/> if the user tries to rename the default zone (its name
            must remain to the empty string).
            </summary>
            <param name="name">New name for the zone. Must not be null nor empty.</param>
            <returns>The new name.</returns>
        </member>
        <member name="P:CK.Keyboard.Model.IZone.Name">
            <summary>
            Gets the zone name.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IZone.IsDefault">
            <summary>
            Gets a value indicating whether this <see cref="T:CK.Keyboard.Model.IZone"/> is the default one.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IZone.CurrentLayout">
            <summary>
            Gets the current layout for this zone.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IZone.Keys">
            <summary>
            Gets the keys that this zone contains.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.ILayoutKeyModeCurrent">
            <summary>
            The current key layout is obtained by <see cref="P:CK.Keyboard.Model.ILayoutKey.Current"/>. It is one of the key layouts
            associated to the key and its <see cref="P:CK.Keyboard.Model.ILayoutKeyMode.Mode"/> may not be the same as
            the <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentMode"/>: in such case, <see cref="P:CK.Keyboard.Model.ILayoutKeyModeCurrent.IsFallBack"/> is true.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.ILayoutKeyMode">
            <summary>
            Defines the layout associated to a <see cref="T:CK.Keyboard.Model.IKeyMode"/>.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.ILayoutKeyMode.Destroy">
            <summary>
            Destroys this actual key layout.
            If the <see cref="P:CK.Keyboard.Model.ILayoutKeyMode.Mode"/> is <see cref="P:CK.Keyboard.Model.IKeyboardContextMode.EmptyMode">empty</see>, an 
            exception is thrown (default layout can not be destroyed).
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.ILayoutKeyMode.SwapModes(CK.Keyboard.Model.ILayoutKeyMode)">
            <summary>
            Swaps this <see cref="P:CK.Keyboard.Model.ILayoutKeyMode.Mode"/> with the one of <paramref name="other"/>.
            Raises the <see cref="E:CK.Keyboard.Model.IKey.KeyModeModeChanged"/> and <see cref="E:CK.Keyboard.Model.IKeyboard.KeyModeModeChanged"/> events first on 
            the other one and then for this actual key, both with an <see cref="T:CK.Keyboard.Model.KeyModeModeSwappedEventArgs"/> argument.
            </summary>
            <param name="other">The actual key which mode will be exchanged with this actual key.
            It must be one of the <see cref="T:CK.Keyboard.Model.IKeyMode"/> of this key otherwise an exception is thrown.
            </param>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKeyMode.Layout">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.ILayout"/> for which this actual key layout is defined. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKeyMode.LayoutKey">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.ILayoutKey"/> for which this actual key layout is defined. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKeyMode.Mode">
            <summary>
            Gets the mode that defines this actual key for the key.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKeyMode.Visible">
            <summary>
            Gets or sets whether the actual key is visible in this <see cref="P:CK.Keyboard.Model.ILayoutKeyMode.Layout"/>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKeyMode.X">
            <summary>
            Gets or sets the X coordinate of this key.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKeyMode.Y">
            <summary>
            Gets or sets the Y coordinate of this key.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKeyMode.Width">
            <summary>
            Gets or sets the width of this key.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKeyMode.Height">
            <summary>
            Gets or sets the height of this key.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKeyModeCurrent.IsFallBack">
            <summary>
            Gets a boolean that states whether this key layout is not the exact one defined 
            for the <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentMode">current keyboard mode</see>.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.LayoutKeyModeEventArgs">
            <summary>
            Defines a key layout mode event argument: gives access to the layout that is the 
            subject of the event.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.LayoutKeyEventArgs">
            <summary>
            Defines a key layout event argument: gives access to the key layout that is the 
            subject of the event.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.LayoutKeyEventArgs.LayoutKey">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.ILayoutKey"/> concerned by the event.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.LayoutKeyModeEventArgs.LayoutKeyMode">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/> concerned by the event.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyModeEventArgs">
            <summary>
            Defines a <see cref="T:CK.Keyboard.Model.IKeyMode"/> event argument: gives access to the actual key that is the 
            subject of the event.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyModeEventArgs.KeyMode">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKeyMode"/> concerned by the event.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.IZoneCollection">
            <summary>
            Collection containing all the zones corresponding to a keyboard.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IZoneCollection.Create(System.String)">
            <summary>
            This method creates and adds a <see cref="T:CK.Keyboard.Model.IZone"/> in this collection.
            The <see cref="E:CK.Keyboard.Model.IZoneCollection.ZoneCreated"/> event is raised.
            </summary>
            <param name="name">The proposed zone name.</param>
            <returns>The new zone.</returns>
            <remarks>
            Note that its <see cref="P:CK.Keyboard.Model.IZone.Name"/> may be different than <paramref name="name"/> if a zone already exists
            with the proposed name.
            </remarks>
        </member>
        <member name="P:CK.Keyboard.Model.IZoneCollection.Context">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKeyboardContext"/> that hold the <see cref="P:CK.Keyboard.Model.IZoneCollection.Keyboard"/>. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IZoneCollection.Keyboard">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKeyboard"/> that hold this <see cref="T:CK.Keyboard.Model.IZoneCollection"/>. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IZoneCollection.Item(System.String)">
            <summary>
            Gets one of the <see cref="T:CK.Keyboard.Model.IZone"/> by its name.
            </summary>
            <param name="name">Name of the zone to find.</param>
            <returns>The <see cref="T:CK.Keyboard.Model.IZone"/> object or null if not found.</returns>
        </member>
        <member name="P:CK.Keyboard.Model.IZoneCollection.Default">
            <summary>
            Gets the default zone: its <see cref="P:CK.Keyboard.Model.IZone.Name"/> is an empty string and it 
            can not be <see cref="M:CK.Keyboard.Model.IZone.Destroy">destroyed</see> nor <see cref="M:CK.Keyboard.Model.IZone.Rename(System.String)">renamed</see>.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IZoneCollection.ZoneCreated">
            <summary>
            Fires whenever a <see cref="T:CK.Keyboard.Model.IZone"/> has been created.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IZoneCollection.ZoneDestroyed">
            <summary>
            Fires whenever a <see cref="T:CK.Keyboard.Model.IZone"/> has been destroyed.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IZoneCollection.ZoneRenamed">
            <summary>
            Fires whenever one of the zone contained in this collection has been renamed.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.ILayoutZone">
            <summary>
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutZone.Keyboard">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKeyboard"/> of the <see cref="P:CK.Keyboard.Model.ILayoutZone.Zone"/>. 
            This avoids the choice between <see cref="P:CK.Keyboard.Model.IKeyboardElement.Keyboard">Zone.Keyboard</see>
            and <see cref="!:ILayout.Keyboard">Layout.Keyboard</see>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutZone.Zone">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IZone"/> to which this layout applies. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutZone.Layout">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.ILayout"/> to which this <see cref="T:CK.Keyboard.Model.ILayoutZone"/> belongs. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutZone.LayoutKeys">
            <summary>
            Gets the collection of key layouts: there is one <see cref="T:CK.Keyboard.Model.ILayoutKey"/> per <see cref="T:CK.Keyboard.Model.IKey"/>
            in a keyboard.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.CurrentKeyboardChangedEventArgs">
            <summary>
            Event argument when the current keyboard changed. Gives access to the previous keyboard.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.CurrentKeyboardChangedEventArgs.Previous">
            <summary>
            Previously active keyboard of the <see cref="!:IContext"/>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.CurrentKeyboardChangedEventArgs.Current">
            <summary>
            Current <see cref="!:IContext"/>'s keyboard.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.IKeyboardContext">
            <summary>
            Represents the execution context of all <see cref="T:CK.Keyboard.Model.IKeyboardElement"/>.
            This context is typically a subset of a more global application context.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.IKeyboardContextMode">
            <summary>
            Defines the registration root for any <see cref="T:CK.Keyboard.Model.IKeyboardMode"/> object.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyboardContextMode.ObtainMode(System.String)">
            <summary>
            Obtains a <see cref="T:CK.Keyboard.Model.IKeyboardMode"/> (either combined or atomic).
            </summary>
            <param name="modes">Atomic mode or modes separated by +.</param>
            <returns>A keyboard mode.</returns>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboardContextMode.EmptyMode">
            <summary>
            Gets the empty mode for this context. It corresponds to the empty string.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyboardContext.SetKeyboardContextDirty">
            <summary>
            Sets the <see cref="!:KeyboardContext"/> as dirty.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboardContext.Keyboards">
            <summary>
            Gets all available keyboards in this context.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboardContext.CurrentKeyboard">
            <summary>
            Gets <see cref="T:CK.Keyboard.Model.IKeyboard"/> that is currently in use.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboardContext.CurrentKeyboardChanged">
            <summary>
            Fires whenever the <see cref="P:CK.Keyboard.Model.IKeyboardContext.CurrentKeyboard"/> has changed.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboardContext.IsDirty">
            <summary>
            Gets whether the <see cref="T:CK.Keyboard.Model.IKeyboardContext"/> has been modified since the last time it has been loaded.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.ILayoutKeyModeCollection">
            <summary>
            This collection is hold by <see cref="T:CK.Keyboard.Model.ILayoutKey"/>.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.ILayoutKeyModeCollection.Create(CK.Keyboard.Model.IKeyboardMode)">
            <summary>
            Finds or creates a <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/> into this collection
            </summary>
            <param name="mode">The mode for which an <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/> must exist.</param>
            <returns>The <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/> either created or found.</returns>
        </member>
        <member name="M:CK.Keyboard.Model.ILayoutKeyModeCollection.FindBest(CK.Keyboard.Model.IKeyboardMode)">
            <summary>
            Returns the best key layout given a mode.
            </summary>
            <param name="mode"><see cref="T:CK.Keyboard.Model.IKeyboardMode">Mode</see> to find.</param>
            <returns>A non null layout since in the worst case the layout of the default actual key (empty mode) is returned.</returns>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKeyModeCollection.LayoutKey">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.ILayoutKey"/>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKeyModeCollection.Item(CK.Keyboard.Model.IKeyboardMode)">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/> for the given mode.
            </summary>
            <param name="mode"><see cref="T:CK.Keyboard.Model.IKeyboardMode">Mode</see> to find.</param>
            <returns>Null if not found.</returns>
        </member>
        <member name="E:CK.Keyboard.Model.ILayoutKeyModeCollection.LayoutKeyModeCreated">
            <summary>
            Fires whenever a <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/> has been created for this <see cref="P:CK.Keyboard.Model.ILayoutKeyModeCollection.LayoutKey"/>, regardless 
            of its layout.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.ILayoutKeyModeCollection.LayoutKeyModeModeChanged">
            <summary>
            Fires whenever a <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/> has been changed for this <see cref="P:CK.Keyboard.Model.ILayoutKeyModeCollection.LayoutKey"/>, regardless 
            of its layout.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.ILayoutKeyModeCollection.LayoutKeyModeDestroyed">
            <summary>
            Fires whenever a <see cref="!:IKeyModelayout"/> has been destroyed for this <see cref="P:CK.Keyboard.Model.ILayoutKeyModeCollection.LayoutKey"/>, regardless 
            of its layout.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyInteractionEventType">
            <summary>
            Defines the posible types of <see cref="T:CK.Keyboard.Model.KeyInteractionEventArgs"/>.
            </summary>
        </member>
        <member name="F:CK.Keyboard.Model.KeyInteractionEventType.Down">
            <summary>
            The key has been pushed down.
            </summary>
        </member>
        <member name="F:CK.Keyboard.Model.KeyInteractionEventType.Pressed">
            <summary>
            The key is pressed: it can be because of the user released it or because 
            a repeat occured.
            </summary>
        </member>
        <member name="F:CK.Keyboard.Model.KeyInteractionEventType.Up">
            <summary>
            The key has been released.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyInteractionEventArgs">
            <summary>
            Defines a key event argument related to user interaction: it can be one of the <see cref="T:CK.Keyboard.Model.KeyInteractionEventType"/>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyInteractionEventArgs.EventType">
            <summary>
            Gets the type of the event.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyInteractionEventArgs.Commands">
            <summary>
            Gets the commands asociated to the event.
            These commands are a copy of the key commands at the time of the event: any change can 
            be made to the <see cref="T:CK.Keyboard.Model.IKeyProgram"/> associated to the key without interfering
            with these commands.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.ILayoutZoneCollection">
            <summary>
            Defines the collection of zone layout. This collection is fully under the control of the keyboard zones since a 
            layout object (for zone and key) is automatically available for a any existing <see cref="T:CK.Keyboard.Model.ILayout"/> (their life cycle 
            is automatically handled by the kernel).
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutZoneCollection.Layout">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.ILayout"/> to which this collection belongs. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutZoneCollection.Item(System.String)">
            <summary>
            Gets the zone layout given the name of the zone.
            </summary>
            <param name="zoneName">Name of the zone in the keyboard.</param>
            <returns>The zone layout or null if no such zone exist.</returns>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutZoneCollection.Default">
            <summary>
            Gets the layout of the default zone (the default zone has an empty name).
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyboardModeChangingEventArgs">
            <summary>
            Defines a keyboard mode event argument.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyboardModeChangingEventArgs.Mode">
            <summary>
            The mode that will be set.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyboardModeChangingEventArgs.Cancel">
            <summary>
            Gets or sets whether the <see cref="P:CK.Keyboard.Model.KeyboardModeChangingEventArgs.Mode"/> must be set. Defaults to false.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyboardModeChangedEventArgs">
            <summary>
            Defines a keyboard mode event argument.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.ZoneRenamedEventArgs">
            <summary>
            Event argument when a keyboard zone is renamed. Gives access to the zone and the previous name.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.ZoneEventArgs">
            <summary>
            Defines a keyboard zone event: gives access to the <see cref="!:IContext"/>, the <see cref="T:CK.Keyboard.Model.IKeyboard">keyboard</see> 
            and <see cref="T:CK.Keyboard.Model.IZone">zone</see> that is the subject of the event.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ZoneEventArgs.Zone">
            <summary>
            Gets the zone.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.LayoutRenamedEventArgs">
            <summary>
            Event argument when a keyboard layout is renamed. Gives access to the layout and the previous name.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.LayoutEventArgs">
            <summary>
            Defines a keyboard layout event: gives access to the <see cref="!:IContext"/>, the <see cref="T:CK.Keyboard.Model.IKeyboard">keyboard</see> 
            and <see cref="T:CK.Keyboard.Model.ILayout">layout</see> that is the subject of the event.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.LayoutEventArgs.Layout">
            <summary>
            Gets the layout.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyPressedEventArgs">
            <summary>
            Defines a key event argument related to KeyPressed event.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyPressedEventArgs.RepeatCount">
            <summary>
            Get the repeat count: how many times the key was pressed.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.ILayout">
            <summary>
            A keyboard layout holds a collection of <see cref="T:CK.Keyboard.Model.ILayoutZone"/> that is automatically 
            synchronized with the keyboard to which it belongs.
            It is identified by a <see cref="P:CK.Keyboard.Model.ILayout.Name"/> that is unique in the scope of a keyboard.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.ILayout.Destroy">
            <summary>
            Destroys this layout. If the layout is the current layout in use, the default layout is set as the current layout (the default layout 
            can not be destroyed).
            On success, the <see cref="E:CK.Keyboard.Model.ILayoutCollection.LayoutDestroyed"/> event is fired.
            </summary>
            <remarks>
            Once destroyed, a layout is no more functionnal and no method nor properties should be called.
            </remarks>
        </member>
        <member name="M:CK.Keyboard.Model.ILayout.Rename(System.String)">
            <summary>
            Renames the keyboard layout. The <see cref="P:CK.Keyboard.Model.ILayout.Name"/> is automatically numbered to avoid name clashes.
            It also throws an exception if the user tries to rename the default layout (its name
            must always be the empty string).
            </summary>
            <param name="name">New name for the layout. Must not be null nor empty.</param>
            <returns>The new name.</returns>
        </member>
        <member name="P:CK.Keyboard.Model.ILayout.Name">
            <summary>
            Gets the layout name.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayout.IsDefault">
            <summary>
            Gets whether this <see cref="T:CK.Keyboard.Model.ILayout"/> is the default one.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayout.IsCurrent">
            <summary>
            Gets whether this <see cref="T:CK.Keyboard.Model.ILayout"/> is the current one.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayout.W">
            <summary>
            Gets or sets the width of this layout. Key layouts are not concerned by this change.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayout.H">
            <summary>
            Gets or sets the height of this layout. Key layouts are not concerned by this change.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayout.LayoutZones">
            <summary>
            Gets the collection of layouts: there is one <see cref="T:CK.Keyboard.Model.ILayoutZone"/> per <see cref="T:CK.Keyboard.Model.IZone"/>
            in the <see cref="N:CK.Keyboard"/>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayout.RequirementLayer">
            <summary>
            Gets the <see cref="P:CK.Keyboard.Model.ILayout.RequirementLayer"/> of this ILayout.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.LayoutKeyModeModeSwappedEventArgs">
            <summary>
            Defines the argument of event that fires when two key layout modes swap their modes.
            This happens only during the edition of a keyboard: the event is raised only 
            by <see cref="M:CK.Keyboard.Model.ILayoutKeyMode.SwapModes(CK.Keyboard.Model.ILayoutKeyMode)"/> method.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.LayoutKeyModeModeChangedEventArgs">
            <summary>
            Defines the argument of event that fires when the mode of a key layout mode
            is modified. This happens only during the edition of a keyboard: the event is raised 
            only by <see cref="!:ILayoutKeyMode.ChangeMode"/> and <see cref="M:CK.Keyboard.Model.ILayoutKeyMode.SwapModes(CK.Keyboard.Model.ILayoutKeyMode)"/>
            (note that when swapping the more specialized <see cref="T:CK.Keyboard.Model.LayoutKeyModeModeSwappedEventArgs"/> is used).
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.LayoutKeyModeModeChangedEventArgs.PreviousMode">
            <summary>
            Gets the previous <see cref="T:CK.Keyboard.Model.IKeyboardMode">mode</see> of the key layout.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.LayoutKeyModeModeSwappedEventArgs.SwappedKey">
            <summary>
            Gets the actual key that hold the <see cref="P:CK.Keyboard.Model.LayoutKeyModeModeChangedEventArgs.PreviousMode">previous mode</see>.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyMovedEventArgs">
            <summary>
            The event argument when a key index changed.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyMovedEventArgs.PreviousIndex">
            <summary>
            Gets the previous index of the <see cref="P:CK.Keyboard.Model.KeyEventArgs.Key">key</see> in the zone.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.IKeyCollection">
            <summary>
            The collection of <see cref="T:CK.Keyboard.Model.IKey"/> accessible from <see cref="P:CK.Keyboard.Model.IZone.Keys"/>.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyCollection.Create">
            <summary>
            Creates a new <see cref="T:CK.Keyboard.Model.IKey"/> at the end of this collection.
            </summary>
            <returns>The newly created key.</returns>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyCollection.Create(System.Int32)">
            <summary>
            Creates a new <see cref="T:CK.Keyboard.Model.IKey"/> at a specified position.
            </summary>
            <param name="index">Index of the new key.</param>
            <returns>The newly created key.</returns>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyCollection.Zone">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IZone"/> to which these keys belong.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyCollection.KeyCreated">
            <summary>
            Fires whenever a new <see cref="T:CK.Keyboard.Model.IKey"/> has been created.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyCollection.KeyDestroyed">
            <summary>
            Fires whenever a <see cref="T:CK.Keyboard.Model.IKey"/> has been destroyed.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyCollection.KeyMoved">
            <summary>
            Fires whenever the <see cref="P:CK.Keyboard.Model.IKey.Index">index</see> of one of the key contained in this collection has changed.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.IKeyboardMode">
            <summary>
            Defines the modes of a keyboard. A mode is an immutable object, associated to a unique string, that can be atomic ("Alt", "Home", "Ctrl") or 
            combined ("Alt+Ctrl", "Alt+Ctrl+Home"). The only way to obtain a <see cref="T:CK.Keyboard.Model.IKeyboardMode"/> is to call <see cref="M:CK.Keyboard.Model.IKeyboardContextMode.ObtainMode(System.String)"/> (from 
            a string) or to use one of the available combination methods (<see cref="M:CK.Keyboard.Model.IKeyboardMode.Add(CK.Keyboard.Model.IKeyboardMode)"/>, <see cref="M:CK.Keyboard.Model.IKeyboardMode.Remove(CK.Keyboard.Model.IKeyboardMode)"/>, <see cref="M:CK.Keyboard.Model.IKeyboardMode.Toggle(CK.Keyboard.Model.IKeyboardMode)"/> or <see cref="M:CK.Keyboard.Model.IKeyboardMode.Intersect(CK.Keyboard.Model.IKeyboardMode)"/> ).
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyboardMode.ContainsAll(CK.Keyboard.Model.IKeyboardMode)">
            <summary>
            Checks if the each and every atomic modes of <paramref name="mode"/> exists in this mode.
            </summary>
            <param name="mode">The mode(s) to find.</param>
            <returns>True if all the specified modes appear in this mode.</returns>
            <remarks>
            Note that <see cref="!:IContext.EmptyMode"/> is contained (in the sense of this ContainsAll method) by definition in any mode 
            (including itself): this is the opposite of the <see cref="M:CK.Keyboard.Model.IKeyboardMode.ContainsOne(CK.Keyboard.Model.IKeyboardMode)"/> method.
            </remarks>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyboardMode.ContainsOne(CK.Keyboard.Model.IKeyboardMode)">
            <summary>
            Checks if one of the atomic modes of <paramref name="mode"/> exists in this mode.
            </summary>
            <param name="mode">The mode(s) to find.</param>
            <returns>Returns true if one of the specified modes appears in this mode.</returns>
            <remarks>
            When true, this ensures that <see cref="M:CK.Keyboard.Model.IKeyboardMode.Intersect(CK.Keyboard.Model.IKeyboardMode)"/>( <paramref name="mode"/> ) != <see cref="P:CK.Keyboard.Model.IKeyboardContextMode.EmptyMode"/>. 
            The empty mode is not contained (in the sense of this ContainsOne method) in any mode (including itself). This is the opposite
            as the <see cref="M:CK.Keyboard.Model.IKeyboardMode.ContainsAll(CK.Keyboard.Model.IKeyboardMode)"/> method.
            </remarks>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyboardMode.Remove(CK.Keyboard.Model.IKeyboardMode)">
            <summary>
            Removes the <see cref="T:CK.Keyboard.Model.IKeyboardMode"/> specified by the parameter. 
            </summary>
            <param name="mode">Mode(s) to remove.</param>
            <returns>The resulting mode.</returns>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyboardMode.Add(CK.Keyboard.Model.IKeyboardMode)">
            <summary>
            Adds the <see cref="T:CK.Keyboard.Model.IKeyboardMode"/> specified by the parameter. 
            </summary>
            <param name="mode">Mode(s) to add.</param>
            <returns>The resulting mode.</returns>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyboardMode.Toggle(CK.Keyboard.Model.IKeyboardMode)">
            <summary>
            Removes (resp. adds) the atomic modes of <paramref name="mode" /> depending 
            on whether they exist (resp. do not exist) in this mode. 
            </summary>
            <param name="mode">Mode(s) to toggle.</param>
            <returns>The resulting mode.</returns>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyboardMode.Intersect(CK.Keyboard.Model.IKeyboardMode)">
            <summary>
            Removes the atomic modes from this mode that do not appear in <paramref name="mode"/>.
            </summary>
            <param name="mode">Mode(s) that must be kept.</param>
            <returns>The resulting mode.</returns>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboardMode.Context">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKeyboardContextMode"/>. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboardMode.AtomicModes">
            <summary>
            Gets the atomic modes that this mode contains.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboardMode.IsEmpty">
            <summary>
            Gets a boolean indicating whether this mode is the empty mode (<see cref="P:CK.Keyboard.Model.IKeyboardMode.AtomicModes"/> is empty
            and <see cref="P:CK.Keyboard.Model.IKeyboardMode.Fallbacks"/> contains only itself).
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboardMode.IsAtomic">
            <summary>
            Gets a boolean indicating whether this mode contains zero 
            (the empty mode is considered as an atomic mode) or only one atomic mode.
            </summary>
            <remarks>
            For atomic modes (an the empty mode itself), <see cref="P:CK.Keyboard.Model.IKeyboardMode.Fallbacks"/> contains only the <see cref="P:CK.Keyboard.Model.IKeyboardContextMode.EmptyMode"/>.
            </remarks>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboardMode.Fallbacks">
            <summary>
            Gets the list of fallbacks to consider for this mode ordered from best to worst.
            The <see cref="P:CK.Keyboard.Model.IKeyboardContextMode.EmptyMode"/> always ends this list.
            </summary>
            <remarks>
            For atomic modes (an the empty mode itself), <see cref="P:CK.Keyboard.Model.IKeyboardMode.Fallbacks"/> contains only the <see cref="P:CK.Keyboard.Model.IKeyboardContextMode.EmptyMode"/>.
            </remarks>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyboardCollection.Create(System.String)">
            <summary>
            This method creates and adds a <see cref="T:CK.Keyboard.Model.IKeyboard"/> into this context.
            The <see cref="E:CK.Keyboard.Model.IKeyboardCollection.KeyboardCreated"/> event is raised.
            </summary>
            <param name="name">The proposed keyboard name.</param>
            <returns>The new keyboard.</returns>
            <remarks>
            If the <see cref="!:IContext.CurrentKeyboard"/> is null, the newly created <see cref="T:CK.Keyboard.Model.IKeyboard"/> becomes the current one.
            Note that its <see cref="P:CK.Keyboard.Model.IKeyboard.Name"/> may be different than <paramref name="name"/> if a keyboard already exists
            with the proposed name.
            </remarks>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyboardCollection.Clear">
            <summary>
            Destroys all the keyboards from this collection. <see cref="!:IContext.CurrentKeyboard"/> becomes null.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboardCollection.Context">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKeyboardContext"/> to which these keyboards belong.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboardCollection.Item(System.String)">
            <summary>
            Gets one of the <see cref="T:CK.Keyboard.Model.IKeyboard"/> by its name.
            </summary>
            <param name="name">Name of the keyboard to find.</param>
            <returns>The <see cref="T:CK.Keyboard.Model.IKeyboard"/> object or null if not found.</returns>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboardCollection.Current">
            <summary>
            Gets or sets the current <see cref="T:CK.Keyboard.Model.IKeyboard"/> for this context.
            The new keyboard must be null or belong to this collection otherwise an <see cref="T:System.ApplicationException"/>
            is thrown.
            </summary>
            <seealso cref="E:CK.Keyboard.Model.IKeyboardCollection.CurrentChanged"/>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboardCollection.CurrentChanged">
            <summary>
            Fires whenever the <see cref="P:CK.Keyboard.Model.IKeyboardCollection.Current"/> changed.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboardCollection.KeyboardCreated">
            <summary>
            Fires whenever a <see cref="T:CK.Keyboard.Model.IKeyboard"/> has been created.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboardCollection.KeyboardDestroyed">
            <summary>
            Fires whenever a <see cref="T:CK.Keyboard.Model.IKeyboard"/> has been destroyed.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboardCollection.KeyboardRenamed">
            <summary>
            Fires whenever one of the keyboard contained in this collection has been renamed.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyModeModeSwappedEventArgs">
            <summary>
            Defines the argument of event that fires when two actual keys swap their modes.
            This happens only during the edition of a keyboard: the event is raised only 
            by <see cref="M:CK.Keyboard.Model.IKeyMode.SwapModes(CK.Keyboard.Model.IKeyMode)"/> method.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyModeModeChangedEventArgs">
            <summary>
            Defines the argument of event that fires when the mode of an actual key
            is modified. This happens only during the edition of a keyboard: the event is raised 
            only by <see cref="M:CK.Keyboard.Model.IKeyMode.ChangeMode(CK.Keyboard.Model.IKeyboardMode)"/> and <see cref="M:CK.Keyboard.Model.IKeyMode.SwapModes(CK.Keyboard.Model.IKeyMode)"/>
            (note that when swapping the more specialized <see cref="T:CK.Keyboard.Model.KeyModeModeSwappedEventArgs"/> is used).
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyModeModeChangedEventArgs.PreviousMode">
            <summary>
            Gets the previous <see cref="T:CK.Keyboard.Model.IKeyboardMode">mode</see> of the actual key.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyModeModeSwappedEventArgs.SwappedKey">
            <summary>
            Gets the actual key that hold the <see cref="P:CK.Keyboard.Model.KeyModeModeChangedEventArgs.PreviousMode">previous mode</see>.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyboardCurrentLayoutChangedEventArgs">
            <summary>
            Event argument when the current layout of a keyboard changed. Gives access to the previous layout.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyboardCurrentLayoutChangedEventArgs.Previous">
            <summary>
            Previously active layout of the <see cref="P:CK.Keyboard.Model.KeyboardEventArgs.Keyboard">keyboard</see>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyboardCurrentLayoutChangedEventArgs.Current">
            <summary>
            Current keyboard's layout.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.ILayoutKey">
            <summary>
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKey.Layout">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.ILayout"/> that hold this key layout. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKey.LayoutZone">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.ILayoutZone"/> of the <see cref="!:Zone"/>'s <see cref="!:Key"/>. 
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKey.LayoutKeyModes">
            <summary>
            Gets the collection of <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/> for this <see cref="T:CK.Keyboard.Model.ILayoutKey"/>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.ILayoutKey.Current">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.ILayoutKeyModeCurrent"/> (depends on the <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentMode"/>).
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.IKeyboard">
            <summary>
            Defines virtual keyboard.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyboard.Destroy">
            <summary>
            Destroys this keyboard.
            Once destroyed, a keyboard is no more functionnal and no method nor properties should be called.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IKeyboard.Rename(System.String)">
            <summary>
            Renames this <see cref="T:CK.Keyboard.Model.IKeyboard"/>: this may fail or an automatic renaming may occur 
            in order to maintain the unicity of keyboard's name in a <see cref="!:IContext"/>.
            </summary>
            <param name="name">The new name.</param>
            <returns>The final name of this keyboard.</returns>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboard.Name">
            <summary>
            Gets this <see cref="T:CK.Keyboard.Model.IKeyboard"/> name. This name is unique in the <see cref="!:Context"/>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboard.AvailableMode">
            <summary> 
            Gets or sets the available modes for this keyboard: the <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentMode"/> is necessarily a subset 
            of this modes.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboard.CurrentMode">
            <summary>
            Gets or sets the current mode. Any atomic mode that do not exist in <see cref="P:CK.Keyboard.Model.IKeyboard.AvailableMode"/> are automatically removed
            from this property.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.AvailableModeChanging">
            <summary>
            Fires while trying to set <see cref="P:CK.Keyboard.Model.IKeyboard.AvailableMode"/> to a new value. The event argument can be used to reject the change.
            </summary>
            <remarks>
            Even if the <see cref="P:CK.Keyboard.Model.KeyboardModeChangingEventArgs.Cancel"/> is let to false (ie. no listeners rejects the change), 
            the change can be cancelled by <see cref="E:CK.Keyboard.Model.IKeyboard.CurrentModeChanging"/> if the new available modes has an impact on the <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentMode"/>
            (by removing some of its atomic modes).
            </remarks>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.AvailableModeChanged">
            <summary>
            Fires when <see cref="P:CK.Keyboard.Model.IKeyboard.AvailableMode"/> changed.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.CurrentModeChanging">
            <summary>
            Fires while trying to set <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentMode"/>.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.CurrentModeChanged">
            <summary>
            Fires when <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentMode"/> changed.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboard.Layouts">
            <summary>
            Collection of the <see cref="T:CK.Keyboard.Model.ILayout"/> hold by this keyboard.
            This collection maintains the current layout and exposes events that can be used 
            to track layout related changes.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboard.CurrentLayout">
            <summary>
            Gets or sets the current <see cref="T:CK.Keyboard.Model.ILayout"/> of this <see cref="T:CK.Keyboard.Model.IKeyboard"/>. 
            Simply relays to <see cref="P:CK.Keyboard.Model.IKeyboard.Layouts">Layouts</see>.<see cref="P:CK.Keyboard.Model.ILayoutCollection.Current">Current</see>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboard.RequirementLayer">
            <summary>
            Gets the <see cref="P:CK.Keyboard.Model.IKeyboard.RequirementLayer"/> of this IKeyboard.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.CurrentLayoutChanged">
            <summary>
            Fires whenever the <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentLayout"/> changed. 
            It is the same event as <see cref="P:CK.Keyboard.Model.IKeyboard.Layouts">Layouts</see>.<see cref="E:CK.Keyboard.Model.ILayoutCollection.CurrentChanged">CurrentChanged</see>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboard.Zones">
            <summary>
            Collection of the <see cref="T:CK.Keyboard.Model.IZone"/> hold by this keyboard.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKeyboard.Keys">
            <summary>
            Gets all the <see cref="T:CK.Keyboard.Model.IKey"/> that this keyboard contains.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.KeyCreated">
            <summary>
            Fires when a new <see cref="T:CK.Keyboard.Model.IKey">key</see> has been created in a one 
            of this keyboard's <see cref="P:CK.Keyboard.Model.IKeyboard.Zones">zone</see>.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.KeyDestroyed">
            <summary>
            Fires when a <see cref="T:CK.Keyboard.Model.IKey">key</see> in a one of this keyboard's <see cref="P:CK.Keyboard.Model.IKeyboard.Zones">zone</see>
            has been <see cref="M:CK.Keyboard.Model.IKey.Destroy">destroyed</see>.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.KeyMoved">
            <summary>
            Fires when a <see cref="T:CK.Keyboard.Model.IKey">key</see>.<see cref="P:CK.Keyboard.Model.IKey.Index">Index</see> has changed in a one 
            of this keyboard's <see cref="P:CK.Keyboard.Model.IKeyboard.Zones">zone</see>.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.KeyModeCreated">
            <summary>
            Fires when a new <see cref="T:CK.Keyboard.Model.IKeyMode">actual key</see> has been created for one 
            of this keyboard's keys.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.KeyModeDestroyed">
            <summary>
            Fires when a <see cref="T:CK.Keyboard.Model.IKeyMode">actual key</see> in a one of this keyboard's keys 
            has been <see cref="M:CK.Keyboard.Model.IKey.Destroy">destroyed</see>.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.KeyPropertyChanged">
            <summary>
            Fires whenever a property of this <see cref="T:CK.Keyboard.Model.IKey"/> or its <see cref="!:Current"/> key mode
            or its <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentLayout"/> or its <see cref="!:CurrentActualLayout"/> changed.
            </summary>
            <remarks>
            <para>
            This event handles the change of real properties (such as the <see cref="P:CK.Keyboard.Model.ILayoutKeyMode.X">X</see> coordinate
            of the current key mode layout) but also the change of the <see cref="!:Current"/> actual key itself (when setting a 
            new <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentMode"/>, if and only if the new mode does change the current actual key)
            or the change of the <see cref="!:CurrentActualLayout"/> (when setting a new <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentMode"/>, if and only if 
            the new mode does change the current actual key layout).
            </para>
            <para>
            A contrario, changes of the <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentLayout">current layout (for the whole keyboard)</see> do 
            not trigger this event: layout changes must be tracked at the keyboard level.
            </para>
            </remarks>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.KeyOtherPropertyChanged">
            <summary>
            Fires whenever a property of one of the non current <see cref="!:KeyModes"/> or one
            of the non current <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/> changed.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.KeyModeModeChanged">
            <summary>
            Fires whenever the mode of one of our actual keys changed.
            The event argument may be an instance of the <see cref="T:CK.Keyboard.Model.KeyModeModeSwappedEventArgs"/> class if
            the change is the result of a call to <see cref="M:CK.Keyboard.Model.IKeyMode.SwapModes(CK.Keyboard.Model.IKeyMode)"/> instead of <see cref="M:CK.Keyboard.Model.IKeyMode.ChangeMode(CK.Keyboard.Model.IKeyboardMode)"/>.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.LayoutKeyModeCreated">
            <summary>
            Fires whenever a <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/> has been created.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.LayoutKeyModeDestroyed">
            <summary>
            Fires whenever a <see cref="!:IKeyModelayout"/> has been destroyed.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.KeyDown">
            <summary>
            Fires whenever a <see cref="!:Key"/> is down.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.KeyUp">
            <summary>
            Fires whenever a <see cref="!:Key"/> is up.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKeyboard.KeyPressed">
            <summary>
            Fires whenever a <see cref="!:Key"/> is pressed.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.IKey">
            <summary>
            Implements a key. A key belongs to a <see cref="T:CK.Keyboard.Model.IZone"/> and holds a collection
            of <see cref="T:CK.Keyboard.Model.IKeyMode"/>.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IKey.Destroy">
            <summary>
            Destroys this key.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IKey.Push">
            <summary>
            Pushes this key. Event <see cref="E:CK.Keyboard.Model.IKey.KeyDown"/> is raised.
            Must be called only when the key is up (<see cref="P:CK.Keyboard.Model.IKey.IsDown"/> is false) otherwise an exception is thrown.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IKey.RepeatPressed">
            <summary>
            Repeat the <see cref="E:CK.Keyboard.Model.IKey.KeyPressed"/> event. The event repeat count is incremented at each call. 
            This is typically called by some sort of "repeater" plugin.
            Must be called only when the key is down otherwise an exception is thrown.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IKey.Release">
            <summary>
            Releases the key and emits a <see cref="E:CK.Keyboard.Model.IKey.KeyPressed"/>.
            Must be called only when the key is up otherwise an exception is thrown.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Model.IKey.Release(System.Boolean)">
            <summary>
            Releases the key.
            Must be called only when the key is up otherwise an exception is thrown.
            </summary>
            <param name="doPress">True to trigger the <see cref="E:CK.Keyboard.Model.IKey.KeyPressed"/> event.</param>
        </member>
        <member name="E:CK.Keyboard.Model.IKey.KeyPropertyChanged">
            <summary>
            Fires whenever a property of this <see cref="T:CK.Keyboard.Model.IKey"/> or its <see cref="P:CK.Keyboard.Model.IKey.Current"/> actual key 
            or its <see cref="P:CK.Keyboard.Model.IKey.CurrentLayout"/> or its <see cref="!:CurrentActualLayout"/> changed.
            </summary>
            <remarks>
            <para>
            This event handles the change of real properties (such as the <see cref="P:CK.Keyboard.Model.ILayoutKeyMode.X">X</see> coordinate
            of the current actual key layout) but also the change of the <see cref="P:CK.Keyboard.Model.IKey.Current"/> actual key itself (when setting a 
            new <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentMode"/>, if and only if the new mode does change the current actual key)
            or the change of the <see cref="!:CurrentActualLayout"/> (when setting a new <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentMode"/>, if and only if 
            the new mode does change the current actual key layout).
            </para>
            <para>
            A contrario, changes of the <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentLayout">current layout (for the whole keyboard)</see> do 
            not trigger this event: layout changes must be tracked at the keyboard level.
            </para>
            </remarks>
        </member>
        <member name="E:CK.Keyboard.Model.IKey.KeyOtherPropertyChanged">
            <summary>
            Fires whenever a property of one of the non current <see cref="P:CK.Keyboard.Model.IKey.KeyModes"/> or one
            of the non current <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/> changed.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKey.KeyModeModeChanged">
            <summary>
            Fires whenever the mode of one of our <see cref="P:CK.Keyboard.Model.IKey.KeyModes"/> changed.
            The event argument may be an instance of the <see cref="T:CK.Keyboard.Model.KeyModeModeSwappedEventArgs"/> class if
            the change is the result of a call to <see cref="M:CK.Keyboard.Model.IKeyMode.SwapModes(CK.Keyboard.Model.IKeyMode)"/> instead of <see cref="M:CK.Keyboard.Model.IKeyMode.ChangeMode(CK.Keyboard.Model.IKeyboardMode)"/>.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKey.KeyDown">
            <summary>
            Fires whenever a <see cref="!:Key"/> is down.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKey.KeyPressed">
            <summary>
            Fires whenever a <see cref="!:Key"/> is pressed.
            </summary>
        </member>
        <member name="E:CK.Keyboard.Model.IKey.KeyUp">
            <summary>
            Fires whenever a <see cref="!:Key"/> is up.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKey.Index">
            <summary>
            Gets or sets the index of this <see cref="T:CK.Keyboard.Model.IKey"/> in its <see cref="!:Zone"/>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKey.IsDown">
            <summary>
            True if this key is down.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKey.KeyModes">
            <summary>
            Gets the collection of <see cref="T:CK.Keyboard.Model.IKeyMode"/> associated to this <see cref="T:CK.Keyboard.Model.IKey"/>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKey.CurrentLayout">
            <summary>
            Gets the current key <see cref="T:CK.Keyboard.Model.ILayoutKey"/> (depends on the current keyboard layout).
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.IKey.Current">
            <summary>
            Gets the current actual key (depends on the current <see cref="P:CK.Keyboard.Model.IKeyboard.CurrentMode">mode</see>).
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.LayoutKeyModePropertyChangedEventArgs">
            <summary>
            Defines a key property changed event argument when the <see cref="P:CK.Keyboard.Model.LayoutKeyModePropertyChangedEventArgs.PropertyHolder"/>
            is one of the <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/> of the <see cref="P:CK.Keyboard.Model.KeyEventArgs.Key"/>.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.LayoutKeyModePropertyChangedEventArgs.PropertyHolder">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.ILayoutKeyMode"/> that holds the property.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyProgramCommandsEventType">
            <summary>
            Defines the possible types of <see cref="T:CK.Keyboard.Model.KeyProgramCommandsEventArgs"/>.
            </summary>
        </member>
        <member name="F:CK.Keyboard.Model.KeyProgramCommandsEventType.Inserted">
            <summary>
            A new command has been added to the command list.
            </summary>
        </member>
        <member name="F:CK.Keyboard.Model.KeyProgramCommandsEventType.Updated">
            <summary>
            A command has been modified.
            </summary>
        </member>
        <member name="F:CK.Keyboard.Model.KeyProgramCommandsEventType.Deleted">
            <summary>
            A command has been removed.
            </summary>
        </member>
        <member name="F:CK.Keyboard.Model.KeyProgramCommandsEventType.Cleared">
            <summary>
            All commands have been removed.
            <see cref="P:CK.Keyboard.Model.KeyProgramCommandsEventArgs.Index"/> is set to -1.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.KeyProgramCommandsEventArgs">
            <summary>
            Defines a KeyProgram event argument : <see cref="P:CK.Keyboard.Model.KeyProgramCommandsEventArgs.Index"/> represents the index 
            of the command concerned by the event, in the command list
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyProgramCommandsEventArgs.KeyProgram">
            <summary>
            Gets the <see cref="T:CK.Keyboard.Model.IKeyProgram"/> that has been modified.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyProgramCommandsEventArgs.Index">
            <summary>
            Represents the index in the command list where the command was create, updated, or delete.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Model.KeyProgramCommandsEventArgs.EventType">
            <summary>
            Gets the type of event.
            </summary>
        </member>
        <member name="T:CK.Keyboard.Model.IKeyboardService">
            <summary>
            Defines virtual keyboard service.
            </summary>
        </member>
    </members>
</doc>
