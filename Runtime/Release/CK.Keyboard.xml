<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CK.Keyboard</name>
    </assembly>
    <members>
        <member name="T:CK.Keyboard.ModeObjectRoot`2">
            <summary>
            This class embbeds a linked chain, it may be seen as this :
            the default mode is the very first item. then, modes are sorted in a descending way : the "greater" the mode, the closer it will be to the default mode.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TI"></typeparam>
        </member>
        <member name="M:CK.Keyboard.ModeObjectRoot`2.IsBestCurrentMode(CK.Keyboard.Model.IKeyboardMode)">
            <summary>
            If the proposed mode is greater than the current object's mode,
            and contains only atomic modes of the current keyboard mode: the proposed mode will be a better current.
            </summary>
            <param name="mode">Proposed mode.</param>
            <returns>True if the <paramref name="mode"/> should replace the actual current object.</returns>
        </member>
        <member name="T:CK.Keyboard.ModeObjectRoot`2.E`3">
            <summary>
            Enumerator implementation with an exposed TOut type.
            </summary>
        </member>
        <member name="T:CK.Keyboard.ModeObjectRoot`2.EO">
            <summary>
            Enumerable implementation.
            </summary>
        </member>
        <member name="M:CK.Keyboard.KeyboardContext.ObtainMode(System.Collections.Generic.List{CK.Keyboard.Model.IKeyboardMode})">
            <summary>
            Obtains a mode from a list of atomic (already sorted) modes.
            Used by the Add, Toggle, Remove, Intersect methods.
            </summary>
        </member>
        <member name="M:CK.Keyboard.KeyboardContext.ObtainMode(CK.Keyboard.Model.IKeyboardMode[],System.Int32)">
            <summary>
            Obtains a mode from a list of atomic (already sorted) modes.
            Used by fall back generation.
            </summary>
        </member>
        <member name="M:CK.Keyboard.KeyboardContext.EnsureUnique(System.String,System.String,System.Predicate{System.String})">
            <summary>
            Computes a unique name (suffixed with '(n)' where n is a number) given 
            a function that check existence of proposed names.
            It relies on <see cref="P:CK.R.KeyboardAutoNumPattern"/> and <see cref="P:CK.R.KeyboardAutoNumRegex"/> resources
            to offer culture dependant naming.
            </summary>
            <param name="newName">Proposed name.</param>
            <param name="currentName">Current name (null if none).</param>
            <param name="exists">Function that check the existence.</param>
            <returns>A unique name based on proposed name.</returns>
        </member>
        <member name="M:CK.Keyboard.LayoutKey.OnActualLayoutPropertyChanged(CK.Keyboard.Model.LayoutKeyModePropertyChangedEventArgs)">
            <summary>
            Internal relay for strongly typed actual key layout changes.
            </summary>
        </member>
        <member name="T:CK.Keyboard.KeyboardMode">
            <summary>
            Implements <see cref="T:CK.Keyboard.Model.IKeyboardMode"/>.
            </summary>
        </member>
        <member name="M:CK.Keyboard.KeyboardMode.#ctor(CK.Keyboard.Model.IKeyboardContext)">
            <summary>
            Initializes the new empty mode of a Context.
            </summary>
        </member>
        <member name="M:CK.Keyboard.KeyboardMode.#ctor(CK.Keyboard.Model.IKeyboardContext,System.String)">
            <summary>
            Initializes a new atomic mode.
            </summary>
        </member>
        <member name="M:CK.Keyboard.KeyboardMode.#ctor(CK.Keyboard.Model.IKeyboardContext,System.String,CK.Core.IReadOnlyList{CK.Keyboard.Model.IKeyboardMode})">
            <summary>
            Initializes a new combined mode.
            </summary>
        </member>
        <member name="M:CK.Keyboard.KeyboardMode.Process(CK.Keyboard.Model.IKeyboardMode,CK.Keyboard.Model.IKeyboardMode,System.Predicate{CK.Keyboard.Model.IKeyboardMode},System.Predicate{CK.Keyboard.Model.IKeyboardMode},System.Predicate{CK.Keyboard.Model.IKeyboardMode})">
            <summary>
            Common process function where 3 predicates drive the result: each atomic mode is submitted to one of the 3 predicates
            depending on whether it is only in the left, only in the right or appears in both modes.
            When returning false, a predicate stops the process.
            </summary>
            <remarks>
            When this predicate is 'adding the mode to a list', we can draw the following table where '1' means the predicate exists and '0' means
            no predicate (or the 'always true' one):
            
            0, 0, 0 =  -- 'Empty'
            0, 0, 1 = Intersect (keep commons) => /Toggle
            0, 1, 0 =  -- 'Cleanup' (keep theirs only) => /Remove 
            0, 1, 1 =  -- 'Other' (keep theirs and commons, reject mine) => /This
            1, 0, 0 = Remove (keep mine only) => /Cleanup
            1, 0, 1 =  -- 'This' (keep mine and commons and reject theirs) => /Other
            1, 1, 0 = Toggle (keep mine, theirs, but reject commons) => /Intersect
            1, 1, 1 = Add
            
            This shows that our 4 methods Intersect, Remove, Toggle and Add cover the interesting cases - others are either symetric or useless.
            </remarks>
        </member>
        <member name="M:CK.Keyboard.Layout.DestroyConfig">
            <summary>
            Destroy the configuration from the shared dictionary for this layout 
            and all the subordinated objects (zone, key and actual key layouts).
            </summary>
        </member>
        <member name="T:CK.Keyboard.KeyMode">
            <summary>
            Implements both IKeyMode and IKeyModeCurrent for readability.
            </summary>
        </member>
        <member name="P:CK.Keyboard.KeyMode.CK#Keyboard#Model#IKeyModeCurrent#IsFallBack">
            <summary>
            The current actual key is a fallback if its mode is not exactly the 
            same as the current keyboard mode. 
            </summary>
        </member>
        <member name="T:CK.R">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CK.R.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CK.R.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CK.R.DestroyDefaultKeyMode">
            <summary>
              Looks up a localized string similar to The default actual key can not be destroyed..
            </summary>
        </member>
        <member name="P:CK.R.DestroyDefaultLayoutKeyMode">
            <summary>
              Looks up a localized string similar to The default actual key layout can not be destroyed..
            </summary>
        </member>
        <member name="P:CK.R.EditorException">
            <summary>
              Looks up a localized string similar to An error occured in editor: {0}.
            </summary>
        </member>
        <member name="P:CK.R.ImportKeyboardFail">
            <summary>
              Looks up a localized string similar to Unable to import this keyboard.
            </summary>
        </member>
        <member name="P:CK.R.InvalidSetLayout">
            <summary>
              Looks up a localized string similar to Attempt to set a current Layout that belongs to another keyboard..
            </summary>
        </member>
        <member name="P:CK.R.KeyboardAutoNumPattern">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:CK.R.KeyboardAutoNumRegex">
            <summary>
              Looks up a localized string similar to \s*\(\d+\)\s*$.
            </summary>
        </member>
        <member name="P:CK.R.KeyboardErrorUnknown">
            <summary>
              Looks up a localized string similar to Attempt to set an unknown keyboard as the current one..
            </summary>
        </member>
        <member name="P:CK.R.KeyFromAnotherKeyboard">
            <summary>
              Looks up a localized string similar to The key must belong to the same keyboard..
            </summary>
        </member>
        <member name="P:CK.R.KeyModeFromAnotherKeyboard">
            <summary>
              Looks up a localized string similar to The actual key must belong to the same keyboard..
            </summary>
        </member>
        <member name="P:CK.R.KeyPushWhenDown">
            <summary>
              Looks up a localized string similar to The Push() method can not be called if the key is already down (IsDown property)..
            </summary>
        </member>
        <member name="P:CK.R.KeyReleaseWhenUp">
            <summary>
              Looks up a localized string similar to The Release() method must be called only when IsDown is true..
            </summary>
        </member>
        <member name="P:CK.R.KeyRepeatPressedWhenUp">
            <summary>
              Looks up a localized string similar to The RepeatPressed() method must be called only when IsDown is true..
            </summary>
        </member>
        <member name="P:CK.R.LayoutDefaultDestroyed">
            <summary>
              Looks up a localized string similar to The keyboard&apos;s default layout can not be destroyed..
            </summary>
        </member>
        <member name="P:CK.R.LayoutDefaultRenamed">
            <summary>
              Looks up a localized string similar to The keyboard&apos;s default layout can not be renamed..
            </summary>
        </member>
        <member name="P:CK.R.LoadContextFail">
            <summary>
              Looks up a localized string similar to Unable to load context..
            </summary>
        </member>
        <member name="P:CK.R.ModeCompositeError">
            <summary>
              Looks up a localized string similar to KeyboardMode: &apos;{0}&apos; must not be a composite mode (i.e. contains +)..
            </summary>
        </member>
        <member name="P:CK.R.ModeFromAnotherContext">
            <summary>
              Looks up a localized string similar to The mode must be obtained from the same Context..
            </summary>
        </member>
        <member name="P:CK.R.ModeObjectChangeUnavailableMode">
            <summary>
              Looks up a localized string similar to Attempt to change the mode of a {0} with an unavailable mode &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:CK.R.ModeObjectCreateUnavailableMode">
            <summary>
              Looks up a localized string similar to Attempt to create a {0} with unavailable mode &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:CK.R.MustNotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Must not be null nor empty.
            </summary>
        </member>
        <member name="P:CK.R.ReadResourcesException">
            <summary>
              Looks up a localized string similar to Error while reading resources of {0}.
            </summary>
        </member>
        <member name="P:CK.R.XmlInvalidFormatVersion">
            <summary>
              Looks up a localized string similar to Xml version must exist and be at least 2.5.1..
            </summary>
        </member>
        <member name="P:CK.R.ZoneDefaultDestroyed">
            <summary>
              Looks up a localized string similar to The keyboard&apos;s default zone can not be destroyed..
            </summary>
        </member>
        <member name="P:CK.R.ZoneDefaultRenamed">
            <summary>
              Looks up a localized string similar to The keyboard&apos;s default zone can not be renamed..
            </summary>
        </member>
        <member name="P:CK.R.ZoneFromAnotherKeyboard">
            <summary>
              Looks up a localized string similar to The zone must belong to the same keyboard..
            </summary>
        </member>
        <member name="P:CK.Keyboard.LayoutKeyMode.CK#Keyboard#Model#ILayoutKeyModeCurrent#IsFallBack">
            <summary>
            The current actual key is a fallback if its mode is not exactly the 
            same as the current keyboard mode. 
            </summary>
        </member>
        <member name="T:CK.Keyboard.Key">
            <summary>
            Auto implementation of the <see cref="T:CK.Keyboard.Model.IKeyModeCollection"/> for <see cref="P:CK.Keyboard.Model.IKey.KeyModes"/> property.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Key.OnActualPropertyChanged(CK.Keyboard.Model.KeyModePropertyChangedEventArgs)">
            <summary>
            Internal relay for strongly typed actual key changes.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Key.CK#Keyboard#Model#IKeyPropertyHolder#IsCurrent">
            <summary>
            By design, a key is always current since it does not 
            depend on the keyboard mode nor keyboard layout.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Keyboard.CK#Core#IReadOnlyList{CK#Keyboard#Model#IKey}#IndexOf(System.Object)">
            <summary>
            Zones are not ordered so indicies can change after each change in zones collection.
            </summary>
        </member>
        <member name="M:CK.Keyboard.Keyboard.GetEnumerator">
            <summary>
            Use public implementation (will be visible only inside our assembly since the class
            itself is internal).
            </summary>
            <returns></returns>
        </member>
        <member name="T:CK.Keyboard.Res.R">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.DestroyDefaultKeyMode">
            <summary>
              Looks up a localized string similar to The default actual key can not be destroyed..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.DestroyDefaultLayoutKeyMode">
            <summary>
              Looks up a localized string similar to The default actual key layout can not be destroyed..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.EditorException">
            <summary>
              Looks up a localized string similar to An error occured in editor: {0}.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.ImportKeyboardFail">
            <summary>
              Looks up a localized string similar to Unable to import this keyboard.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.InvalidSetLayout">
            <summary>
              Looks up a localized string similar to Attempt to set a current Layout that belongs to another keyboard..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.KeyboardAutoNumPattern">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.KeyboardAutoNumRegex">
            <summary>
              Looks up a localized string similar to \s*\(\d+\)\s*$.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.KeyboardErrorUnknown">
            <summary>
              Looks up a localized string similar to Attempt to set an unknown keyboard as the current one..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.KeyFromAnotherKeyboard">
            <summary>
              Looks up a localized string similar to The key must belong to the same keyboard..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.KeyModeFromAnotherKeyboard">
            <summary>
              Looks up a localized string similar to The actual key must belong to the same keyboard..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.KeyPushWhenDown">
            <summary>
              Looks up a localized string similar to The Push() method can not be called if the key is already down (IsDown property)..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.KeyReleaseWhenUp">
            <summary>
              Looks up a localized string similar to The Release() method must be called only when IsDown is true..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.KeyRepeatPressedWhenUp">
            <summary>
              Looks up a localized string similar to The RepeatPressed() method must be called only when IsDown is true..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.LayoutDefaultDestroyed">
            <summary>
              Looks up a localized string similar to The keyboard&apos;s default layout can not be destroyed..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.LayoutDefaultRenamed">
            <summary>
              Looks up a localized string similar to The keyboard&apos;s default layout can not be renamed..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.LoadContextFail">
            <summary>
              Looks up a localized string similar to Unable to load context..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.ModeCompositeError">
            <summary>
              Looks up a localized string similar to KeyboardMode: &apos;{0}&apos; must not be a composite mode (i.e. contains +)..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.ModeFromAnotherContext">
            <summary>
              Looks up a localized string similar to The mode must be obtained from the same Context..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.ModeObjectChangeUnavailableMode">
            <summary>
              Looks up a localized string similar to Attempt to change the mode of a {0} with an unavailable mode &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.ModeObjectCreateUnavailableMode">
            <summary>
              Looks up a localized string similar to Attempt to create a {0} with unavailable mode &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.MustNotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Must not be null nor empty.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.ReadResourcesException">
            <summary>
              Looks up a localized string similar to Error while reading resources of {0}.
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.XmlInvalidFormatVersion">
            <summary>
              Looks up a localized string similar to Xml version must exist and be at least 2.5.1..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.ZoneDefaultDestroyed">
            <summary>
              Looks up a localized string similar to The keyboard&apos;s default zone can not be destroyed..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.ZoneDefaultRenamed">
            <summary>
              Looks up a localized string similar to The keyboard&apos;s default zone can not be renamed..
            </summary>
        </member>
        <member name="P:CK.Keyboard.Res.R.ZoneFromAnotherKeyboard">
            <summary>
              Looks up a localized string similar to The zone must belong to the same keyboard..
            </summary>
        </member>
    </members>
</doc>
