<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CK.Plugin.Config.Model</name>
    </assembly>
    <members>
        <member name="T:CK.Plugin.Config.ConfigPluginStatus">
            <summary>
            Defines the configured status of a plugin. This mimics the windows service behavior... It was not planned: it appears
            that this is the best/simplest way to handle plugins that Starts/Stops with dependencies among them.
            <remarks>
            Note that our dependencies in CK do not define a Direct Acyclic Graph like Windows Services: plugins are free
            to reference services provided by others in any way they like. 
            Even if the running state of a plugin is more a "declared state" in a cooperative 
            environment than a true process/thread state in a preemptive multi-task system, the possible cyclic references 
            forces us to design a "2 phase starting" API (and the corresponding status Starting and Stopping).
            See <see cref="!:RunningStatus"/>.
            </remarks>
            </summary>
            <seealso cref="!:RunningStatus"/>
        </member>
        <member name="F:CK.Plugin.Config.ConfigPluginStatus.Disabled">
            <summary>
            The plugin is disabled. It will refuse to start and will not be loaded at startup.
            This is not the default: <see cref="F:CK.Plugin.Config.ConfigPluginStatus.Manual"/> is the default for a plugin.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.ConfigPluginStatus.Manual">
            <summary>
            The plugin does not start by default but will automatically attempt to start
            if another plugin requires it to run or if the user starts it explicitely.
            This is the default.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.ConfigPluginStatus.AutomaticStart">
            <summary>
            The plugin will be started as soon as possible.
            If the plugin can not be started at the beginning of the application, it will
            automatically be started when required conditions are met.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.ConfigPluginStatus.ConfigurationMask">
            <summary>
            This mask covers normal configuration status.
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.IConfigObjectEntry">
            <summary>
            Defines one entry seen by an object that has data in the configuration. 
            This is the symmetric of <see cref="T:CK.Plugin.Config.IConfigPluginEntry"/> interface.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigObjectEntry.PluginId">
            <summary>
            The <see cref="T:System.Guid"/> that uniquely identifies the plugin.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigObjectEntry.Key">
            <summary>
            Gets the name of this entry.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigObjectEntry.Value">
            <summary>
            Gets the value associated to the <see cref="P:CK.Plugin.Config.IConfigObjectEntry.Key"/>.
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.IConfigContainer">
            <summary>
            Root interface for object/plugin configuration management.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Contains(System.Object)">
            <summary>
            Returns true if the object exists in the configuration.
            </summary>
            <param name="o">Object that carries the properties.</param>
            <returns>True if the object exists in the configuration, false otherwise.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Clear(System.Object)">
            <summary>
            Clears all data associated to an object.
            </summary>
            <param name="o">Object that carries the properties.</param>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Destroy(System.Object)">
            <summary>
            Removes the data associated to an object and removes the object itself from internal maps.
            </summary>
            <param name="o">Object that carries the properties.</param>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Ensure(System.Object)">
            <summary>
            Ensures that the object exists in the configuration.
            </summary>
            <param name="o">Object that carries the properties.</param>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.FindPlugin(System.Guid)">
            <summary>
            Gets the <see cref="T:CK.Core.INamedVersionedUniqueId"/> by its <see cref="T:System.Guid"/> if it exists.
            </summary>
            <param name="pluginIdentifier">The <see cref="T:System.Guid"/> that identifies the plugin.</param>
            <returns>Null if not found.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Contains(CK.Core.INamedVersionedUniqueId)">
            <summary>
            Returns true if the plugin exists in the configuration.
            </summary>
            <param name="p">Plugin identifier.</param>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Clear(CK.Core.INamedVersionedUniqueId)">
            <summary>
            Clears the data associated to a plugin.
            </summary>
            <param name="p">Plugin identifier.</param>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Destroy(CK.Core.INamedVersionedUniqueId)">
            <summary>
            Clears the data associated to a plugin and removes the plugin itself from the internal maps.
            </summary>
            <param name="p">Plugin identifier.</param>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Ensure(CK.Core.INamedVersionedUniqueId)">
            <summary>
            Ensures that the plugin exists in the configuration. This combines a <see cref="M:CK.Plugin.Config.IConfigContainer.FindPlugin(System.Guid)"/>
            and an actual registration if it is not yet known.
            </summary>
            <param name="p">Plugin identifier.</param>
            <returns>
            The registered instance: it can be the parameter or the previously registered
            plugin with the same <see cref="P:CK.Core.IUniqueId.UniqueId"/>.
            </returns>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Contains(System.Object,CK.Core.INamedVersionedUniqueId)">
            <summary>
            Returns true if the couple object/plugin exists in the configuration.
            </summary>
            <param name="o">Object that carries the properties.</param>
            <param name="p">Plugin identifier.</param>
            <returns>True if the couple exists in the configuration.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Count(System.Object,CK.Core.INamedVersionedUniqueId)">
            <summary>
            Gets the number of data held by a couple object/plugin.
            </summary>
            <param name="o">Object that carries the properties.</param>
            <param name="p">Plugin identifier.</param>
            <returns>Number of data element for the couple.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.GetObjectPluginConfig(System.Object,CK.Core.INamedVersionedUniqueId,System.Boolean)">
            <summary>
            Gets an easy to use <see cref="T:CK.Plugin.Config.IObjectPluginConfig"/> that acts as a standard name-value dictionary.
            </summary>
            <param name="o">Object that carries the properties.</param>
            <param name="p">Plugin identifier.</param>
            <param name="ensure">True to ensure that the object and plugin exist.</param>
            <returns>Esay accessor.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Clear(System.Object,CK.Core.INamedVersionedUniqueId)">
            <summary>
            Clears the data associated to a couple object/plugin.
            </summary>
            <param name="o">Object that carries the properties.</param>
            <param name="p">Plugin identifier.</param>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Contains(System.Object,CK.Core.INamedVersionedUniqueId,System.String)">
            <summary>
            Returns true if the triplet object/plugin/key exists in the configuration.
            </summary>
            <param name="o">Object that carries the properties.</param>
            <param name="p">Plugin identifier.</param>
            <param name="k">Key fo the data.</param>
            <returns>True if the triplet exists in the configuration.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Add(System.Object,CK.Core.INamedVersionedUniqueId,System.String,System.Object)">
            <summary>
            Adds a configuration entry. An exception is thrown if the triplet object/plugin/key already exists.
            Use <see cref="M:CK.Plugin.Config.IConfigContainer.GetOrSet``1(System.Object,CK.Core.INamedVersionedUniqueId,System.String,``0)"/> to add a value only if it does not exist.
            </summary>
            <param name="o">Object that carries the properties.</param>
            <param name="p">Plugin identifier.</param>
            <param name="k">Key for the data.</param>
            <param name="value">Value to set.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CK.Plugin.Config.IConfigContainer.GetOrSet``1(System.Object,CK.Core.INamedVersionedUniqueId,System.String,``0)" -->
        <member name="M:CK.Plugin.Config.IConfigContainer.GetOrSet``1(System.Object,CK.Core.INamedVersionedUniqueId,System.String,``0,System.Func{System.Object,``0})">
            <summary>
            Gets an existing configuration entry and converts it if needed or sets a new one if it does not exist. 
            </summary>
            <param name="o">Object that carries the properties.</param>
            <param name="p">Plugin identifier.</param>
            <param name="k">Key for the data.</param>
            <param name="value">Value to set (and return) if no value exists.</param>
            <param name="converter">
            Delegate that converts an existing value to the <typeparamref name="T"/> type.
            If a conversion occurs, the converted value replaces the previous one an a <see cref="E:CK.Plugin.Config.IConfigContainer.Changed"/> event is fired.
            It can not be null and is called only if the existing value's type is not compatible with T.
            </param>
            <returns>The configuration value associated to the triplet object/plugin/key.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.GetOrSet``1(System.Object,CK.Core.INamedVersionedUniqueId,System.String,System.Func{``0})">
            <summary>
            Gets an existing configuration entry or sets a new one if it does not exist (deferred obtention). 
            </summary>
            <param name="o">Object that carries the properties.</param>
            <param name="p">Plugin identifier.</param>
            <param name="k">Key for the data.</param>
            <param name="value">
            Delegate that creates/obtains a value. Called only if the entry does not exist. 
            When this function is null, the default value for <typeparamref name="T"/> is used.
            </param>
            <returns>The configuration value associated to the triplet object/plugin/key.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.GetOrSet``1(System.Object,CK.Core.INamedVersionedUniqueId,System.String,System.Func{``0},System.Func{System.Object,``0})">
            <summary>
            Gets an existing configuration entry and converts it if needed or sets a new one if it does not exist (deferred obtention).
            </summary>
            <param name="o">Object that carries the properties.</param>
            <param name="p">Plugin identifier.</param>
            <param name="k">Key fo the data.</param>
            <param name="value">
            Delegate that creates/obtains a value. Called only if the entry does not exist. 
            When this function is null, the default value for <typeparamref name="T"/> is used.
            </param>
            <param name="converter">
            Delegate that converts an existing value to the <typeparamref name="T"/> type.
            If a conversion occurs, the converted value replaces the previous one an a <see cref="E:CK.Plugin.Config.IConfigContainer.Changed"/> event is fired.
            It can not be null and is called only if the existing value's type is not compatible with T.
            </param>
            <returns>The configuration value associated to the triplet object/plugin/key.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.DestroyAll">
            <summary>
            Clear all data contained by this container.
            Objects and plugins are removed.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.ClearAll">
            <summary>
            Empty all data contained by this container.
            Objects and plugins are NOT removed.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Set(System.Object,CK.Core.INamedVersionedUniqueId,System.String,System.Object)">
            <summary>
            Gets or sets the object associated to a given triplet object/plugin/key just as the indexer but 
            returns whether the entry has actually been updated or not.
            </summary>
            <param name="o">Object that carries the properties.</param>
            <param name="p">Plugin identifier.</param>
            <param name="k">The key for which a configuration must be set.</param>
            <param name="value">The value to set.</param>
            <returns>It can be <see cref="F:CK.Core.ChangeStatus.None"/>, <see cref="F:CK.Core.ChangeStatus.Update"/> or <see cref="F:CK.Core.ChangeStatus.Add"/>.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IConfigContainer.Remove(System.Object,CK.Core.INamedVersionedUniqueId,System.String)">
            <summary>
            Removes a triplet object/plugin/key. 
            </summary>
            <param name="o">Object that carries the properties.</param>
            <param name="p">Plugin identifier.</param>
            <param name="k">The key to remove.</param>
            <returns>True if the entry has been removed, false if it did not exist.</returns>
        </member>
        <member name="E:CK.Plugin.Config.IConfigContainer.Changed">
            <summary>
            Fires whenever a change occurs.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigContainer.Item(System.Object,CK.Core.INamedVersionedUniqueId,System.String)">
            <summary>
            Gets or sets the object associated to a given triplet object/plugin/key. 
            When getting, null is returned if the key does not exist.
            When setting, the entry is either added or updated with the new value.
            </summary>
            <param name="o">Object that carries the properties.</param>
            <param name="p">Plugin identifier.</param>
            <param name="k">The key for which a configuration must be obtained or set.</param>
            <returns>The value or null if the configuration entry does not exists.</returns>
        </member>
        <member name="T:CK.Plugin.Config.IObjectPluginConfig">
            <summary>
            Easy to use name-value dictionary bound to an object and a plugin.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IObjectPluginConfig.Clear">
            <summary>
            Removes all configuration entries for the plugin.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.IObjectPluginConfig.Contains(System.String)">
            <summary>
            Gets whether this configuration contains the given key.
            </summary>
            <param name="key">Key to find.</param>
            <returns>True if the key exists in the configuration, false otherwise.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IObjectPluginConfig.Add(System.String,System.Object)">
            <summary>
            Adds a configuration entry. If the key already exists, an exception is thrown.
            Use <see cref="M:CK.Plugin.Config.IObjectPluginConfig.GetOrSet``1(System.String,``0)"/> to add a value only if it does not exist.
            </summary>
            <param name="key">Name of the configuration entry.</param>
            <param name="value">Value of the confiration entry.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CK.Plugin.Config.IObjectPluginConfig.GetOrSet``1(System.String,``0)" -->
        <member name="M:CK.Plugin.Config.IObjectPluginConfig.GetOrSet``1(System.String,``0,System.Func{System.Object,``0})">
            <summary>
            Gets an existing value and converts it if needed or sets a new one if it does not exist. 
            </summary>
            <param name="key">Key for the data.</param>
            <param name="value">Value to set (and return) if no value exists.</param>
            <param name="converter">
            Delegate that converts an existing value to the <typeparamref name="T"/> type.
            If a conversion occurs, the converted value replaces the previous one and a <see cref="E:CK.Plugin.Config.IConfigContainer.Changed"/> event is fired.
            It can not be null and is called only if the existing value's type is not compatible with T.
            </param>
            <returns>The value associated to the key.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IObjectPluginConfig.GetOrSet``1(System.String,System.Func{``0})">
            <summary>
            Gets an existing configuration entry or sets a new one if it does not exist (deferred obtention). 
            </summary>
            <param name="key">Key for the data.</param>
            <param name="value">
            Delegate that creates/obtains a value. Called only if the entry does not exist. 
            When this function is null, the default value for <typeparamref name="T"/> is used.
            </param>
            <returns>The value associated to the key.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IObjectPluginConfig.GetOrSet``1(System.String,System.Func{``0},System.Func{System.Object,``0})">
            <summary>
            Gets an existing configuration entry and converts it if needed or sets a new one if it does not exist (deferred obtention).
            </summary>
            <param name="key">Key for the data.</param>
            <param name="value">
            Delegate that creates/obtains a value. Called only if the entry does not exist. 
            When this function is null, the default value for <typeparamref name="T"/> is used.
            </param>
            <param name="converter">
            Delegate that converts an existing value to the <typeparamref name="T"/> type.
            If a conversion occurs, the converted value replaces the previous one and a <see cref="E:CK.Plugin.Config.IConfigContainer.Changed"/> event is fired.
            It can not be null and is called only if the existing value's type is not compatible with T.
            </param>
            <returns>The value associated to the key.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IObjectPluginConfig.Remove(System.String)">
            <summary>
            Removes the configuration entry. Does nothing if the key does not exist.
            </summary>
            <param name="key">Name of the configuration entry.</param>
            <returns>True if the entry has been removed, false if it did not exist.</returns>
        </member>
        <member name="M:CK.Plugin.Config.IObjectPluginConfig.Set(System.String,System.Object)">
            <summary>
            Gets or sets the object associated to a given key just as the indexer but 
            returns whether the entry has actually been updated or not.
            </summary>
            <param name="k">The key for which a configuration must be set.</param>
            <param name="value">The value to set.</param>
            <returns>It can be <see cref="F:CK.Core.ChangeStatus.None"/>, <see cref="F:CK.Core.ChangeStatus.Update"/> or <see cref="F:CK.Core.ChangeStatus.Add"/>.</returns>
        </member>
        <member name="P:CK.Plugin.Config.IObjectPluginConfig.Count">
            <summary>
            Gets the number of configuration entries.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IObjectPluginConfig.Item(System.String)">
            <summary>
            Gets or sets the object for a given key. When getting, null is returned if the key does not exist.
            When setting, the entry is either added or updated with the new value.
            </summary>
            <param name="key">The key for which a configuration must be obtained or set.</param>
            <returns>The value or null if the key does not exists.</returns>
        </member>
        <member name="F:CK.Plugin.Config.ConfigChangedEventArgs.Obj">
            <summary>
            The object whose configuration has changed if there is only one object concerned.
            If multiple objects are concerned this field is null and <see cref="F:CK.Plugin.Config.ConfigChangedEventArgs.MultiObj"/> must be used. 
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.ConfigChangedEventArgs.MultiObj">
            <summary>
            The objects whose configuration have changed.
            It is always available (if <see cref="F:CK.Plugin.Config.ConfigChangedEventArgs.Obj"/> is not null, this collection contains it).
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.ConfigChangedEventArgs.MultiPluginId">
            <summary>
            The plugins whose configuration have changed.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.ConfigChangedEventArgs.Key">
            <summary>
            The name of the entry whose configuration has changed. 
            Null if the configuration, the object, the plugin or the association (by <see cref="!:IConfigContainer.Remove(object,INamedVersionedUniqueId)"/>) has been cleared (<see cref="F:CK.Plugin.Config.ConfigChangedEventArgs.Status"/> is <see cref="F:CK.Core.ChangeStatus.ContainerClear"/> or <see cref="F:CK.Core.ChangeStatus.ContainerDestroy"/>).
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.ConfigChangedEventArgs.Value">
            <summary>
            The new value when <see cref="F:CK.Plugin.Config.ConfigChangedEventArgs.Key"/> is not null and <see cref="F:CK.Plugin.Config.ConfigChangedEventArgs.Status"/> is <see cref="F:CK.Core.ChangeStatus.Update"/> or <see cref="F:CK.Core.ChangeStatus.Add"/>.
            Null when <see cref="F:CK.Plugin.Config.ConfigChangedEventArgs.Status"/> is <see cref="F:CK.Core.ChangeStatus.Delete"/> or <see cref="F:CK.Core.ChangeStatus.ContainerClear"/> or <see cref="F:CK.Core.ChangeStatus.ContainerDestroy"/>.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.ConfigChangedEventArgs.Status">
            <summary>
            Status of the change. 
            Can be <see cref="F:CK.Core.ChangeStatus.Update"/>, <see cref="F:CK.Core.ChangeStatus.Add"/>,  <see cref="F:CK.Core.ChangeStatus.Delete"/> or <see cref="F:CK.Core.ChangeStatus.ContainerClear"/> or <see cref="F:CK.Core.ChangeStatus.ContainerDestroy"/>.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.ConfigChangedEventArgs.IsAllPluginsConcerned">
            <summary>
            True if the change concerns all the plugins: the <see cref="F:CK.Plugin.Config.ConfigChangedEventArgs.MultiPluginId"/> collection contains all the plugin identifiers managed by the container.
            </summary>
        </member>
        <member name="F:CK.Plugin.Config.ConfigChangedEventArgs.IsAllObjectsConcerned">
            <summary>
            True if the change concerns all the objects: the <see cref="F:CK.Plugin.Config.ConfigChangedEventArgs.MultiObj"/> collection contains all the object managed by the container.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.ConfigChangedEventArgs.IsAllConcerned">
            <summary>
            True if the change is global to the configuration: all objects and all plugins are concerned.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.ConfigChangedEventArgs.IsClearAll">
            <summary>
            Gets whether this change is the result of a <see cref="M:CK.Plugin.Config.IConfigContainer.ClearAll"/>.
            Meaning that objects have been emptied, but not destroyed
            </summary>
            <returns>True if the whole configuration is cleared.</returns>
        </member>
        <member name="P:CK.Plugin.Config.ConfigChangedEventArgs.IsDestroyedAll">
            <summary>
            Gets whether this change is the result of a <see cref="M:CK.Plugin.Config.IConfigContainer.DestroyAll"/>.
            </summary>
            <returns>True if the whole configuration is destroyed.</returns>
        </member>
        <member name="T:CK.Plugin.Config.IPluginConfigAccessor">
            <summary>
            This interface is the primary interface that enables a plugin to interact with the 
            configuration associated to any object in the system.
            </summary>
        </member>
        <member name="E:CK.Plugin.Config.IPluginConfigAccessor.ConfigChanged">
            <summary>
            Fires whenever a configuration related to the plugin changes.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IPluginConfigAccessor.System">
            <summary>
            Gets the system configuration for the plugin. This configuration is bound to
            the system itself and is shared among users.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IPluginConfigAccessor.User">
            <summary>
            Gets the user configuration for the plugin. This configuration is bound to
            the current user.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IPluginConfigAccessor.Context">
            <summary>
            Gets the context configuration for the plugin. This configuration is bound to
            the current context. Other context dependant configurations can be obtained for any object of the context.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IPluginConfigAccessor.Item(System.Object)">
            <summary>
            Gets or creates the configuration related to any object managed by the plugin.
            </summary>
            <param name="o">Object for which configuration must be obtained.</param>
            <returns>An interface to the configurations of the object for the plugin.</returns>
        </member>
        <member name="T:CK.Plugin.Config.IObjectPluginAssociation">
            <summary>
            Primary interface that define the association of a plugin and an object.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IObjectPluginAssociation.Obj">
            <summary>
            The object that carries the data: it can be of any object type (not a value type).
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IObjectPluginAssociation.PluginId">
            <summary>
            The <see cref="T:CK.Core.INamedVersionedUniqueId"/> that uniquely identifies the plugin.
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.ConfigExtension">
            <summary>
            Extension methods for interfaces related to configuration.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.ConfigExtension.GetObjectPluginConfig(CK.Plugin.Config.IConfigContainer,System.Object,CK.Core.INamedVersionedUniqueId)">
            <summary>
            Gets (creates it if needed) an easy to use <see cref="T:CK.Plugin.Config.IObjectPluginConfig"/> that acts as a standard name-value dictionary.
            </summary>
            <param name="c">This <see cref="T:CK.Plugin.Config.IConfigContainer"/> object.</param>
            <param name="o">Object that carries the properties.</param>
            <param name="p">Plugin identifier.</param>
            <returns>&gt;An easy accessor for the object/plugin couple.</returns>
        </member>
        <member name="T:CK.Plugin.Config.IConfigPluginEntry">
            <summary>
            Defines one entry seen by a plugin that a in the configuration. 
            This is the symmetric of <see cref="T:CK.Plugin.Config.IConfigObjectEntry"/> interface.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigPluginEntry.Obj">
            <summary>
            The object: it can be of any object type (not a value type).
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigPluginEntry.Key">
            <summary>
            Gets the name of this entry.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigPluginEntry.Value">
            <summary>
            Gets the value associated to the <see cref="P:CK.Plugin.Config.IConfigPluginEntry.Key"/>.
            </summary>
        </member>
        <member name="T:CK.Plugin.Config.IConfigEntry">
            <summary>
            Simple dictionary entry where the <see cref="P:CK.Plugin.Config.IConfigEntry.Key"/> is a string and 
            the <see cref="P:CK.Plugin.Config.IConfigEntry.Value"/> any object (including null).
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigEntry.Key">
            <summary>
            Gets the name of this entry.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.IConfigEntry.Value">
            <summary>
            Gets the value associated to the <see cref="P:CK.Plugin.Config.IConfigEntry.Key"/>.
            </summary>
        </member>
    </members>
</doc>
