<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CK.SharedDic</name>
    </assembly>
    <members>
        <member name="M:CK.Plugin.Config.ISharedDictionaryWriter.WritePluginsDataElement(System.String,System.Object,System.Boolean)">
            <summary>
            Writes plugins data for an object in a named element. 
            Element is written only if required: if there is no data to write, nothing is written.
            </summary>
            <param name="elementName">Name of the element that will contain the configuration.</param>
            <param name="o">Object for which configuration must be written.</param>
            <param name="writeEmptyElement">True to force an empty &lt;<paramref name="elemenName"/> /&gt; element to be written even 
            if there is no data. Defaults to false.
            </param>
            <returns>The number of plugins for which data has been written.</returns>
        </member>
        <member name="M:CK.Plugin.Config.ISharedDictionaryWriter.WritePluginsData(System.Object)">
            <summary>
            Writes plugins data for an object: data element is already opened.
            Use <see cref="M:CK.Plugin.Config.ISharedDictionaryWriter.WritePluginsDataElement(System.String,System.Object,System.Boolean)"/> to write a named element.
            </summary>
            <param name="o">The object for which data must be written.</param>
            <returns>The number of plugins for which data has been written.</returns>
        </member>
        <member name="E:CK.Plugin.Config.ISharedDictionaryWriter.BeforePluginsData">
            <summary>
            Fires whenever a plugin/object data is about to be written.
            </summary>
        </member>
        <member name="E:CK.Plugin.Config.ISharedDictionaryWriter.AfterPluginsData">
            <summary>
            Fires whenever a plugin/object data has been written.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.ISharedDictionaryWriter.StructuredWriter">
            <summary>
            Gets the <see cref="T:CK.Storage.IStructuredWriter"/> into which this writer writes data.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.ISharedDictionaryWriter.SharedDictionary">
            <summary>
            Gets the <see cref="T:CK.Plugin.Config.ISharedDictionary"/> to which this writer is associated.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.ISharedDictionaryReader.ReadPluginsDataElement(System.String,System.Object)">
            <summary>
            Read object data from the reader. 
            If the current element name does not match the name provided, false is returned.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="o">The object for which data must be read.</param>
            <returns>True if the element has been found and read. Errors (if any) are stored in the <see cref="P:CK.Plugin.Config.ISharedDictionaryReader.ErrorCollector"/>.</returns>
        </member>
        <member name="M:CK.Plugin.Config.ISharedDictionaryReader.ReadPluginsData(System.Object)">
            <summary>
            Reads plugins data for an object: the reader is already positionned on the data. 
            Errors (if any) are stored in the <see cref="P:CK.Plugin.Config.ISharedDictionaryReader.ErrorCollector"/>.
            Use <see cref="M:CK.Plugin.Config.ISharedDictionaryReader.ReadPluginsDataElement(System.String,System.Object)"/> to read an element.
            </summary>
            <param name="o">The object for which data must be read.</param>
        </member>
        <member name="M:CK.Plugin.Config.ISharedDictionaryReader.PreProcessReadInfo(System.Object,CK.Core.INamedVersionedUniqueId,CK.SharedDic.ReadElementObjectInfo)">
            <summary>
            Hook that enables this <see cref="T:CK.Plugin.Config.ISharedDictionaryReader"/> implementation
            to filter every read information.
            </summary>
            <param name="o">Object for which information has been read.</param>
            <param name="pluginId">Plugin identifier for which information has been read.</param>
            <param name="info">The information read from the stream.</param>
            <returns>
            Simple implementation should return the <paramref name="info"/> unchanged (this is what does the default implementation).
            It may also returns null to ignore (skip) this piece of information. 
            More complex implementation can use this hook to transform the data (by changing the <see cref="!:ReadElementObjectInfo.ReadInfo"/> of the <paramref name="info"/>)
            or return a brand new <see cref="T:CK.SharedDic.ReadElementObjectInfo"/>.
            </returns>
        </member>
        <member name="E:CK.Plugin.Config.ISharedDictionaryReader.BeforePluginsData">
            <summary>
            Fires whenever a plugin/object data is about to be read and the plugin is registered.
            The <see cref="P:CK.Plugin.Config.ISharedDictionaryReader.ReadPluginInfo"/> property is available and <see cref="T:CK.Plugin.Config.SharedDictionaryReaderEventArgs"/>
            exposes the <see cref="T:CK.Plugin.Config.IObjectPluginAssociation"/>.
            </summary>
        </member>
        <member name="E:CK.Plugin.Config.ISharedDictionaryReader.AfterPluginsData">
            <summary>
            Fires whenever a plugin/object data has been read (the plugin is registered).
            The <see cref="P:CK.Plugin.Config.ISharedDictionaryReader.ReadPluginInfo"/> property is available and <see cref="T:CK.Plugin.Config.SharedDictionaryReaderEventArgs"/>
            exposes the <see cref="T:CK.Plugin.Config.IObjectPluginAssociation"/>.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.ISharedDictionaryReader.ReadPluginInfo">
            <summary>
            Gets the currently read plugin <see cref="T:CK.Core.INamedVersionedUniqueId"/>: the version
            exposed here is the one of the data, it may differ from the actual plugin's version.
            Null when the reader is not reading any plugin data.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CK.Plugin.Config.ISharedDictionaryReader.MergeMode" -->
        <member name="P:CK.Plugin.Config.ISharedDictionaryReader.StructuredReader">
            <summary>
            Gets the <see cref="T:CK.Storage.IStructuredReader"/> from which this reader reads data.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.ISharedDictionaryReader.SharedDictionary">
            <summary>
            Gets the <see cref="T:CK.Plugin.Config.ISharedDictionary"/> to which this reader is associated.
            </summary>
        </member>
        <member name="P:CK.Plugin.Config.ISharedDictionaryReader.ErrorCollector">
            <summary>
            Gets a writeable collection of <see cref="T:CK.SharedDic.ReadElementObjectInfo"/> that must contains
            only read errors.
            </summary>
        </member>
        <member name="T:CK.SharedDic.SkippedFragment">
            <summary>
            Holds skipped fragments during read of Xml document.
            </summary>
        </member>
        <member name="F:CK.SharedDic.SkippedFragment.Obj">
            <summary>
            Object that holds this fragment.
            </summary>
        </member>
        <member name="F:CK.SharedDic.SkippedFragment.PluginId">
            <summary>
            Plugin identifier for this fragment.
            </summary>
        </member>
        <member name="F:CK.SharedDic.SkippedFragment.Bookmark">
            <summary>
            Storage bookmark for this fragment.
            It can be set since a skipped fragment may be replaced by a new one (during a past operation
            for example).
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.ISharedDictionary.RegisterReader(CK.Storage.IStructuredReader,CK.SharedDic.MergeMode)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="mergeMode"></param>
            <returns></returns>
        </member>
        <member name="P:CK.Plugin.Config.ISharedDictionary.ServiceProvider">
            <summary>
            Gets or sets the <see cref="T:System.IServiceProvider"/> that will be used
            while persisting/restoring data.
            </summary>
        </member>
        <member name="M:CK.SharedDic.SharedDictionaryImpl.CreatePluginConfigByPlugin(CK.Core.INamedVersionedUniqueId)">
            <summary>
            Throws an ArgumentException if the Guid is already associated to 
            another IVersionedUniqueId.
            </summary>
        </member>
        <member name="M:CK.SharedDic.SharedDictionaryImpl.TryGetPluginConfigByObject(System.Object,CK.SharedDic.PluginConfigByObject@)">
            <summary>
            Used by SharedDictionaryWriter.
            </summary>
        </member>
        <member name="M:CK.SharedDic.SharedDictionaryImpl.ClearFragments(System.Predicate{CK.SharedDic.SkippedFragment})">
            <summary>
            Clears values matching the filter parameter.     
            </summary>
            <param name="filter"></param>
            <remarks>If the entry has no values anymore, the entry is removed from the skippedFragments dictionary</remarks>
        </member>
        <member name="T:CK.Plugin.Config.SharedDictionaryExtension">
            <summary>
            Extension methods for shared dictionary objects and interfaces.
            </summary>
        </member>
        <member name="M:CK.Plugin.Config.SharedDictionaryExtension.WritePluginsDataElement(CK.Plugin.Config.ISharedDictionaryWriter,System.String,System.Object)">
            <summary>
            Writes plugins data for an object.
            Even if no data exists, the element is written as an empty &lt;<paramref name="elemenName"/> /&gt; element.
            </summary>
            <param name="w">This <see cref="T:CK.Plugin.Config.ISharedDictionaryWriter"/> object.</param>
            <param name="elementName">Name of the element that will contain the configuration.</param>
            <param name="o">Object for which configuration must be written.</param>
            <returns>The number of plugins for which data has been written.</returns>
        </member>
        <member name="T:CK.SharedDic.SharedDictionary">
            <summary>
            Factory for <see cref="T:CK.Plugin.Config.ISharedDictionary"/> objects.
            </summary>
        </member>
        <member name="M:CK.SharedDic.SharedDictionary.Create(System.IServiceProvider)">
            <summary>
            Creates a new <see cref="T:CK.Plugin.Config.ISharedDictionary"/>.
            </summary>
            <param name="serviceProvider">Optional service provider.</param>
            <returns>An implementation of a <see cref="T:CK.Plugin.Config.ISharedDictionary"/>.</returns>
        </member>
        <member name="F:CK.SharedDic.MergeMode.None">
            <summary>
            No merge: existing data is lost.
            </summary>
        </member>
        <member name="F:CK.SharedDic.MergeMode.ReplaceExisting">
            <summary>
            A data for an existing object/plugin key replaces the previous one.
            </summary>
        </member>
        <member name="F:CK.SharedDic.MergeMode.ReplaceExistingTryMerge">
            <summary>
            The behavior will be very close to <value>ReplaceExisting</value>.
            If the same data is detected in the source and target site we will try to merge them 
            thanks to <see cref="T:CK.Core.IMergeable"/> interface implementation.
            </summary>
        </member>
        <member name="F:CK.SharedDic.MergeMode.PreserveExisting">
            <summary>
            A data for an existing object/plugin must be ignored: the current value is preserved, new data is lost.
            </summary>
        </member>
        <member name="F:CK.SharedDic.MergeMode.ErrorOnDuplicate">
            <summary>
            No duplicate should exist: any attempt to add data for an existing object/plugin key
            raises an exception.
            </summary>
        </member>
        <member name="T:CK.SharedDic.ReadElementObjectInfo">
            <summary>
            Encapsulates the result of a read operation.
            </summary>
        </member>
        <member name="M:CK.SharedDic.ReadElementObjectInfo.#ctor(CK.SharedDic.ReadElementObjectInfo.ReadStatus,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CK.SharedDic.ReadElementObjectInfo"/> class for a successful read operation.
            </summary>
            <param name="s">The <see cref="P:CK.SharedDic.ReadElementObjectInfo.Status"/> of the read operation.</param>
            <param name="k">The <see cref="P:CK.SharedDic.ReadElementObjectInfo.Key"/> of the read operation.</param>
            <param name="o">The successfully <see cref="P:CK.SharedDic.ReadElementObjectInfo.ReadObject"/>.</param>
        </member>
        <member name="M:CK.SharedDic.ReadElementObjectInfo.#ctor(CK.SharedDic.ReadElementObjectInfo.ReadStatus,System.Xml.XmlReader,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CK.SharedDic.ReadElementObjectInfo"/> class when an error occured.
            </summary>
            <param name="s">The <see cref="P:CK.SharedDic.ReadElementObjectInfo.Status"/> of the read operation.</param>
            <param name="r">The xml stream.</param>
            <param name="errorMessage">Error message. Must not be null nor empty.</param>
        </member>
        <member name="P:CK.SharedDic.ReadElementObjectInfo.Status">
            <summary>
            Gets the read status.
            </summary>
        </member>
        <member name="P:CK.SharedDic.ReadElementObjectInfo.Key">
            <summary>
            Gets the name of the key read. Null if an error occured.
            </summary>
        </member>
        <member name="P:CK.SharedDic.ReadElementObjectInfo.ReadObject">
            <summary>
            Gets the object read from the stream. Null if an error occured.
            </summary>
        </member>
        <member name="P:CK.SharedDic.ReadElementObjectInfo.HasError">
            <summary>
            Gets a value indicating whether the read operation failed.
            </summary>
        </member>
        <member name="P:CK.SharedDic.ReadElementObjectInfo.CK#Core#ISimpleErrorMessage#IsWarning">
            <summary>
            Since an error does not stop the reading process (element is skipped), it 
            is more a warning than an error.
            </summary>
        </member>
        <member name="P:CK.SharedDic.ReadElementObjectInfo.ErrorMessage">
            <summary>
            Gets the error message if an error occured. Null otherwise.
            </summary>
        </member>
        <member name="P:CK.SharedDic.ReadElementObjectInfo.ErrorLine">
            <summary>
            Gets the line where the error occured. Defaults to -1.
            This information is available only if the stream supports this notion (text xml stream).
            </summary>
        </member>
        <member name="P:CK.SharedDic.ReadElementObjectInfo.ErrorColumn">
            <summary>
            Gets the column where the error occured. Defaults to -1.
            This information is available only if the stream supports this notion (text xml stream).
            </summary>
        </member>
        <member name="T:CK.SharedDic.ReadElementObjectInfo.ReadStatus">
            <summary>
            Defines the result of a an element read from a Xml stream.
            </summary>
        </member>
        <member name="F:CK.SharedDic.ReadElementObjectInfo.ReadStatus.NullData">
            <summary>
            Set when a null object has been read.
            </summary>
        </member>
        <member name="F:CK.SharedDic.ReadElementObjectInfo.ReadStatus.SimpleTypeData">
            <summary>
            Set when a simple typed object (not null) has been read.
            </summary>
        </member>
        <member name="F:CK.SharedDic.ReadElementObjectInfo.ReadStatus.XmlSerializable">
            <summary>
            Set when an <see cref="T:System.Xml.Serialization.IXmlSerializable"/> object has been read.
            </summary>
        </member>
        <member name="F:CK.SharedDic.ReadElementObjectInfo.ReadStatus.BinaryObject">
            <summary>
            Set when a serialized object has been read.
            </summary>
        </member>
        <member name="F:CK.SharedDic.ReadElementObjectInfo.ReadStatus.ErrorXmlRead">
            <summary>
            Set when a general Xml error occured such as a missing end tag or any malformed xml. 
            </summary>
        </member>
        <member name="F:CK.SharedDic.ReadElementObjectInfo.ReadStatus.ErrorWhileReadingElementObject">
            <summary>
            Set when an error occured during the read of a data element.
            </summary>
        </member>
        <member name="F:CK.SharedDic.ReadElementObjectInfo.ReadStatus.ErrorTypeAttributeMissing">
            <summary>
            Set when the required type="xxx" attribute is missing.
            </summary>
        </member>
        <member name="F:CK.SharedDic.ReadElementObjectInfo.ReadStatus.ErrorUnknownTypeAttribute">
            <summary>
            Set when the type="xxx" attribute references an unknown type.
            </summary>
        </member>
        <member name="F:CK.SharedDic.ReadElementObjectInfo.ReadStatus.ErrorKeyAttributeMissing">
            <summary>
            Set when the required key="key" attribute is missing.
            </summary>
        </member>
        <member name="F:CK.SharedDic.ReadElementObjectInfo.ReadStatus.ErrorUnknownObjectElement">
            <summary>
            Set when reading multiple objects when an unknown object element is skipped. 
            </summary>
        </member>
        <member name="F:CK.SharedDic.ReadElementObjectInfo.ReadStatus.ErrorGuidAttributeMissing">
            <summary>
            Set when the required guid="..." attribute is missing.
            </summary>
        </member>
        <member name="F:CK.SharedDic.ReadElementObjectInfo.ReadStatus.ErrorVersionAttributeInvalid">
            <summary>
            Set when the version="..." attribute is invalid.
            </summary>
        </member>
        <member name="F:CK.SharedDic.ReadElementObjectInfo.ReadStatus.ErrorMask">
            <summary>
            Mask that covers all the errors.
            </summary>
        </member>
    </members>
</doc>
