<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CK.Reflection</name>
    </assembly>
    <members>
        <member name="T:CK.Reflection.R">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CK.Reflection.R.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CK.Reflection.R.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CK.Reflection.R.InterfaceTypeExpected">
            <summary>
              Looks up a localized string similar to The given type must be the Type of an interface..
            </summary>
        </member>
        <member name="T:CK.Reflection.ReflectionHelper">
            <summary>
            Reflection related helpers methods that can not (really) be defined as extension methods.
            </summary>
        </member>
        <member name="M:CK.Reflection.ReflectionHelper.GetPropertyInfo``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Retrieves a <see cref="T:System.Reflection.PropertyInfo"/> from a lambda function based on an instance of the holder.
            </summary>
            <typeparam name="THolder">Property holder type (will be inferred by the compiler).</typeparam>
            <typeparam name="TProperty">Property type (will be inferred by the compiler).</typeparam>
            <param name="source">An instance of the <typeparamref name="THolder"/>.</param>
            <param name="propertyLambda">A lambda function that selects the property.</param>
            <returns>Corresponding property information.</returns>
        </member>
        <member name="M:CK.Reflection.ReflectionHelper.CreateSetter``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},CK.Reflection.ReflectionHelper.CreateInvalidSetterOption)">
            <summary>
            Creates a setter fo a property. 
            </summary>
            <typeparam name="THolder">Property holder type (will be inferred by the compiler).</typeparam>
            <typeparam name="TProperty">Property type (will be inferred by the compiler).</typeparam>
            <param name="source">An instance of the <typeparamref name="THolder"/>.</param>
            <param name="propertyLambda">A lambda function that selects the property.</param>
            <returns>An action that takes an holder instance and the value to set.</returns>
        </member>
        <member name="M:CK.Reflection.ReflectionHelper.GetPropertyInfo``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Retrieves a <see cref="T:System.Reflection.PropertyInfo"/> from a lambda function without requiring an instance of the holder 
            object and without any constraint for the type of the property.
            </summary>
            <typeparam name="THolder">Property holder type.</typeparam>
            <param name="propertyLambda">A lambda function that selects the property as an object.</param>
            <returns>Corresponding property information.</returns>
        </member>
        <member name="M:CK.Reflection.ReflectionHelper.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Retrieves a <see cref="T:System.Reflection.PropertyInfo"/> from a lambda function.
            </summary>
            <typeparam name="THolder">Property holder type.</typeparam>
            <typeparam name="TProperty">Property type.</typeparam>
            <param name="propertyLambda">A lambda function that selects the property.</param>
            <returns>Corresponding property information.</returns>
        </member>
        <member name="M:CK.Reflection.ReflectionHelper.CreateSetter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},CK.Reflection.ReflectionHelper.CreateInvalidSetterOption)">
            <summary>
            Creates a setter fo a property. 
            </summary>
            <typeparam name="THolder">Property holder type.</typeparam>
            <typeparam name="TProperty">Property type.</typeparam>
            <param name="propertyLambda">A lambda function that selects the property.</param>
            <returns>An action that takes an holder instance and the value to set.</returns>
        </member>
        <member name="M:CK.Reflection.ReflectionHelper.GetPropertyInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Retrieves a <see cref="T:System.Reflection.PropertyInfo"/> from a parameterless lambda function: a closure is actually required
            and the compiler generates one automatically.
            </summary>
            <typeparam name="TProperty">Property type.</typeparam>
            <param name="propertyLambda">A lambda function that selects a property (from the current syntaxic context).</param>
            <returns>Corresponding property information.</returns>
        </member>
        <member name="M:CK.Reflection.ReflectionHelper.CreateParametersType(System.Reflection.ParameterInfo[],System.Int32)">
            <summary>
            Creates an array of type of a method parameters.
            </summary>
            <param name="parametersInfo">Parameters from which type must be extracted.</param>
            <param name="startIndex">The zero-based starting parameter position.</param>
            <returns>Parameters' types.</returns>
        </member>
        <member name="M:CK.Reflection.ReflectionHelper.CreateParametersType(System.Reflection.ParameterInfo[])">
            <summary>
            Creates an array of type of a method parameters.
            </summary>
            <param name="parametersInfo">Parameters from which type must be extracted.</param>
            <returns>Parameters' types.</returns>
            <remarks>
            Implementation is faster (and more simple?) than using a linq select...
            </remarks>
        </member>
        <member name="M:CK.Reflection.ReflectionHelper.CreateParametersType(System.Reflection.ParameterInfo[],System.Type)">
            <summary>
            Creates an array of type of a method parameters.
            </summary>
            <param name="m">The method for which parameter types must be extracted.</param>
            <param name="typeToPrepend">Type that must be injected as the fist type in the resulting array 
            (typically the <see cref="P:System.Reflection.MemberInfo.DeclaringType">declaring type of the method</see> - the this parameter).</param>
            <returns>Parameters' types.</returns>
            <remarks>
            Implementation is faster (and more simple?) than using a linq select...
            </remarks>
        </member>
        <member name="M:CK.Reflection.ReflectionHelper.GetFlattenMethods(System.Type)">
            <summary>
            Gets all methods (including inherited methods and methods with special names like get_XXX 
            and others add_XXX) of the given interface type.
            </summary>
            <param name="interfaceType">Type to process, must be an interface.</param>
            <returns><see cref="!:IEnumerable"/> of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:CK.Reflection.ReflectionHelper.GetFlattenProperties(System.Type)">
            <summary>
            Gets all properties (including inherited properties) of the given interface type.
            </summary>
            <param name="interfaceType">Type to process, must be an interface.</param>
            <returns><see cref="!:IEnumerable"/> of <see cref="T:System.Reflection.PropertyInfo"/>.</returns>
        </member>
        <member name="M:CK.Reflection.ReflectionHelper.GetFlattenEvents(System.Type)">
            <summary>
            Gets all events (including inherited events) of the given interface type.
            </summary>
            <param name="interfaceType">Type to process, must be an interface.</param>
            <returns><see cref="!:IEnumerable"/> of <see cref="T:System.Reflection.EventInfo"/>.</returns>
        </member>
        <member name="M:CK.Reflection.ReflectionHelper.GetFlattenMembers``1(System.Type,System.Func{System.Type,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements returned by the <paramref name="getFunction"/>.
            </summary>
            <typeparam name="T">Type of the element that you're looking for. <see cref="T:System.Reflection.MethodInfo"/> for example.</typeparam>
            <param name="interfaceType">Type to process, it must be an interface.</param>
            <param name="getFunction">Function that takes a type and return an <see cref="T:System.Collections.Generic.IEnumerable`1"/>, a possible implementation can be the lambda <c>t =&gt; t.GetMethods()</c></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements returned by the <paramref name="getFunction"/>.</returns>
        </member>
        <member name="M:CK.Reflection.ReflectionHelper.CovariantMatch(System.Type,System.Type)">
            <summary>
            Checks whether a type is "above" (or "more general than") another one. 
            This check uses <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> when the main type is not generic. 
            For generics (be it an interface or a class), inheritance relations are used recursively on 
            generic parameters: the "is assignable from" semantics is lost in favor of a more 
            relaxed relation, for instance <c>IEnumerable[ICollection[ValueType]]</c> "Covariant matches" with <c>IEnumerable[IList[int]]</c>.
            </summary>
            <param name="mainType">The "main type" (the one that must be "more general than" <paramref name="toMatch"/>).</param>
            <param name="toMatch">The type to match.</param>
            <returns>True if <paramref name="mainType"/> is "above" <paramref name="toMatch"/>.</returns>
        </member>
        <member name="T:CK.Reflection.ReflectionHelper.CreateInvalidSetterOption">
            <summary>
            Describes the behavior of <see cref="M:CK.Reflection.ReflectionHelper.CreateSetter``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},CK.Reflection.ReflectionHelper.CreateInvalidSetterOption)"/> methods when no setter exists 
            on the property.
            </summary>
        </member>
        <member name="F:CK.Reflection.ReflectionHelper.CreateInvalidSetterOption.ThrowException">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>. This is the default.
            </summary>
        </member>
        <member name="F:CK.Reflection.ReflectionHelper.CreateInvalidSetterOption.NullAction">
            <summary>
            Returns a null action delegate.
            </summary>
        </member>
        <member name="F:CK.Reflection.ReflectionHelper.CreateInvalidSetterOption.VoidAction">
            <summary>
            Returns a void action (an action that does nothing).
            </summary>
        </member>
        <member name="T:CK.Reflection.ObjectAndTypeExtension">
            <summary>
            Utility methods for common reflection tasks.
            Adapted from http://kennethxublogsource.googlecode.com/svn/trunk/CommonReflection/src/Common.Reflection/Reflections.cs
            by Kenneth Xu.
            </summary>
        </member>
        <member name="M:CK.Reflection.ObjectAndTypeExtension.GetStaticInvoker``1(System.Type,System.String)">
            <summary>
            Extension method to obtain a delegate of type <typeparamref name="TDelegate"/> that can be used to call the 
            static method with given method <paramref name="name"/> from given <paramref name="type"/>. The method signature must be compatible
            with the parameter and return type of <typeparamref name="TDelegate"/>.
            </summary>
            <typeparam name="TDelegate">Type of a .Net delegate.</typeparam>
            <param name="type">The type to locate the compatible method.</param>
            <param name="name">The name of the method.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/> or null when no matching method if found.</returns>
        </member>
        <member name="M:CK.Reflection.ObjectAndTypeExtension.GetStaticInvoker``1(System.Type,System.String,System.Boolean)">
            <summary>
            Extension method to obtain a delegate of type <typeparamref name="TDelegate"/> that can be used to call the 
            static method with given method <paramref name="name"/> from given <paramref name="type"/>. The method signature must be compatible  
            with the parameter and return type of <typeparamref name="TDelegate"/>.
            </summary>
            <typeparam name="TDelegate">Type of a .Net delegate.</typeparam>
            <param name="type">The type to locate the compatible method.</param>
            <param name="name">The name of the method.</param>
            <param name="throwOnError">True to raise a <see cref="T:System.MissingMethodException"/> when not found.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/> or null if the method has not been found and <paramref name="throwOnError"/> is false.</returns>
            <exception name="MissingMethodException">When there is no matching method found and <paramref name="throwOnError"/> is true.</exception>
        </member>
        <member name="M:CK.Reflection.ObjectAndTypeExtension.GetInstanceInvoker``1(System.Type,System.String)">
            <summary>
            Extension method to obtain a delegate of type <typeparamref name="TDelegate"/> that can be used to call the 
            instance method with given method <paramref name="name"/> from given <paramref name="type"/>. The first parameter type of <c>TDelegate</c> 
            must be assignable to the given <paramref name="type"/>. The rest parameters and return type of <c>TDelegate</c> must be compatible with 
            the signature of the method.
            </summary>
            <typeparam name="TDelegate">Type of a .Net delegate.</typeparam>
            <param name="type">The type to locate the compatible method.</param>
            <param name="name">The name of the method.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/> or null when no matching method if found.</returns>
        </member>
        <member name="M:CK.Reflection.ObjectAndTypeExtension.GetInstanceInvoker``1(System.Type,System.String,System.Boolean)">
            <summary>
            Extension method to obtain a delegate of type <typeparamref name="TDelegate"/> that can be used to call the 
            instance method with given method <paramref name="name"/> from given <paramref name="type"/>. The first parameter type of <c>TDelegate</c> 
            must be assignable to the given <paramref name="type"/>. The rest parameters and return type of <c>TDelegate</c> must be compatible with 
            the signature of the method.
            </summary>
            <typeparam name="TDelegate">Type of a .Net delegate.</typeparam>
            <param name="type">The type to locate the compatible method.</param>
            <param name="name">The name of the method.</param>
            <param name="throwOnError">True to raise a <see cref="T:System.MissingMethodException"/> when not found.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/> or null when no matching method if found and <paramref name="throwOnError"/> is false.</returns>
            <exception name="MissingMethodException">When there is no matching method found and <paramref name="throwOnError"/> is true.</exception>
        </member>
        <member name="M:CK.Reflection.ObjectAndTypeExtension.GetInstanceInvoker``1(System.Object,System.String)">
            <summary>
            Extension method to obtain a delegate of type <typeparamref name="TDelegate"/> that can be used to call the 
            instance method with given method <paramref name="name"/> on specific <paramref name="obj">object</paramref>. 
            The method signature must be compatible with the signature of <typeparamref name="TDelegate"/>.
            </summary>
            <typeparam name="TDelegate">Type of a .Net delegate.</typeparam>
            <param name="obj">The object instance to find the method.</param>
            <param name="name">The name of the method.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/> or null when no matching method if found.</returns>
        </member>
        <member name="M:CK.Reflection.ObjectAndTypeExtension.GetInstanceInvoker``1(System.Object,System.String,System.Boolean)">
            <summary>
            Extension method to obtain a delegate of type <typeparamref name="TDelegate"/> that can be used to call the 
            instance method with given method <paramref name="name"/> on specific <paramref name="obj">object</paramref>. 
            The method signature must be compatible with the signature of <typeparamref name="TDelegate"/>.
            </summary>
            <typeparam name="TDelegate">Type of a .Net delegate.</typeparam>
            <param name="obj">The object instance to find the method.</param>
            <param name="name">The name of the method.</param>
            <param name="throwOnError">True to raise a <see cref="T:System.MissingMethodException"/> when not found.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/> or null when no matching method if found and <paramref name="throwOnError"/> is false.</returns>
            <exception name="MissingMethodException">When there is no matching method found and <paramref name="throwOnError"/> is true.</exception>
        </member>
        <member name="M:CK.Reflection.ObjectAndTypeExtension.GetNonVirtualInvoker``1(System.Type,System.String)">
            <summary>
            Extension method to obtain a delegate of type specified by parameter <typeparamref name="TDelegate"/> that can be used to make non virtual
            call to instance method with given method <paramref name="name"/> on given <paramref name="type"/>.
            The first parameter type of <c>TDelegate</c> must be assignable to the given <paramref name="type"/>.
            Remaining parameters and return type of <c>TDelegate</c> must be compatible with the signature of the method.
            </summary>
            <typeparam name="TDelegate">Type of a .Net delegate.</typeparam>
            <param name="type">The type to locate the compatible method.</param>
            <param name="name">The name of the method.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/> or null when no matching method if found.</returns>
        </member>
        <member name="M:CK.Reflection.ObjectAndTypeExtension.GetNonVirtualInvoker``1(System.Type,System.String,System.Boolean)">
            <summary>
            Extension method to obtain a delegate of type specified by parameter <typeparamref name="TDelegate"/> that can be used to make non virtual
            call to instance method with given method <paramref name="name"/> on given <paramref name="type"/>.
            The first parameter type of <c>TDelegate</c> must be assignable to the given <paramref name="type"/>.
            Remaining parameters and return type of <c>TDelegate</c> must be compatible with the signature of the method.
            </summary>
            <typeparam name="TDelegate">Type of a .Net delegate.</typeparam>
            <param name="type">The type to locate the compatible method.</param>
            <param name="name">The name of the method.</param>
            <param name="throwOnError">True to raise a <see cref="T:System.MissingMethodException"/> when not found.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/> or null when no matching method if found and <paramref name="throwOnError"/> is false.</returns>
            <exception name="MissingMethodException">When there is no matching method found and <paramref name="throwOnError"/> is true.</exception>
        </member>
        <member name="M:CK.Reflection.ObjectAndTypeExtension.GetNonVirtualInvoker``1(System.Object,System.Type,System.String)">
            <summary>
            Extension method to obtain a delegate of type specified by parameter <typeparamref name="TDelegate"/> that can be used to make non virtual
            call on the specific <paramref name="obj">object</paramref> to the instance method of given <paramref name="name"/> defined in the 
            given <paramref name="type"/> or its ancestor.
            The method signature must be compatible with the signature of <typeparamref name="TDelegate"/>.
            </summary>
            <typeparam name="TDelegate">Type of a .Net delegate.</typeparam>
            <param name="obj">The object instance to invoke the method.</param>
            <param name="type">The type to find the method.</param>
            <param name="name">The name of the method.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/> or null when no matching method if found.</returns>
        </member>
        <member name="M:CK.Reflection.ObjectAndTypeExtension.GetNonVirtualInvoker``1(System.Object,System.Type,System.String,System.Boolean)">
            <summary>
            Extension method to obtain a delegate of type specified by parameter <typeparamref name="TDelegate"/> that can be used to make non virtual
            call on the specific <paramref name="obj">object</paramref> to the instance method of given <paramref name="name"/> defined in the 
            given <paramref name="type"/> or its ancestor.
            The method signature must be compatible with the signature of <typeparamref name="TDelegate"/>.
            </summary>
            <typeparam name="TDelegate">Type of a .Net delegate.</typeparam>
            <param name="obj">The object instance to invoke the method.</param>
            <param name="type">The type to find the method.</param>
            <param name="name">The name of the method.</param>
            <param name="throwOnError">True to raise a <see cref="T:System.MissingMethodException"/> when not found.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/> or null when no matching method if found and <paramref name="throwOnError"/> is false.</returns>
            <exception name="MissingMethodException">When there is no matching method found and <paramref name="throwOnError"/> is true.</exception>
        </member>
        <member name="M:CK.Reflection.ObjectAndTypeExtension.GetInvoker``1(System.Object,System.Type,System.String,System.Reflection.BindingFlags,System.Predicate{System.Reflection.MethodInfo},System.String,System.Boolean)">
            <summary>
            This is a more general purpose method to obtain a delegate of type specified by parameter <typeparamref name="TDelegate"/> that can 
            be used to call on the specific <paramref name="obj">object</paramref> to the method of given <paramref name="name"/> defined in the given 
            <paramref name="type"/> or its ancestor. The method signature must be compatible with the signature of <typeparamref name="TDelegate"/>.
            </summary>
            <typeparam name="TDelegate">Type of a .Net delegate.</typeparam>
            <param name="obj">The object instance to invoke the method or null for static methods and open instance methods.</param>
            <param name="type">The type to find the method.</param>
            <param name="name">The name of the method.</param>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted. -or- Zero, to return null.</param>
            <param name="filter">The additional filter to include/exclude methods.</param>
            <param name="filterMessage">The description of the additional filter criteria that will be included in the exception message when no matching method found.</param>
            <param name="throwOnError">True to raise a <see cref="T:System.MissingMethodException"/> when not found.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/>.</returns>
            <exception name="MissingMethodException">When there is no matching method found.</exception>
        </member>
        <member name="T:CK.Reflection.ILGeneratorExtension">
            <summary>
            Provides extension methods on <see cref="T:System.Reflection.Emit.ILGenerator"/> class.
            </summary>
        </member>
        <member name="M:CK.Reflection.ILGeneratorExtension.RepushActualParameters(System.Reflection.Emit.ILGenerator,System.Boolean,System.Int32)">
            <summary>
            Emits the optimal IL to push the actual parameter values on the stack (<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_0"/>... <see cref="F:System.Reflection.Emit.OpCodes.Ldarg"/>).
            </summary>
            <param name="g">This <see cref="T:System.Reflection.Emit.ILGenerator"/> object.</param>
            <param name="startAtArgument0">False to skip the very first argument: for a method instance Arg0 is the 'this' object (see <see cref="T:System.Reflection.CallingConventions"/>) HasThis and ExplicitThis).</param>
            <param name="count">Number of parameters to push.</param>
        </member>
        <member name="M:CK.Reflection.ILGeneratorExtension.LdLoc(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Emits the IL to push (<see cref="F:System.Reflection.Emit.OpCodes.Ldloc"/>) the given local on top of the stack.
            </summary>
            <param name="g">This <see cref="T:System.Reflection.Emit.ILGenerator"/> object.</param>
            <param name="local">The local variable to push.</param>
        </member>
        <member name="M:CK.Reflection.ILGeneratorExtension.StLoc(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Emits the IL to pop (<see cref="F:System.Reflection.Emit.OpCodes.Stloc"/>) the top of the stack into a local variable.
            </summary>
            <param name="g">This <see cref="T:System.Reflection.Emit.ILGenerator"/> object.</param>
            <param name="local">The local variable to pop.</param>
        </member>
        <member name="M:CK.Reflection.ILGeneratorExtension.LdInt32(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Emits the IL to push the integer (emits the best opcode depending on the value: <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_0"/> 
            or <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1"/> for instance) value onto the stack.
            </summary>
            <param name="g">This <see cref="T:System.Reflection.Emit.ILGenerator"/> object.</param>
            <param name="i">The integer value to push.</param>
        </member>
        <member name="M:CK.Reflection.ILGeneratorExtension.LdArg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Emits the IL to push (<see cref="F:System.Reflection.Emit.OpCodes.Ldarg"/>) the actual argument at the given index onto the stack.
            </summary>
            <param name="g">This <see cref="T:System.Reflection.Emit.ILGenerator"/> object.</param>
            <param name="i">Parameter index (0 being the 'this' for instance method).</param>
        </member>
        <member name="M:CK.Reflection.ILGeneratorExtension.StArg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Emits the IL to pop (<see cref="F:System.Reflection.Emit.OpCodes.Starg"/>) the top of the stach into the actual argument at the given index.
            </summary>
            <param name="g">This <see cref="T:System.Reflection.Emit.ILGenerator"/> object.</param>
            <param name="i">Parameter index (0 being the 'this' for instance method).</param>
        </member>
        <member name="M:CK.Reflection.ILGeneratorExtension.CreateObjectArrayFromInstanceParameters(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder,System.Type[])">
            <summary>
            Emits the IL to create a new array (<see cref="F:System.Reflection.Emit.OpCodes.Newarr"/>) of objects and fills 
            it with the actual arguments of the method skipping the very first one: this must be used
            only inside a method with <see cref="F:System.Reflection.CallingConventions.HasThis"/> set.
            </summary>
            <param name="g">This <see cref="T:System.Reflection.Emit.ILGenerator"/> object.</param>
            <param name="array">The local variable.</param>
            <param name="parameters">Type of the method parameters.</param>
        </member>
    </members>
</doc>
