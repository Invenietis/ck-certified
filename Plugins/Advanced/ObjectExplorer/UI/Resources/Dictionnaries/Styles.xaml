<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ck="clr-namespace:CK.WPF.Controls;assembly=CK.WPF.Controls"
                    xmlns:ckwc="clr-namespace:CK.Windows;assembly=CK.Windows.Core"
                    xmlns:oe="clr-namespace:CK.Plugins.ObjectExplorer"
                    xmlns:p="clr-namespace:CK.Plugin.Config;assembly=CK.Plugin.Config.Model"
                    xmlns:pm="clr-namespace:CK.Plugin;assembly=CK.Plugin.Model"
                    xmlns:loe="clr-namespace:CK.Plugins.ObjectExplorer.ViewModels.LogViewModels"                    
                    xmlns:uc="clr-namespace:CK.Plugins.ObjectExplorer.UI.UserControls"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <!-- Resources used by other datatemplates. -->
    
    <!-- See : http://www.codeproject.com/Articles/36451/Organizing-Heterogeneous-Data-on-a-WPF-TreeView.aspx -->
    <!-- See also : http://www.codeproject.com/KB/WPF/TreeViewWithViewModel.aspx -->
    <ckwc:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <oe:SimpleStringFormatConverter x:Key="SimpleStringFormatConverter"/>
    <oe:MultiStringFormatConverter x:Key="MultiStringFormatConverter"/>
    <oe:AndConverter x:Key="AndMultiValueConverter"/>
    <oe:NXORConverter x:Key="NXORConverter"/>
    <oe:OrConverter x:Key="OrConverter"/>

    <oe:EnumDisplayer Type="{x:Type pm:RunningRequirement}" x:Key="RunningRequirement">
        <oe:EnumDisplayEntry x:Uid="RunningRequirement-optional" EnumValue="Optional" DisplayString="Optional (default)"/>
        <oe:EnumDisplayEntry x:Uid="RunningRequirement-optionaltrystart" EnumValue="OptionalTryStart" DisplayString="Optional try start"/>
        <oe:EnumDisplayEntry x:Uid="RunningRequirement-mustexist" EnumValue="MustExist" DisplayString="Must exist"/>
        <oe:EnumDisplayEntry x:Uid="RunningRequirement-mustexisttrystart" EnumValue="MustExistTryStart" DisplayString="Must exist and try start"/>
        <oe:EnumDisplayEntry x:Uid="RunningRequirement-mustexistandrun" EnumValue="MustExistAndRun" DisplayString="Must exist and run"/>
    </oe:EnumDisplayer>


    <SolidColorBrush Color="#FFF6F6F6" x:Key="FirstLayerColor" />
    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
    
    <!-- Transforms Button on HyperLink -->
    <Style TargetType="Button" x:Key="TextButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock x:Name="Content" Text="{TemplateBinding Content}" Cursor="Hand"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Content" Property="TextDecorations" Value="Underline"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Used to have aligned checkboxes in the logGridView -->
    <Style TargetType="ListViewItem" x:Key="LVIContentAlignementStyle">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    </Style>    
    
    <!-- Seperator -->
    <Style TargetType="Separator">
        <Setter Property="Margin" Value="0 3" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
    </Style>

    <!-- Border -->
    <Style TargetType="Border">
        <Setter Property="CornerRadius" Value="3"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>

    <!-- Round border template -->
    <Style TargetType="Border" x:Key="roundedBorder">
        <Setter Property="CornerRadius" Value="3"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>

    <!-- TreeView -->
    <Style TargetType="TreeView">
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <!-- TextBlock -->
    <Style TargetType="TextBlock">
        <Setter Property="Margin" Value="0 2"/>
    </Style>

    <!-- TreeViewItemFocusVisual -->
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ExpandCollapseToggleStyle -->
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="16" Height="16" Background="Transparent" Padding="5,5,5,5">
                        <Path x:Name="ExpandPath" Fill="Transparent" Stroke="#FF989898" Data="{StaticResource TreeArrow}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterX="3" CenterY="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1BBBFA"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterX="3" CenterY="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TreeViewItem -->
    <Style TargetType="TreeViewItem">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="Bd" SnapsToDevicePixels="true" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- HeaderedTVI -->
    <Style TargetType="TreeViewItem" x:Key="HeaderedTVI">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="Bd" SnapsToDevicePixels="true" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                            <StackPanel Orientation="Horizontal">
                                <Image Stretch="Fill" StretchDirection="Both" VerticalAlignment="Stretch" Width="16" Height="16" Margin="0,0,3,0" Source="{Binding Path=(oe:TreeViewItemImage.Image), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control} }}" />
                                <ContentPresenter x:Name="PART_Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header"/>
                            </StackPanel>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- HeaderedSelectableTVI -->
    <Style TargetType="TreeViewItem" x:Key="HeaderedSelectableTVI">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="Bd" SnapsToDevicePixels="true" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                            <StackPanel Orientation="Horizontal">
                                <Image Stretch="Fill" StretchDirection="Both" VerticalAlignment="Stretch" Width="16" Height="16" Margin="0,0,3,0" Source="{Binding Path=(oe:TreeViewItemImage.Image), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control} }}" />
                                <ContentPresenter x:Name="PART_Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header"/>
                            </StackPanel>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- DeleteButton Style -->
    <Style TargetType="{x:Type Button}" x:Key="DeleteButtonStyle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Image x:Name="DeleteButtonImage" Width="10" Height="10" Source="../LogImages/Cross.png"/>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsMouseOver}" Value="True">
                            <Setter TargetName="DeleteButtonImage" Property="Source" Value="../LogImages/PushedCross.png"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBox ItemContainerStyle -->
    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid Name="container">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"></ColumnDefinition>
                            <ColumnDefinition Width="20"></ColumnDefinition>
                        </Grid.ColumnDefinitions>

                        <StackPanel Grid.Column="0" Orientation="Horizontal">
                            <TextBlock Text="{Binding Name}"/>
                            <TextBlock Visibility="Collapsed" Name="ServiceIsDirtyIndicator" Text="*" Foreground="Red"/>
                        </StackPanel>
                        <Button Name="DeleteBtn"
                    Margin="5 0 0 0"
                    Grid.Column="1" 
                    Visibility="Collapsed" 
                    VerticalAlignment="Center" 
                    Command="{Binding DeleteCommand}"
                    Style="{DynamicResource DeleteButtonStyle}">
                        </Button>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger  Binding="{Binding IsDirty}" Value="True">
                            <Setter TargetName="ServiceIsDirtyIndicator" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsBound}" Value="True">
                            <!-- TODO : Value="False"-->
                            <Setter TargetName="DeleteBtn" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="container" Property="Background" Value="LightGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- StackPanel styles -->
    <Style TargetType="{x:Type StackPanel}" x:Key="CollapsingMethodStackPanel">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Methods.Count}" Value="0">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type StackPanel}" x:Key="CollapsingEventStackPanel">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Events.Count}" Value="0">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type StackPanel}" x:Key="CollapsingPropertyStackPanel">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Properties.Count}" Value="0">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- GridViewHeaderTemplate -->
    <DataTemplate x:Key="GridViewHeaderTemplate">
        <TextBlock FontWeight="DemiBold" Text="{Binding}"/>
    </DataTemplate>

    <!-- ExpanderHeaderTemplate -->
    <DataTemplate x:Key="ExpanderHeaderTemplate">
        <TextBlock FontWeight="Bold" Text="{Binding}"/>
    </DataTemplate>
    
    <!-- BoldHeaderTemplate -->
    <DataTemplate x:Key="BoldHeaderTemplate">
        <TextBlock FontWeight="Bold" FontSize="14" Text="{Binding}"/>
    </DataTemplate>

</ResourceDictionary>