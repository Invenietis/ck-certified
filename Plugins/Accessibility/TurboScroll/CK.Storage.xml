<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CK.Storage</name>
    </assembly>
    <members>
        <member name="T:CK.Storage.ReaderBookmark">
            <summary>
            Implementation of <see cref="T:CK.Storage.IStructuredReaderBookmark"/> for <see cref="T:CK.Storage.SimpleStructuredReader"/>.
            </summary>
        </member>
        <member name="T:CK.Storage.IStructuredReaderBookmark">
            <summary>
            Defines a bookmark inside a structured content.
            A bookmark encapsulates a content fragment in order to delay the actual read process.
            </summary>
        </member>
        <member name="M:CK.Storage.IStructuredReaderBookmark.Restore(System.IServiceProvider)">
            <summary>
            Restores the state of a reader.
            </summary>
            <param name="baseServiceProvider">The <see cref="T:System.IServiceProvider"/> to use to obtain ambiant services.</param>
            <returns>A ready-to-use <see cref="T:CK.Storage.IStructuredReader"/> on the bookmark.</returns>
        </member>
        <member name="M:CK.Storage.IStructuredReaderBookmark.WriteBack(CK.Storage.IStructuredWriter)">
            <summary>
            Writes the bookmark back into a <see cref="T:CK.Storage.IStructuredWriter"/>.
            </summary>
            <param name="w">The <see cref="T:CK.Storage.IStructuredWriter"/> to write to.</param>
        </member>
        <member name="T:CK.Storage.SimpleStructuredReader">
            <summary>
            Factory for <see cref="T:CK.Storage.IStructuredReader"/> implementation.
            </summary>
        </member>
        <member name="M:CK.Storage.SimpleStructuredReader.CreateReader(System.IO.Stream,System.IServiceProvider)">
            <summary>
            Creates a simple (full xml based) <see cref="T:CK.Storage.IStructuredReader"/> instance.
            The inner stream will be closed whenever the reader will be disposed.
            </summary>
            <param name="stream">The stream.</param>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/> to use.</param>
            <returns>A reader bound to the <paramref name="stream"/>.</returns>
        </member>
        <member name="M:CK.Storage.SimpleStructuredReader.CreateReader(System.IO.Stream,System.IServiceProvider,System.Boolean)">
            <summary>
            Creates a simple (full xml based) <see cref="T:CK.Storage.IStructuredReader"/> instance.
            The inner stream will be closed whenever the reader will be disposed.
            </summary>
            <param name="stream">The stream.</param>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/> to use.</param>
            <param name="throwErrorOnMissingFile">True to throw an exception when the <paramref name="stream"/> parameter is null.</param>
            <returns>A reader bound to the <paramref name="stream"/> or null.</returns>
        </member>
        <member name="T:CK.Storage.StructuredReaderAndWriterExtension">
            <summary>
            Implements extension methods for <see cref="T:CK.Storage.IStructuredWriter"/> and <see cref="T:CK.Storage.IStructuredReader"/> interfaces.
            </summary>
        </member>
        <member name="M:CK.Storage.StructuredReaderAndWriterExtension.WriteObjectElement(CK.Storage.IStructuredWriter,System.String,System.Object)">
            <summary>
            Writes the given object into the structured output with the given element name.
            </summary>
            <param name="sw">This <see cref="T:CK.Storage.IStructuredWriter"/> object.</param>
            <param name="elementName">Name of the xml element.</param>
            <param name="o">Object to write. May be null.</param>
        </member>
        <member name="M:CK.Storage.StructuredReaderAndWriterExtension.WriteInlineObjectStructuredElement(CK.Storage.IStructuredWriter,System.String,System.Object)">
            <summary>
            Writes the given object into the structured output with the given element name.
            The object can be null, or a <see cref="T:CK.Storage.IStructuredSerializer`1"/> for its type can be found 
            in the services or the object must implement <see cref="T:CK.Storage.IStructuredSerializable"/> interface.
            </summary>
            <param name="sw">This <see cref="T:CK.Storage.IStructuredWriter"/> object.</param>
            <param name="elementName">Name of the xml element.</param>
            <param name="o">Object to write. May be null.</param>
        </member>
        <member name="M:CK.Storage.StructuredReaderAndWriterExtension.ReadObjectElement(CK.Storage.IStructuredReader,System.String)">
            <summary>
            Reads an object. The reader must be positioned on the element name.
            </summary>
            <param name="sr">This <see cref="T:CK.Storage.IStructuredReader"/> object.</param>
            <param name="elementName">Name of the xml element.</param>
            <returns>Object read.</returns>
        </member>
        <member name="M:CK.Storage.StructuredReaderAndWriterExtension.ReadObjectElement(CK.Storage.IStructuredReader,System.String,System.Object@)">
            <summary>
            Reads an object. The reader must be positioned on the element name.
            </summary>
            <param name="sr">This <see cref="T:CK.Storage.IStructuredReader"/> object.</param>
            <param name="elementName">Name of the xml element.</param>
            <param name="o">The object read. Null on error.</param>
            <returns>A <see cref="T:CK.Storage.StandardReadStatus"/> that may define an error.</returns>
        </member>
        <member name="M:CK.Storage.StructuredReaderAndWriterExtension.ReadInlineObjectStructured(CK.Storage.IStructuredReader,System.Type)">
            <summary>
            Reads an object that has been written with <see cref="M:CK.Storage.IStructuredWriter.WriteInlineObjectStructured(System.Object)"/>.
            </summary>
            <param name="sr">This <see cref="T:CK.Storage.IStructuredReader"/> object.</param>
            <param name="type">Type of the object to read. If a <see cref="T:CK.Storage.IStructuredSerializer`1"/> is available in the services, it is used, 
            otherwise, the type must both offer a default construtor and implement <see cref="T:CK.Storage.IStructuredSerializable"/>.</param>
            <returns>Deserialized object (can be null).</returns>
        </member>
        <member name="M:CK.Storage.StructuredReaderAndWriterExtension.ReadInlineObjectStructured(CK.Storage.IStructuredReader,System.Object)">
            <summary>
            Reads an object data that has been written with <see cref="M:CK.Storage.IStructuredWriter.WriteInlineObjectStructured(System.Object)"/>.
            </summary>
            <param name="sr">This <see cref="T:CK.Storage.IStructuredReader"/> object.</param>
            <param name="o">Object to read that has been previously created or reinitialized. Can not be null.</param>
            <returns>The object.</returns>
            <remarks>
            If a <see cref="T:CK.Storage.IStructuredSerializer`1"/> for the runtime type (obtained by <see cref="M:System.Object.GetType"/>) is available in the services,
            it will be used. Otherwise, the object must implement <see cref="T:CK.Storage.IStructuredSerializable"/>.
            </remarks>
        </member>
        <member name="M:CK.Storage.StructuredReaderAndWriterExtension.ReadInlineObjectStructuredElement(CK.Storage.IStructuredReader,System.String,System.Object)">
            <summary>
            Reads an object data that has been written with <see cref="M:CK.Storage.StructuredReaderAndWriterExtension.WriteInlineObjectStructuredElement(CK.Storage.IStructuredWriter,System.String,System.Object)"/>.
            If the reader is not positioned on the <paramref name="elementName"/>, an <see cref="T:System.Xml.XmlException"/> is thrown.
            </summary>
            <param name="sr">This <see cref="T:CK.Storage.IStructuredReader"/> object.</param>
            <param name="elementName">Name of the Xml element.</param>
            <param name="o">Object to read that has been previously created or reinitialized. Can not be null.</param>
            <returns>The object.</returns>
            <remarks>
            If a <see cref="T:CK.Storage.IStructuredSerializer`1"/> for the runtime type (obtained by <see cref="M:System.Object.GetType"/>) is available in the services,
            it will be used. Otherwise, the object must implement <see cref="T:CK.Storage.IStructuredSerializable"/>.
            </remarks>
        </member>
        <member name="T:CK.Storage.SimpleStructuredWriter">
            <summary>
            Factory for <see cref="T:CK.Storage.IStructuredWriter"/> implementation.
            </summary>
        </member>
        <member name="M:CK.Storage.SimpleStructuredWriter.CreateWriter(System.IO.Stream,System.IServiceProvider)">
            <summary>
            Creates an opened standard <see cref="T:CK.Storage.SimpleStructuredWriter"/>.
            The inner stream will be closed whenever the writer will be disposed.
            </summary>
            <param name="stream">Underlying stream.</param>
            <param name="baseServiceProvider">Optional <see cref="T:System.IServiceProvider"/>.</param>
            <returns>An opened, ready to use, <see cref="T:CK.Storage.SimpleStructuredWriter"/> (that must be disposed once done).</returns>
        </member>
        <member name="T:CK.Storage.ObjectReadExDataEventArgs">
            <summary>
            Provides data for <see cref="E:CK.Storage.IStructuredReader.ObjectReadExData"/> event.
            </summary>
        </member>
        <member name="F:CK.Storage.ObjectReadExDataEventArgs.Obj">
            <summary>
            Gets the object read.
            </summary>
        </member>
        <member name="F:CK.Storage.ObjectReadExDataEventArgs.Reader">
            <summary>
            Gets the structured reader. The reader is postionned on
            the element.
            </summary>
        </member>
        <member name="M:CK.Storage.ObjectReadExDataEventArgs.#ctor(CK.Storage.IStructuredReader,System.Object)">
            <summary>
            Initializes a new <see cref="T:CK.Storage.ObjectWriteExDataEventArgs"/>.
            </summary>
            <param name="r">Structured reader.</param>
            <param name="o">Object read.</param>
        </member>
        <member name="P:CK.Storage.ObjectReadExDataEventArgs.Handled">
            <summary>
            Gets or sets whether the extra element has been read.
            It must be set to true as soon as the <see cref="P:CK.Storage.IStructuredReader.Xml"/> reader
            has been forwarded.
            </summary>
        </member>
        <member name="T:CK.Storage.ISubStructuredReader">
            <summary>
            Specialized <see cref="T:CK.Storage.IStructuredReader"/>. Such subordinate readers
            are obtained through <see cref="M:CK.Storage.IStructuredReader.OpenSubReader"/>.
            As specialized IStructuredReader, they must be disposed by the caller.
            </summary>
        </member>
        <member name="T:CK.Storage.IStructuredReader">
            <summary>
            The interface to read information from a simple, potentially hybrid, structured storage. 
            The heart of the storage is an Xml stream exposed here as the <see cref="P:XmlReader"/> property. 
            It can be easily extended since it implements <see cref="T:System.IServiceProvider"/> and contains a <see cref="T:CK.Core.ISimpleServiceContainer"/>.
            </summary>
            <remarks>
            Since <see cref="T:System.IDisposable"/> is implemented, you must call <see cref="M:System.IDisposable.Dispose"/> when
            you are finished reading.
            </remarks>
        </member>
        <member name="M:CK.Storage.IStructuredReader.CreateBookmark">
            <summary>
            Creates a bookmark for this reader. A bookmark will be able to restore a <see cref="T:CK.Storage.IStructuredReader"/>
            similar to this one.
            </summary>
            <returns>A bookmark.</returns>
        </member>
        <member name="M:CK.Storage.IStructuredReader.OpenSubReader">
            <summary>
            Returns a <see cref="T:CK.Storage.ISubStructuredReader"/> that can be used to read the current node,
            and all its descendants from the <see cref="P:XmlReader"/>. 
            <see cref="M:XmlReader.ReadSubtree()"/> is called on the reader and the subordinate reader
            is positionned on the current element. The <see cref="M:System.IDisposable.Dispose">Dispose</see>
            method must be called before reading again on this reader.
            </summary>
            <returns>The reader bound to the subordinated elements.</returns>
        </member>
        <member name="M:CK.Storage.IStructuredReader.ReadInlineObject(CK.Storage.StandardReadStatus@)">
            <summary>
            Reads an object from the storage.
            </summary>
            <param name="status">A <see cref="T:CK.Storage.StandardReadStatus"/> that describes the result of the read (type and/or error occurence).</param>
            <returns>Deserialized object (can be null).</returns>
            <exception cref="T:System.Exception">Any exceptions related to read operations may be thrown by this method. BUT in any case, 
            the Xml reader head is forwarded allowing the caller to safely continue reading the stream, ignoring the exceptions.</exception>
        </member>
        <member name="M:CK.Storage.IStructuredReader.ReadInlineObjectStructured(System.Type,System.Object)">
            <summary>
            Reads an object that has been written with <see cref="M:CK.Storage.IStructuredWriter.WriteInlineObjectStructured(System.Object)"/> by providing 
            a <see cref="T:System.Type"/> or an existing object instance (both can not be null at the same time).
            <para>
            If both are provided, the type is used to lookup for a <see cref="T:CK.Storage.IStructuredSerializer`1"/> in the services and to delegate
            it the read if it exists. Otherwise, the object must implement <see cref="T:CK.Storage.IStructuredSerializable"/>.
            </para>
            <para>
            If only the type is provided, see <see cref="M:CK.Storage.StructuredReaderAndWriterExtension.ReadInlineObjectStructured(CK.Storage.IStructuredReader,System.Type)"/>.
            </para>
            <para>
            If only the object is provided, see <see cref="M:CK.Storage.StructuredReaderAndWriterExtension.ReadInlineObjectStructured(CK.Storage.IStructuredReader,System.Object)"/>.
            </para>
            </summary>
            <param name="type">Type of the object to read. When null, the type of the object is used. 
            If a <see cref="T:CK.Storage.IStructuredSerializer`1"/> is available in the services, it is used, 
            otherwise, the type offer a default construtor and implement <see cref="T:CK.Storage.IStructuredSerializable"/>.</param>
            <param name="o">The object to read. When null, it will be created by the <see cref="T:CK.Storage.IStructuredSerializer`1"/> if it exists in te services 
            or by a call to <see cref="M:System.Activator.CreateInstance(System.Type)"/>.</param>
            <returns>Deserialized object (can be null).</returns>
        </member>
        <member name="E:CK.Storage.IStructuredReader.ObjectReadExData">
            <summary>
            Fires whenever an object has been read for each extra 
            element found after the object data.
            </summary>
        </member>
        <member name="P:CK.Storage.IStructuredReader.Current">
            <summary>
            Gets the current <see cref="T:CK.Storage.IStructuredReader"/>. 
            It may be this reader or any subordinated reader created by <see cref="M:CK.Storage.IStructuredReader.OpenSubReader"/>.
            </summary>
            <returns>The current reader.</returns>
        </member>
        <member name="P:CK.Storage.IStructuredReader.BaseServiceProvider">
            <summary>
            Gets the <see cref="T:System.IServiceProvider"/> to which this
            reader is ultimately bound.
            </summary>
            <remarks>
            This is the root provider: any <see cref="T:CK.Storage.ISubStructuredReader"/> subordinated
            to a <see cref="T:CK.Storage.IStructuredReader"/> are bound to the same base service provider.
            </remarks>
        </member>
        <member name="P:CK.Storage.IStructuredReader.StorageVersion">
            <summary>
            Gets the global version defined at the root level (the 'document' or 'file' notion).
            </summary>
        </member>
        <member name="P:CK.Storage.IStructuredReader.DeserializationActions">
            <summary>
            Offers post deserialization (deferred) actions.
            Actions should be explicitely executed at the end of a read session, otherwise remaining 
            actions are invoked during <see cref="M:System.IDisposable.Dispose"/> execution.
            </summary>
        </member>
        <member name="P:CK.Storage.IStructuredReader.ServiceContainer">
            <summary>
            Gets the <see cref="T:CK.Core.ISimpleServiceContainer"/> for this reader.
            </summary>
        </member>
        <member name="P:CK.Storage.IStructuredReader.Xml">
            <summary>
            Gets the main <see cref="T:System.Xml.XmlReader"/> object.
            </summary>
        </member>
        <member name="P:CK.Storage.ISubStructuredReader.RootDeserializationActions">
            <summary>
            Gets the <see cref="P:CK.Storage.IStructuredReader.DeserializationActions"/> property of the root
            reader. Actions added to this sequence are executed at the end of the global read operation.
            </summary>
        </member>
        <member name="T:CK.Storage.IStructuredSerializer`1">
            <summary>
            This interface enables external implementation of the serialization to <see cref="T:CK.Storage.IStructuredWriter"/> and deserialization from <see cref="T:CK.Storage.IStructuredReader"/>
            for a given type.
            When available in the services provided by the <see cref="T:System.IServiceProvider"/> associated to the reader or the writer, structured object read/write
            operations are delegated to this implementation instead of relying on <see cref="T:CK.Storage.IStructuredSerializable"/> interface that <typeparamref name="T"/>
            may implement.
            </summary>
            <typeparam name="T">
            The type of the object whose serialization/deserialization is implemented.
            It is the exact object type that will be handled (no fallbacks.
            </typeparam>
            <remarks>
            This interface enables objects implementation to be totally unaware of any persistence mechanism on one hand, and on the 
            other hand to hook existing serialization processes.
            </remarks>
        </member>
        <member name="M:CK.Storage.IStructuredSerializer`1.ReadInlineContent(CK.Storage.IStructuredReader,`0)">
            <summary>
            Reads or creates the object (if the one provided is null) from the given structured storage.
            The current Xml element is already opened and will be closed by the framework: this method must not skip any 
            unknown element nor read the current end element.
            </summary>
            <param name="o">Object to read. Null if the serializer has to create it.</param>
            <param name="sr">The reader from which the object is deserialized.</param>
        </member>
        <member name="M:CK.Storage.IStructuredSerializer`1.WriteInlineContent(CK.Storage.IStructuredWriter,`0)">
            <summary>
            Persists an object into the given <see cref="T:CK.Storage.IStructuredWriter"/>.
            The current Xml element is already opened and will be closed by the framework: this method must not write the end of the current element.
            </summary>
            <param name="sw">The writer to which the object is serialized.</param>
            <param name="o">The object to write.</param>
            <remarks>You can still write attributes on the startElement</remarks>
        </member>
        <member name="T:CK.Storage.ISubStructuredWriter">
            <summary>
            Specialized <see cref="T:CK.Storage.IStructuredWriter"/>. Such subordinate writers
            are obtained through <see cref="M:CK.Storage.IStructuredWriter.OpenSubWriter"/>.
            They must be disposed by the caller when leaving the subordinate scope.
            </summary>
        </member>
        <member name="T:CK.Storage.IStructuredWriter">
            <summary>
            The interface to write information into a very simple, potentially hybrid, structured storage. 
            The heart of the storage is an Xml stream exposed here as the <see cref="P:XmlWriter"/> property. 
            It can be easily extended since it implements <see cref="T:System.IServiceProvider"/> and contains a <see cref="P:ServiceContainer"/>.
            </summary>
            <remarks>
            Since <see cref="T:System.IDisposable"/> is implemented, you must call <see cref="M:System.IDisposable.Dispose"/> when
            you are finished writing.
            </remarks>
        </member>
        <member name="M:CK.Storage.IStructuredWriter.OpenSubWriter">
            <summary>
            Returns a <see cref="T:CK.Storage.ISubStructuredWriter"/> that scopes the writer. 
            </summary>
            <returns>A writer that becomes the <see cref="P:CK.Storage.IStructuredWriter.Current"/> one and must be disposed once its scope must be closed.</returns>
        </member>
        <member name="M:CK.Storage.IStructuredWriter.WriteInlineObject(System.Object)">
            <summary>
            Writes the given object into the structured output. Type information required to restore 
            the object with <see cref="M:CK.Storage.IStructuredReader.ReadInlineObject(CK.Storage.StandardReadStatus@)"/> are injected.
            The current Xml element must be opened and it will be closed by this method.
            </summary>
            <param name="o">The object to write. May be null.</param>
        </member>
        <member name="M:CK.Storage.IStructuredWriter.WriteInlineObjectStructured(System.Object)">
            <summary>
            Writes the given object either via its <see cref="T:CK.Storage.IStructuredSerializable"/> implementation
            or thanks to a <see cref="T:CK.Storage.IStructuredSerializer`1"/> into the structured output.
            </summary>
            <param name="o">The object to write. May be null.</param>
            <remarks>
            This method does not write any type information. Since its type name is not written, it can not be read
            back with <see cref="M:CK.Storage.IStructuredReader.ReadInlineObject(CK.Storage.StandardReadStatus@)"/> method but only
            with <see cref="M:CK.Storage.IStructuredReader.ReadInlineObjectStructured(System.Type,System.Object)"/>
            </remarks>
        </member>
        <member name="E:CK.Storage.IStructuredWriter.ObjectWriteExData">
            <summary>
            Fires each time an object has been written.
            </summary>
        </member>
        <member name="P:CK.Storage.IStructuredWriter.Current">
            <summary>
            Gets the current <see cref="T:CK.Storage.IStructuredWriter"/>. 
            It may be this writer or any subordinated writer created by <see cref="M:CK.Storage.IStructuredWriter.OpenSubWriter"/>.
            </summary>
            <returns>The current writer.</returns>
        </member>
        <member name="P:CK.Storage.IStructuredWriter.Xml">
            <summary>
            The associated <see cref="T:System.Xml.XmlWriter"/> wrapped by this <see cref="T:CK.Storage.IStructuredWriter"/>.
            </summary>
        </member>
        <member name="P:CK.Storage.IStructuredWriter.BaseServiceProvider">
            <summary>
            Gets the <see cref="T:System.IServiceProvider"/> to which this reader is ultimately bound.
            </summary>
            <remarks>
            This is the root provider: any <see cref="T:CK.Storage.ISubStructuredReader"/> subordinated
            to a <see cref="T:CK.Storage.IStructuredReader"/> are bound to the same base service provider.
            </remarks>
        </member>
        <member name="P:CK.Storage.IStructuredWriter.ServiceContainer">
            <summary>
            Gets the <see cref="T:CK.Core.ISimpleServiceContainer"/> for this writer.
            </summary>
        </member>
        <member name="T:CK.Storage.WriterImpl">
            <summary>
            Simple implementation of <see cref="T:CK.Storage.IStructuredWriter"/>.
            </summary>
        </member>
        <member name="T:CK.Storage.WriterBase">
            <summary>
            Simple implementation of <see cref="T:CK.Storage.IStructuredWriter"/>.
            </summary>
        </member>
        <member name="M:CK.Storage.WriterImpl.OnDispose">
            <summary>
            Flushes the inner <see cref="P:XmlWriter"/> and depending on the way this <see cref="T:CK.Storage.SimpleStructuredWriter"/>
            has been created, writes the closing tag before and/or closes the inner writer itself.
            </summary>
        </member>
        <member name="T:CK.Storage.IProtectedStructuredWriter">
            <summary>
            Protects a <see cref="T:CK.Storage.IStructuredWriter"/> write: changes are effective only 
            when <see cref="M:CK.Storage.IProtectedStructuredWriter.SaveChanges"/> is called.
            </summary>
        </member>
        <member name="M:CK.Storage.IProtectedStructuredWriter.SaveChanges">
            <summary>
            Do save the changes.
            </summary>
        </member>
        <member name="P:CK.Storage.IProtectedStructuredWriter.StructuredWriter">
            <summary>
            Gets the <see cref="T:CK.Storage.IStructuredWriter"/> to write to.
            </summary>
        </member>
        <member name="T:CK.Storage.StandardReadStatus">
            <summary>
            Defines the result of a read operation.
            </summary>
        </member>
        <member name="F:CK.Storage.StandardReadStatus.NullData">
            <summary>
            Set when a null object has been read.
            </summary>
        </member>
        <member name="F:CK.Storage.StandardReadStatus.SimpleTypeData">
            <summary>
            Set when a simple typed object (not null) has been read.
            </summary>
        </member>
        <member name="F:CK.Storage.StandardReadStatus.XmlSerializable">
            <summary>
            Set when an <see cref="T:System.Xml.Serialization.IXmlSerializable"/> object has been read.
            </summary>
        </member>
        <member name="F:CK.Storage.StandardReadStatus.BinaryObject">
            <summary>
            Set when a serialized object has been read.
            </summary>
        </member>
        <member name="F:CK.Storage.StandardReadStatus.Structured">
            <summary>
            Set when an <see cref="T:CK.Storage.IStructuredSerializable"/> object has been read.
            </summary>
        </member>
        <member name="F:CK.Storage.StandardReadStatus.IgnoredType">
            <summary>
            Set when a type has not been resolved. The read value is set to the default for the expected type (null for object, 0 for enum).
            </summary>
        </member>
        <member name="F:CK.Storage.StandardReadStatus.ErrorXmlRead">
            <summary>
            Set when a general Xml error occured such as a missing end tag or any malformed xml. 
            </summary>
        </member>
        <member name="F:CK.Storage.StandardReadStatus.ErrorWhileReadingElementObject">
            <summary>
            Set when an error occured during the read of a data element.
            </summary>
        </member>
        <member name="F:CK.Storage.StandardReadStatus.ErrorTypeAttributeMissing">
            <summary>
            Set when the 'type' required attribute is missing.
            </summary>
        </member>
        <member name="F:CK.Storage.StandardReadStatus.ErrorUnknownTypeAttribute">
            <summary>
            Set when the type="xxx" attribute references an unknown type.
            </summary>
        </member>
        <member name="F:CK.Storage.StandardReadStatus.LastReadError">
            <summary>
            Defines the greatest error code for this read status.
            </summary>
        </member>
        <member name="F:CK.Storage.StandardReadStatus.ErrorMask">
            <summary>
            Mask that covers all the errors.
            </summary>
        </member>
        <member name="T:CK.Storage.FileProtectedStructuredWriter">
            <summary>
            Implementation of <see cref="T:CK.Storage.IProtectedStructuredWriter"/> for files.
            </summary>
        </member>
        <member name="M:CK.Storage.FileProtectedStructuredWriter.#ctor(System.String,System.IServiceProvider,System.Func{System.IO.Stream,System.IServiceProvider,CK.Storage.IStructuredWriter})">
            <summary>
            Initializes a new <see cref="T:CK.Storage.FileProtectedStructuredWriter"/>.
            Actual changes will be effective in <paramref name="path"/> only when <see cref="M:CK.Storage.FileProtectedStructuredWriter.SaveChanges"/> is called.
            </summary>
            <param name="path">Path of the file to write to.</param>
            <param name="ctx">Services provider.</param>
            <param name="opener">Function that actually opens a stream as a <see cref="T:CK.Storage.IStructuredWriter"/>.</param>
        </member>
        <member name="M:CK.Storage.FileProtectedStructuredWriter.SaveChanges">
            <summary>
            Atomically saves the changes and dispose the <see cref="P:CK.Storage.FileProtectedStructuredWriter.StructuredWriter"/> (this method 
            must be called only once, any subsequent calls are ignored).
            </summary>
        </member>
        <member name="P:CK.Storage.FileProtectedStructuredWriter.StructuredWriter">
            <summary>
            Gets the <see cref="T:CK.Storage.IStructuredWriter"/>.
            </summary>
        </member>
        <member name="T:CK.Storage.IStructuredSerializable">
            <summary>
            Provides custom serialization to <see cref="T:CK.Storage.IStructuredWriter"/> and deserialization from <see cref="T:CK.Storage.IStructuredReader"/>.
            </summary>
        </member>
        <member name="M:CK.Storage.IStructuredSerializable.ReadContent(CK.Storage.IStructuredReader)">
            <summary>
            Restores this object from the given structured storage.
            The current Xml element is already opened and will be closed by the framework: this method must not skip any 
            unknown element nor read the current end element.
            </summary>
            <param name="sr">The reader from which the object is deserialized.</param>
        </member>
        <member name="M:CK.Storage.IStructuredSerializable.WriteContent(CK.Storage.IStructuredWriter)">
            <summary>
            Persists an object into the given <see cref="T:CK.Storage.IStructuredWriter"/>.
            The current Xml element is already opened and will be closed by the framework: this method must not write the end of the current element.
            </summary>
            <param name="sw">The writer to which the object is serialized.</param>
        </member>
        <member name="T:CK.Storage.R">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CK.Storage.R.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CK.Storage.R.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CK.Storage.R.AtLeastTypeOrObjectMustBeSpecified">
            <summary>
              Looks up a localized string similar to The type and object parameter can not be both null..
            </summary>
        </member>
        <member name="P:CK.Storage.R.DeserializeError">
            <summary>
              Looks up a localized string similar to Error while deserializing..
            </summary>
        </member>
        <member name="P:CK.Storage.R.DuplicateReferenceObjectRegistration">
            <summary>
              Looks up a localized string similar to Object reference &apos;{0}&apos; is already registered. An object can be deserialized only once..
            </summary>
        </member>
        <member name="P:CK.Storage.R.FileNotFound">
            <summary>
              Looks up a localized string similar to File not found..
            </summary>
        </member>
        <member name="P:CK.Storage.R.InvalidCallToSimpleStructuredWriterCloseFile">
            <summary>
              Looks up a localized string similar to SimpleStructuredWriter.CloseFile must be used only with writer obtained by OpenFile..
            </summary>
        </member>
        <member name="P:CK.Storage.R.InvalidFileManifest">
            <summary>
              Looks up a localized string similar to Unable to read file: manifest file can not be read..
            </summary>
        </member>
        <member name="P:CK.Storage.R.InvalidFileManifestVersion">
            <summary>
              Looks up a localized string similar to Unable to read file: version information is missing in manifest file..
            </summary>
        </member>
        <member name="P:CK.Storage.R.InvalidXml">
            <summary>
              Looks up a localized string similar to Error while reading Xml..
            </summary>
        </member>
        <member name="P:CK.Storage.R.MissingReferenceAttribute">
            <summary>
              Looks up a localized string similar to Missing object reference attribute &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:CK.Storage.R.NotWritableStructuredObject">
            <summary>
              Looks up a localized string similar to Unable to use structured serialization. The object does not implement IStructuredSerializable and no IStructuredSerializer service exists for the type {0}..
            </summary>
        </member>
        <member name="P:CK.Storage.R.SizeDifferError">
            <summary>
              Looks up a localized string similar to Incorrect binary data. Size differ. Expected {0}, was {1}..
            </summary>
        </member>
        <member name="P:CK.Storage.R.UnableToReadInlineObject">
            <summary>
              Looks up a localized string similar to Unable to read inline object from Xml..
            </summary>
        </member>
        <member name="T:CK.Storage.ObjectWriteExDataEventArgs">
            <summary>
            Provides data for <see cref="E:CK.Storage.IStructuredWriter.ObjectWriteExData"/> event.
            </summary>
        </member>
        <member name="F:CK.Storage.ObjectWriteExDataEventArgs.Obj">
            <summary>
            Gets the object written.
            </summary>
        </member>
        <member name="F:CK.Storage.ObjectWriteExDataEventArgs.Writer">
            <summary>
            Gets the structured writer.
            </summary>
        </member>
        <member name="M:CK.Storage.ObjectWriteExDataEventArgs.#ctor(CK.Storage.IStructuredWriter,System.Object)">
            <summary>
            Initializes a new <see cref="T:CK.Storage.ObjectWriteExDataEventArgs"/>.
            </summary>
            <param name="w">Structured writer.</param>
            <param name="o">Object written.</param>
        </member>
        <member name="T:CK.Storage.ReaderImpl">
            <summary>
            Simple implementation of <see cref="T:CK.Storage.IStructuredReader"/>.
            </summary>
        </member>
    </members>
</doc>
